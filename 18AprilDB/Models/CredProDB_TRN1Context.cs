using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace _18AprilDB.Models
{
    public partial class CredProDB_TRN1Context : DbContext
    {
        public CredProDB_TRN1Context()
        {
        }

        public CredProDB_TRN1Context(DbContextOptions<CredProDB_TRN1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; } = null!;
        public virtual DbSet<AppsummaryCalculation> AppsummaryCalculations { get; set; } = null!;
        public virtual DbSet<ColTypeDatum> ColTypeData { get; set; } = null!;
        public virtual DbSet<CollateralDataUpload> CollateralDataUploads { get; set; } = null!;
        public virtual DbSet<CollateralDataWithoutComma2> CollateralDataWithoutComma2s { get; set; } = null!;
        public virtual DbSet<Counter> Counters { get; set; } = null!;
        public virtual DbSet<Description> Descriptions { get; set; } = null!;
        public virtual DbSet<Dual> Duals { get; set; } = null!;
        public virtual DbSet<EmailErrorLog> EmailErrorLogs { get; set; } = null!;
        public virtual DbSet<Employe> Employes { get; set; } = null!;
        public virtual DbSet<FacilityDataUpload> FacilityDataUploads { get; set; } = null!;
        public virtual DbSet<FacilityDataUploadUpdated5> FacilityDataUploadUpdated5s { get; set; } = null!;
        public virtual DbSet<Fxrate> Fxrates { get; set; } = null!;
        public virtual DbSet<Hash> Hashes { get; set; } = null!;
        public virtual DbSet<IvwIndGearing> IvwIndGearings { get; set; } = null!;
        public virtual DbSet<Job> Jobs { get; set; } = null!;
        public virtual DbSet<JobParameter> JobParameters { get; set; } = null!;
        public virtual DbSet<JobQueue> JobQueues { get; set; } = null!;
        public virtual DbSet<List> Lists { get; set; } = null!;
        public virtual DbSet<LmCalVw> LmCalVws { get; set; } = null!;
        public virtual DbSet<LmExpCal> LmExpCals { get; set; } = null!;
        public virtual DbSet<LmFacCal> LmFacCals { get; set; } = null!;
        public virtual DbSet<LmResCal> LmResCals { get; set; } = null!;
        public virtual DbSet<LmSodCal> LmSodCals { get; set; } = null!;
        public virtual DbSet<LtctpttxtMap> LtctpttxtMaps { get; set; } = null!;
        public virtual DbSet<M2cfs20120109> M2cfs20120109s { get; set; } = null!;
        public virtual DbSet<MigConditionsAu> MigConditionsAus { get; set; } = null!;
        public virtual DbSet<MigCrossColl> MigCrossColls { get; set; } = null!;
        public virtual DbSet<MigCrossCollAu> MigCrossCollAus { get; set; } = null!;
        public virtual DbSet<MigFacility> MigFacilities { get; set; } = null!;
        public virtual DbSet<MigFacilityAu> MigFacilityAus { get; set; } = null!;
        public virtual DbSet<MigGuarantee> MigGuarantees { get; set; } = null!;
        public virtual DbSet<MigGuaranteeAu> MigGuaranteeAus { get; set; } = null!;
        public virtual DbSet<MigIdentifierEnc> MigIdentifierEncs { get; set; } = null!;
        public virtual DbSet<MigPropSec> MigPropSecs { get; set; } = null!;
        public virtual DbSet<MigSecurity> MigSecurities { get; set; } = null!;
        public virtual DbSet<MigSecurityAu> MigSecurityAus { get; set; } = null!;
        public virtual DbSet<MistrackerDetailsReportDashboard> MistrackerDetailsReportDashboards { get; set; } = null!;
        public virtual DbSet<MistrackerHistoryDetailsReport> MistrackerHistoryDetailsReports { get; set; } = null!;
        public virtual DbSet<MistrackerHistoryDetailsReportDashboard> MistrackerHistoryDetailsReportDashboards { get; set; } = null!;
        public virtual DbSet<Mra2cmsFinancialStmt> Mra2cmsFinancialStmts { get; set; } = null!;
        public virtual DbSet<MraFinancialDataNewFormatHist> MraFinancialDataNewFormatHists { get; set; } = null!;
        public virtual DbSet<MraFinancialDataNewformat> MraFinancialDataNewformats { get; set; } = null!;
        public virtual DbSet<MraFinancialDataNewformat1> MraFinancialDataNewformat1s { get; set; } = null!;
        public virtual DbSet<MraFinancialDataNewformat2> MraFinancialDataNewformat2s { get; set; } = null!;
        public virtual DbSet<MracmsFinancialDataNewFormatTemp> MracmsFinancialDataNewFormatTemps { get; set; } = null!;
        public virtual DbSet<MracmsFinancialDatum> MracmsFinancialData { get; set; } = null!;
        public virtual DbSet<OsfacilityDetail> OsfacilityDetails { get; set; } = null!;
        public virtual DbSet<RsoutBorrBasicInfo> RsoutBorrBasicInfos { get; set; } = null!;
        public virtual DbSet<RsoutDetailRiskRpt> RsoutDetailRiskRpts { get; set; } = null!;
        public virtual DbSet<RsoutProposal> RsoutProposals { get; set; } = null!;
        public virtual DbSet<RsoutProposalBorrRaroc> RsoutProposalBorrRarocs { get; set; } = null!;
        public virtual DbSet<RsoutProposalChargeDtl> RsoutProposalChargeDtls { get; set; } = null!;
        public virtual DbSet<RsoutProposalFacRaroc> RsoutProposalFacRarocs { get; set; } = null!;
        public virtual DbSet<RsoutProposalFacility> RsoutProposalFacilities { get; set; } = null!;
        public virtual DbSet<RsoutProposalGuarantee> RsoutProposalGuarantees { get; set; } = null!;
        public virtual DbSet<RsoutProposalSecurity> RsoutProposalSecurities { get; set; } = null!;
        public virtual DbSet<RsoutSubjDataCnf> RsoutSubjDataCnfs { get; set; } = null!;
        public virtual DbSet<RuleSet> RuleSets { get; set; } = null!;
        public virtual DbSet<RuleSet20220621> RuleSet20220621s { get; set; } = null!;
        public virtual DbSet<RuleSetRemove> RuleSetRemoves { get; set; } = null!;
        public virtual DbSet<Schema> Schemas { get; set; } = null!;
        public virtual DbSet<Server> Servers { get; set; } = null!;
        public virtual DbSet<Set> Sets { get; set; } = null!;
        public virtual DbSet<State> States { get; set; } = null!;
        public virtual DbSet<T24cmCollateralXmldatum> T24cmCollateralXmldata { get; set; } = null!;
        public virtual DbSet<T24prodMaster> T24prodMasters { get; set; } = null!;
        public virtual DbSet<T24prodMasterHistory> T24prodMasterHistories { get; set; } = null!;
        public virtual DbSet<Table2> Table2s { get; set; } = null!;
        public virtual DbSet<TblAadhaarVaultLogger> TblAadhaarVaultLoggers { get; set; } = null!;
        public virtual DbSet<TblActionStatusDptracker> TblActionStatusDptrackers { get; set; } = null!;
        public virtual DbSet<TblActionStatusDptrackerHistory> TblActionStatusDptrackerHistories { get; set; } = null!;
        public virtual DbSet<TblActionableMaster> TblActionableMasters { get; set; } = null!;
        public virtual DbSet<TblActivityStatus> TblActivityStatuses { get; set; } = null!;
        public virtual DbSet<TblAddonMatrix> TblAddonMatrices { get; set; } = null!;
        public virtual DbSet<TblAddressType> TblAddressTypes { get; set; } = null!;
        public virtual DbSet<TblAdminChange> TblAdminChanges { get; set; } = null!;
        public virtual DbSet<TblAdminCleanUpAction> TblAdminCleanUpActions { get; set; } = null!;
        public virtual DbSet<TblAggregateExposureSourceSystem> TblAggregateExposureSourceSystems { get; set; } = null!;
        public virtual DbSet<TblAlertAndNotification> TblAlertAndNotifications { get; set; } = null!;
        public virtual DbSet<TblAnalysisConfigMaster> TblAnalysisConfigMasters { get; set; } = null!;
        public virtual DbSet<TblAnalysisConfigMaster1307bkp> TblAnalysisConfigMaster1307bkps { get; set; } = null!;
        public virtual DbSet<TblAnalysisTabMaster> TblAnalysisTabMasters { get; set; } = null!;
        public virtual DbSet<TblAnalysisTemplate> TblAnalysisTemplates { get; set; } = null!;
        public virtual DbSet<TblAnalysisType> TblAnalysisTypes { get; set; } = null!;
        public virtual DbSet<TblAppSectionConfig> TblAppSectionConfigs { get; set; } = null!;
        public virtual DbSet<TblAppSectionMaster> TblAppSectionMasters { get; set; } = null!;
        public virtual DbSet<TblApplicationConfiguration> TblApplicationConfigurations { get; set; } = null!;
        public virtual DbSet<TblApplicationConfiguration20180719> TblApplicationConfiguration20180719s { get; set; } = null!;
        public virtual DbSet<TblApplicationsForDepartmentHistoryRpt> TblApplicationsForDepartmentHistoryRpts { get; set; } = null!;
        public virtual DbSet<TblApplicationsForDepartmentRpt> TblApplicationsForDepartmentRpts { get; set; } = null!;
        public virtual DbSet<TblAqlist> TblAqlists { get; set; } = null!;
        public virtual DbSet<TblAssetType> TblAssetTypes { get; set; } = null!;
        public virtual DbSet<TblAstarclassification> TblAstarclassifications { get; set; } = null!;
        public virtual DbSet<TblAuditedMethod> TblAuditedMethods { get; set; } = null!;
        public virtual DbSet<TblAuditorMaster> TblAuditorMasters { get; set; } = null!;
        public virtual DbSet<TblAuditorPartner> TblAuditorPartners { get; set; } = null!;
        public virtual DbSet<TblAuditorPartnerMapper> TblAuditorPartnerMappers { get; set; } = null!;
        public virtual DbSet<TblAutoGenDocument> TblAutoGenDocuments { get; set; } = null!;
        public virtual DbSet<TblAutoRenewalFileUpload> TblAutoRenewalFileUploads { get; set; } = null!;
        public virtual DbSet<TblAutoRenewalFileUploadComputation> TblAutoRenewalFileUploadComputations { get; set; } = null!;
        public virtual DbSet<TblAutoRenewalFileUploadComputationHistory> TblAutoRenewalFileUploadComputationHistories { get; set; } = null!;
        public virtual DbSet<TblAutoRenewalFileUploadHistory> TblAutoRenewalFileUploadHistories { get; set; } = null!;
        public virtual DbSet<TblAutoRenewalId> TblAutoRenewalIds { get; set; } = null!;
        public virtual DbSet<TblBankType> TblBankTypes { get; set; } = null!;
        public virtual DbSet<TblBankValuesMaster> TblBankValuesMasters { get; set; } = null!;
        public virtual DbSet<TblBankingStatementAnalysis> TblBankingStatementAnalyses { get; set; } = null!;
        public virtual DbSet<TblBankingStatementAnalysis20210308> TblBankingStatementAnalysis20210308s { get; set; } = null!;
        public virtual DbSet<TblBanksMaster> TblBanksMasters { get; set; } = null!;
        public virtual DbSet<TblBaselEntityType> TblBaselEntityTypes { get; set; } = null!;
        public virtual DbSet<TblBifr> TblBifrs { get; set; } = null!;
        public virtual DbSet<TblBlockedIpDetail> TblBlockedIpDetails { get; set; } = null!;
        public virtual DbSet<TblBranch> TblBranches { get; set; } = null!;
        public virtual DbSet<TblBsastatementUpload> TblBsastatementUploads { get; set; } = null!;
        public virtual DbSet<TblBsastatementUpload20210308> TblBsastatementUpload20210308s { get; set; } = null!;
        public virtual DbSet<TblBusinessClass> TblBusinessClasses { get; set; } = null!;
        public virtual DbSet<TblBusinessClassRole> TblBusinessClassRoles { get; set; } = null!;
        public virtual DbSet<TblBusinessClassUser> TblBusinessClassUsers { get; set; } = null!;
        public virtual DbSet<TblCalender> TblCalenders { get; set; } = null!;
        public virtual DbSet<TblCautionAdvice> TblCautionAdvices { get; set; } = null!;
        public virtual DbSet<TblCbeconomicSector> TblCbeconomicSectors { get; set; } = null!;
        public virtual DbSet<TblCbrbclassification> TblCbrbclassifications { get; set; } = null!;
        public virtual DbSet<TblCbsexposure> TblCbsexposures { get; set; } = null!;
        public virtual DbSet<TblCcbgMisapplicationTracker> TblCcbgMisapplicationTrackers { get; set; } = null!;
        public virtual DbSet<TblCcbgMisapplicationTrackerHistory> TblCcbgMisapplicationTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblCcbgMiscounterparty> TblCcbgMiscounterparties { get; set; } = null!;
        public virtual DbSet<TblCcbgMiscounterpartyHistory> TblCcbgMiscounterpartyHistories { get; set; } = null!;
        public virtual DbSet<TblCcbgMisfacilityTracker> TblCcbgMisfacilityTrackers { get; set; } = null!;
        public virtual DbSet<TblCcbgMisfacilityTrackerHistory> TblCcbgMisfacilityTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblCcfmatrix> TblCcfmatrices { get; set; } = null!;
        public virtual DbSet<TblCfr> TblCfrs { get; set; } = null!;
        public virtual DbSet<TblChkListNsf25to1Cr> TblChkListNsf25to1Crs { get; set; } = null!;
        public virtual DbSet<TblChkListNsfabove1Cr> TblChkListNsfabove1Crs { get; set; } = null!;
        public virtual DbSet<TblChkListSf25to1Cr> TblChkListSf25to1Crs { get; set; } = null!;
        public virtual DbSet<TblChkListSfabove1Cr> TblChkListSfabove1Crs { get; set; } = null!;
        public virtual DbSet<TblCity> TblCities { get; set; } = null!;
        public virtual DbSet<TblCndmowfactionStatusConditionsItemsTracker> TblCndmowfactionStatusConditionsItemsTrackers { get; set; } = null!;
        public virtual DbSet<TblCndmowfactionStatusConditionsItemsTrackerHistory> TblCndmowfactionStatusConditionsItemsTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblCndmowfactionStatusConditionsTracker> TblCndmowfactionStatusConditionsTrackers { get; set; } = null!;
        public virtual DbSet<TblCndmowfactionStatusConditionsTrackerHistory> TblCndmowfactionStatusConditionsTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblCollateralUploadStatus> TblCollateralUploadStatuses { get; set; } = null!;
        public virtual DbSet<TblCommitteeMeetingScheduler> TblCommitteeMeetingSchedulers { get; set; } = null!;
        public virtual DbSet<TblCommitteeMeetingSchedulerParent> TblCommitteeMeetingSchedulerParents { get; set; } = null!;
        public virtual DbSet<TblCompGroupId> TblCompGroupIds { get; set; } = null!;
        public virtual DbSet<TblCompositeGroupConstitution> TblCompositeGroupConstitutions { get; set; } = null!;
        public virtual DbSet<TblConditionItemsStatusRpt> TblConditionItemsStatusRpts { get; set; } = null!;
        public virtual DbSet<TblConditionRootStatusRpt> TblConditionRootStatusRpts { get; set; } = null!;
        public virtual DbSet<TblConditionType> TblConditionTypes { get; set; } = null!;
        public virtual DbSet<TblConditionsItemsUniqueId> TblConditionsItemsUniqueIds { get; set; } = null!;
        public virtual DbSet<TblConditionsUniqueId> TblConditionsUniqueIds { get; set; } = null!;
        public virtual DbSet<TblConfigurationsChangeLog> TblConfigurationsChangeLogs { get; set; } = null!;
        public virtual DbSet<TblCounterparty> TblCounterparties { get; set; } = null!;
        public virtual DbSet<TblCounterpartyAlias> TblCounterpartyAliases { get; set; } = null!;
        public virtual DbSet<TblCounterpartyCreditCheck> TblCounterpartyCreditChecks { get; set; } = null!;
        public virtual DbSet<TblCounterpartyEwsstatus> TblCounterpartyEwsstatuses { get; set; } = null!;
        public virtual DbSet<TblCounterpartyEwsstatusImport> TblCounterpartyEwsstatusImports { get; set; } = null!;
        public virtual DbSet<TblCounterpartyJvinfo> TblCounterpartyJvinfos { get; set; } = null!;
        public virtual DbSet<TblCounterpartyLegal> TblCounterpartyLegals { get; set; } = null!;
        public virtual DbSet<TblCounterpartyLegalDeclined> TblCounterpartyLegalDeclineds { get; set; } = null!;
        public virtual DbSet<TblCounterpartyMarketCheck> TblCounterpartyMarketChecks { get; set; } = null!;
        public virtual DbSet<TblCounterpartyMeetingRecorder> TblCounterpartyMeetingRecorders { get; set; } = null!;
        public virtual DbSet<TblCounterpartyPlantVisit> TblCounterpartyPlantVisits { get; set; } = null!;
        public virtual DbSet<TblCounterpartyPostDisbursalConditionReport> TblCounterpartyPostDisbursalConditionReports { get; set; } = null!;
        public virtual DbSet<TblCounterpartyRcu> TblCounterpartyRcus { get; set; } = null!;
        public virtual DbSet<TblCounterpartyRcudeclined> TblCounterpartyRcudeclineds { get; set; } = null!;
        public virtual DbSet<TblCounterpartyRpt> TblCounterpartyRpts { get; set; } = null!;
        public virtual DbSet<TblCounterpartyStockAudit> TblCounterpartyStockAudits { get; set; } = null!;
        public virtual DbSet<TblCounterpartyTechnical> TblCounterpartyTechnicals { get; set; } = null!;
        public virtual DbSet<TblCounterpartyTechnicalDeclined> TblCounterpartyTechnicalDeclineds { get; set; } = null!;
        public virtual DbSet<TblCounterpartyType> TblCounterpartyTypes { get; set; } = null!;
        public virtual DbSet<TblCounterpartyUhfcreport> TblCounterpartyUhfcreports { get; set; } = null!;
        public virtual DbSet<TblCountry> TblCountries { get; set; } = null!;
        public virtual DbSet<TblCountryHeirarchy> TblCountryHeirarchies { get; set; } = null!;
        public virtual DbSet<TblCovenantsUniqueId> TblCovenantsUniqueIds { get; set; } = null!;
        public virtual DbSet<TblCreditCheckServiceMonitor> TblCreditCheckServiceMonitors { get; set; } = null!;
        public virtual DbSet<TblCreditEnhancer> TblCreditEnhancers { get; set; } = null!;
        public virtual DbSet<TblCrifhighmark> TblCrifhighmarks { get; set; } = null!;
        public virtual DbSet<TblCrilictopBorrower> TblCrilictopBorrowers { get; set; } = null!;
        public virtual DbSet<TblCrilictopBorrowerFlat> TblCrilictopBorrowerFlats { get; set; } = null!;
        public virtual DbSet<TblCropCostAndIncomeMaster> TblCropCostAndIncomeMasters { get; set; } = null!;
        public virtual DbSet<TblCrossCollateralLinkage> TblCrossCollateralLinkages { get; set; } = null!;
        public virtual DbSet<TblCtptAppCreated> TblCtptAppCreateds { get; set; } = null!;
        public virtual DbSet<TblCtptDirector> TblCtptDirectors { get; set; } = null!;
        public virtual DbSet<TblCtptHierarchy> TblCtptHierarchies { get; set; } = null!;
        public virtual DbSet<TblCtptHierarchyHistory> TblCtptHierarchyHistories { get; set; } = null!;
        public virtual DbSet<TblCtptHierarchyRpt> TblCtptHierarchyRpts { get; set; } = null!;
        public virtual DbSet<TblCtptJointUtilization> TblCtptJointUtilizations { get; set; } = null!;
        public virtual DbSet<TblCtptLtMapper> TblCtptLtMappers { get; set; } = null!;
        public virtual DbSet<TblCtptUdf> TblCtptUdfs { get; set; } = null!;
        public virtual DbSet<TblCtptaddress> TblCtptaddresses { get; set; } = null!;
        public virtual DbSet<TblCtptauditor> TblCtptauditors { get; set; } = null!;
        public virtual DbSet<TblCtptborrRaroc> TblCtptborrRarocs { get; set; } = null!;
        public virtual DbSet<TblCtptchargeDtl> TblCtptchargeDtls { get; set; } = null!;
        public virtual DbSet<TblCtptcontactDetail> TblCtptcontactDetails { get; set; } = null!;
        public virtual DbSet<TblCtptcreditManager> TblCtptcreditManagers { get; set; } = null!;
        public virtual DbSet<TblCtptdefaulterList> TblCtptdefaulterLists { get; set; } = null!;
        public virtual DbSet<TblCtptfacRaroc> TblCtptfacRarocs { get; set; } = null!;
        public virtual DbSet<TblCtptfacility> TblCtptfacilities { get; set; } = null!;
        public virtual DbSet<TblCtptguarantee> TblCtptguarantees { get; set; } = null!;
        public virtual DbSet<TblCtptidentificationMaster> TblCtptidentificationMasters { get; set; } = null!;
        public virtual DbSet<TblCtptidentifiersDetail> TblCtptidentifiersDetails { get; set; } = null!;
        public virtual DbSet<TblCtptincomeAndObligation> TblCtptincomeAndObligations { get; set; } = null!;
        public virtual DbSet<TblCtptinternalRating> TblCtptinternalRatings { get; set; } = null!;
        public virtual DbSet<TblCtptinternalRatingsExtended> TblCtptinternalRatingsExtendeds { get; set; } = null!;
        public virtual DbSet<TblCtptlegalCase> TblCtptlegalCases { get; set; } = null!;
        public virtual DbSet<TblCtptloanEligibility> TblCtptloanEligibilities { get; set; } = null!;
        public virtual DbSet<TblCtptmcaCharge> TblCtptmcaCharges { get; set; } = null!;
        public virtual DbSet<TblCtptowner> TblCtptowners { get; set; } = null!;
        public virtual DbSet<TblCtptpassport> TblCtptpassports { get; set; } = null!;
        public virtual DbSet<TblCtptrating> TblCtptratings { get; set; } = null!;
        public virtual DbSet<TblCtptratingHistory> TblCtptratingHistories { get; set; } = null!;
        public virtual DbSet<TblCtptriskSensitivity> TblCtptriskSensitivities { get; set; } = null!;
        public virtual DbSet<TblCtptrmdetail> TblCtptrmdetails { get; set; } = null!;
        public virtual DbSet<TblCtptrmdetailsDeleted> TblCtptrmdetailsDeleteds { get; set; } = null!;
        public virtual DbSet<TblCtptrmdetailsToBeDeleted> TblCtptrmdetailsToBeDeleteds { get; set; } = null!;
        public virtual DbSet<TblCtptsalesReject> TblCtptsalesRejects { get; set; } = null!;
        public virtual DbSet<TblCtptscoring> TblCtptscorings { get; set; } = null!;
        public virtual DbSet<TblCtptsecurity> TblCtptsecurities { get; set; } = null!;
        public virtual DbSet<TblCtptsubjectiveInfo> TblCtptsubjectiveInfos { get; set; } = null!;
        public virtual DbSet<TblCtptsystem> TblCtptsystems { get; set; } = null!;
        public virtual DbSet<TblCtptuploadedFile> TblCtptuploadedFiles { get; set; } = null!;
        public virtual DbSet<TblCtptwfdraftTracker> TblCtptwfdraftTrackers { get; set; } = null!;
        public virtual DbSet<TblCtptwfdraftTrackerForOutOfOffice> TblCtptwfdraftTrackerForOutOfOffices { get; set; } = null!;
        public virtual DbSet<TblCtptwfdraftTrackerOutOfOffice> TblCtptwfdraftTrackerOutOfOffices { get; set; } = null!;
        public virtual DbSet<TblCurrency> TblCurrencies { get; set; } = null!;
        public virtual DbSet<TblCustomer> TblCustomers { get; set; } = null!;
        public virtual DbSet<TblCustomerLead> TblCustomerLeads { get; set; } = null!;
        public virtual DbSet<TblCustomerProjectImport> TblCustomerProjectImports { get; set; } = null!;
        public virtual DbSet<TblCustomerRequest> TblCustomerRequests { get; set; } = null!;
        public virtual DbSet<TblCustomerRequestId> TblCustomerRequestIds { get; set; } = null!;
        public virtual DbSet<TblCustomerRequestsDraft> TblCustomerRequestsDrafts { get; set; } = null!;
        public virtual DbSet<TblDay0UploadPath> TblDay0UploadPaths { get; set; } = null!;
        public virtual DbSet<TblDberrorLog> TblDberrorLogs { get; set; } = null!;
        public virtual DbSet<TblDbuploadServiceConfig> TblDbuploadServiceConfigs { get; set; } = null!;
        public virtual DbSet<TblDcwfactionStatusConstTracker> TblDcwfactionStatusConstTrackers { get; set; } = null!;
        public virtual DbSet<TblDcwfactionStatusConstTrackerHistory> TblDcwfactionStatusConstTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDealTeamApplication> TblDealTeamApplications { get; set; } = null!;
        public virtual DbSet<TblDealTeamApplicationHistory> TblDealTeamApplicationHistories { get; set; } = null!;
        public virtual DbSet<TblDealTeamComment> TblDealTeamComments { get; set; } = null!;
        public virtual DbSet<TblDealTeamCommentsHistory> TblDealTeamCommentsHistories { get; set; } = null!;
        public virtual DbSet<TblDealTeamCounterparty> TblDealTeamCounterparties { get; set; } = null!;
        public virtual DbSet<TblDedupeBbg> TblDedupeBbgs { get; set; } = null!;
        public virtual DbSet<TblDedupeBbg20180413> TblDedupeBbg20180413s { get; set; } = null!;
        public virtual DbSet<TblDedupeBbginternal> TblDedupeBbginternals { get; set; } = null!;
        public virtual DbSet<TblDedupeId> TblDedupeIds { get; set; } = null!;
        public virtual DbSet<TblDedupetablesDetail> TblDedupetablesDetails { get; set; } = null!;
        public virtual DbSet<TblDedupetablesFieldMap> TblDedupetablesFieldMaps { get; set; } = null!;
        public virtual DbSet<TblDefaultCreditOfficer> TblDefaultCreditOfficers { get; set; } = null!;
        public virtual DbSet<TblDefaultCreditOfficerFileUpload> TblDefaultCreditOfficerFileUploads { get; set; } = null!;
        public virtual DbSet<TblDefaultCreditOfficerHistory> TblDefaultCreditOfficerHistories { get; set; } = null!;
        public virtual DbSet<TblDefaultLimitMaster> TblDefaultLimitMasters { get; set; } = null!;
        public virtual DbSet<TblDeficiency> TblDeficiencies { get; set; } = null!;
        public virtual DbSet<TblDelinquency> TblDelinquencies { get; set; } = null!;
        public virtual DbSet<TblDeliquenyClass> TblDeliquenyClasses { get; set; } = null!;
        public virtual DbSet<TblDepartment> TblDepartments { get; set; } = null!;
        public virtual DbSet<TblDeptAssignedPortfolio> TblDeptAssignedPortfolios { get; set; } = null!;
        public virtual DbSet<TblDesignation> TblDesignations { get; set; } = null!;
        public virtual DbSet<TblDeviationsId> TblDeviationsIds { get; set; } = null!;
        public virtual DbSet<TblDeviationsModel> TblDeviationsModels { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig> TblDisplaySectionConfigs { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig20180517> TblDisplaySectionConfig20180517s { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig20180518> TblDisplaySectionConfig20180518s { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig20180719> TblDisplaySectionConfig20180719s { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig20180726> TblDisplaySectionConfig20180726s { get; set; } = null!;
        public virtual DbSet<TblDisplaySectionConfig20190912> TblDisplaySectionConfig20190912s { get; set; } = null!;
        public virtual DbSet<TblDmbrokingEntityLetter> TblDmbrokingEntityLetters { get; set; } = null!;
        public virtual DbSet<TblDmcancelSldocument> TblDmcancelSldocuments { get; set; } = null!;
        public virtual DbSet<TblDmconstitutional> TblDmconstitutionals { get; set; } = null!;
        public virtual DbSet<TblDmconstitutionalMaster> TblDmconstitutionalMasters { get; set; } = null!;
        public virtual DbSet<TblDmdefermentDocument> TblDmdefermentDocuments { get; set; } = null!;
        public virtual DbSet<TblDmdeletedDocument> TblDmdeletedDocuments { get; set; } = null!;
        public virtual DbSet<TblDmdocEntityMapper> TblDmdocEntityMappers { get; set; } = null!;
        public virtual DbSet<TblDmdocsToBeSubmitted> TblDmdocsToBeSubmitteds { get; set; } = null!;
        public virtual DbSet<TblDmdocumentAttachmentLevelLinkingMaster> TblDmdocumentAttachmentLevelLinkingMasters { get; set; } = null!;
        public virtual DbSet<TblDmdocumentMaster> TblDmdocumentMasters { get; set; } = null!;
        public virtual DbSet<TblDmdocumentType> TblDmdocumentTypes { get; set; } = null!;
        public virtual DbSet<TblDmdocumentTypeBkp0108> TblDmdocumentTypeBkp0108s { get; set; } = null!;
        public virtual DbSet<TblDmguarantorMaster> TblDmguarantorMasters { get; set; } = null!;
        public virtual DbSet<TblDminsuranceCertificate> TblDminsuranceCertificates { get; set; } = null!;
        public virtual DbSet<TblDmlodgedDocument> TblDmlodgedDocuments { get; set; } = null!;
        public virtual DbSet<TblDmmortgageDeedMaster> TblDmmortgageDeedMasters { get; set; } = null!;
        public virtual DbSet<TblDmnotRequiredDocument> TblDmnotRequiredDocuments { get; set; } = null!;
        public virtual DbSet<TblDmreleasedDocument> TblDmreleasedDocuments { get; set; } = null!;
        public virtual DbSet<TblDmsWfdraftTracker> TblDmsWfdraftTrackers { get; set; } = null!;
        public virtual DbSet<TblDmsconstitutionId> TblDmsconstitutionIds { get; set; } = null!;
        public virtual DbSet<TblDmsdocumentId> TblDmsdocumentIds { get; set; } = null!;
        public virtual DbSet<TblDmslopsid> TblDmslopsids { get; set; } = null!;
        public virtual DbSet<TblDmslsmid> TblDmslsmids { get; set; } = null!;
        public virtual DbSet<TblDmspacketid> TblDmspacketids { get; set; } = null!;
        public virtual DbSet<TblDmsslid> TblDmsslids { get; set; } = null!;
        public virtual DbSet<TblDmsslreferenceId> TblDmsslreferenceIds { get; set; } = null!;
        public virtual DbSet<TblDmsslreferenceNumber> TblDmsslreferenceNumbers { get; set; } = null!;
        public virtual DbSet<TblDmtitleDeed> TblDmtitleDeeds { get; set; } = null!;
        public virtual DbSet<TblDmwaviedDocument> TblDmwaviedDocuments { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusComplianceCheckListTracker> TblDmwfactionStatusComplianceCheckListTrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusComplianceCheckListTrackerHistory> TblDmwfactionStatusComplianceCheckListTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusDoclodgementTracker> TblDmwfactionStatusDoclodgementTrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusDoclodgementTrackerHistory> TblDmwfactionStatusDoclodgementTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusDocrequestTracker> TblDmwfactionStatusDocrequestTrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusDocrequestTrackerHistory> TblDmwfactionStatusDocrequestTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusFacilityPostApprovalTracker> TblDmwfactionStatusFacilityPostApprovalTrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusFacilityPostApprovalTrackerHistory> TblDmwfactionStatusFacilityPostApprovalTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusLopstracker> TblDmwfactionStatusLopstrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusLopstrackerHistory> TblDmwfactionStatusLopstrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusLsmtracker> TblDmwfactionStatusLsmtrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusLsmtrackerHistory> TblDmwfactionStatusLsmtrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusPackettracker> TblDmwfactionStatusPackettrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusPackettrackerHistory> TblDmwfactionStatusPackettrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusSltracker> TblDmwfactionStatusSltrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusSltrackerHistory> TblDmwfactionStatusSltrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusTracker> TblDmwfactionStatusTrackers { get; set; } = null!;
        public virtual DbSet<TblDmwfactionStatusTrackerHistory> TblDmwfactionStatusTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDoAmatrix> TblDoAmatrices { get; set; } = null!;
        public virtual DbSet<TblDoAmatrixDeviation> TblDoAmatricesDeviation { get; set; } = null!;
        public virtual DbSet<TblDoAmatrixSortOrder> TblDoAmatricesSortOrder { get; set; } = null!;
        public virtual DbSet<TblDoaRuleHistory> TblDoaRuleHistories { get; set; } = null!;
        public virtual DbSet<TblDoarule> TblDoarules { get; set; } = null!;
        public virtual DbSet<TblDocsLopsOtcpddstatusRpt> TblDocsLopsOtcpddstatusRpts { get; set; } = null!;
        public virtual DbSet<TblDocumentationReportHistoryRpt> TblDocumentationReportHistoryRpts { get; set; } = null!;
        public virtual DbSet<TblDocumentationReportRpt> TblDocumentationReportRpts { get; set; } = null!;
        public virtual DbSet<TblDpwfactionStatusFoltracker> TblDpwfactionStatusFoltrackers { get; set; } = null!;
        public virtual DbSet<TblDpwfactionStatusFoltrackerHistory> TblDpwfactionStatusFoltrackerHistories { get; set; } = null!;
        public virtual DbSet<TblDwfactionStatusCommunicatedFacilityTracker> TblDwfactionStatusCommunicatedFacilityTrackers { get; set; } = null!;
        public virtual DbSet<TblDwfactionStatusCommunicatedFacilityTrackerHistory> TblDwfactionStatusCommunicatedFacilityTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblEmailDrincremental> TblEmailDrincrementals { get; set; } = null!;
        public virtual DbSet<TblEmailRestrictedDomain> TblEmailRestrictedDomains { get; set; } = null!;
        public virtual DbSet<TblEmailingLogger> TblEmailingLoggers { get; set; } = null!;
        public virtual DbSet<TblEnvironmentConfiguration> TblEnvironmentConfigurations { get; set; } = null!;
        public virtual DbSet<TblEodautoWithdrawnTaskList> TblEodautoWithdrawnTaskLists { get; set; } = null!;
        public virtual DbSet<TblEodautoWithdrawnTaskListHistory> TblEodautoWithdrawnTaskListHistories { get; set; } = null!;
        public virtual DbSet<TblEodtaskListInUserQueue> TblEodtaskListInUserQueues { get; set; } = null!;
        public virtual DbSet<TblEodtaskListInUserQueueHistory> TblEodtaskListInUserQueueHistories { get; set; } = null!;
        public virtual DbSet<TblEodtaskListManual> TblEodtaskListManuals { get; set; } = null!;
        public virtual DbSet<TblEscalationDetail> TblEscalationDetails { get; set; } = null!;
        public virtual DbSet<TblEscalationRoleUserMapping> TblEscalationRoleUserMappings { get; set; } = null!;
        public virtual DbSet<TblEventsConfiguration> TblEventsConfigurations { get; set; } = null!;
        public virtual DbSet<TblExchange> TblExchanges { get; set; } = null!;
        public virtual DbSet<TblExpertsNote> TblExpertsNotes { get; set; } = null!;
        public virtual DbSet<TblExpertsNotesHistory> TblExpertsNotesHistories { get; set; } = null!;
        public virtual DbSet<TblExposuresBatchDetail> TblExposuresBatchDetails { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystem> TblExposuresuploadSourceSystems { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemBb> TblExposuresuploadSourceSystemBbs { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemBond> TblExposuresuploadSourceSystemBonds { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemBondBkp> TblExposuresuploadSourceSystemBondBkps { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemCfd> TblExposuresuploadSourceSystemCfds { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemEquity> TblExposuresuploadSourceSystemEquities { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemFxd> TblExposuresuploadSourceSystemFxds { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemFxdBkp> TblExposuresuploadSourceSystemFxdBkps { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemHistory> TblExposuresuploadSourceSystemHistories { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemHistoryBb> TblExposuresuploadSourceSystemHistoryBbs { get; set; } = null!;
        public virtual DbSet<TblExposuresuploadSourceSystemRepo> TblExposuresuploadSourceSystemRepos { get; set; } = null!;
        public virtual DbSet<TblExtBorrowerInfo> TblExtBorrowerInfos { get; set; } = null!;
        public virtual DbSet<TblExtBorrowerInfoHistory> TblExtBorrowerInfoHistories { get; set; } = null!;
        public virtual DbSet<TblExternalCustomerUpload> TblExternalCustomerUploads { get; set; } = null!;
        public virtual DbSet<TblExternalCustomerUploadHistory> TblExternalCustomerUploadHistories { get; set; } = null!;
        public virtual DbSet<TblExternalFileUploadTracker> TblExternalFileUploadTrackers { get; set; } = null!;
        public virtual DbSet<TblExternalFileUploadTrackerAutoUploadLog> TblExternalFileUploadTrackerAutoUploadLogs { get; set; } = null!;
        public virtual DbSet<TblExternalFileUploadTrackerHistory> TblExternalFileUploadTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblExternalMasterMapping> TblExternalMasterMappings { get; set; } = null!;
        public virtual DbSet<TblExternalUser> TblExternalUsers { get; set; } = null!;
        public virtual DbSet<TblFacaggregateType1> TblFacaggregateType1s { get; set; } = null!;
        public virtual DbSet<TblFacilityAccountMapping> TblFacilityAccountMappings { get; set; } = null!;
        public virtual DbSet<TblFacilityDailyUploadDatum> TblFacilityDailyUploadData { get; set; } = null!;
        public virtual DbSet<TblFacilitySubtypePpsmapper> TblFacilitySubtypePpsmappers { get; set; } = null!;
        public virtual DbSet<TblFacilitySubtypePpsmapperBkp0501> TblFacilitySubtypePpsmapperBkp0501s { get; set; } = null!;
        public virtual DbSet<TblFacilitySubtypePpsmapperBkp20501> TblFacilitySubtypePpsmapperBkp20501s { get; set; } = null!;
        public virtual DbSet<TblFalmapper> TblFalmappers { get; set; } = null!;
        public virtual DbSet<TblFavCounterparty> TblFavCounterparties { get; set; } = null!;
        public virtual DbSet<TblFieldsConfiguration> TblFieldsConfigurations { get; set; } = null!;
        public virtual DbSet<TblFileMovement> TblFileMovements { get; set; } = null!;
        public virtual DbSet<TblFileMovementHistory> TblFileMovementHistories { get; set; } = null!;
        public virtual DbSet<TblFileUploadServiceConfig> TblFileUploadServiceConfigs { get; set; } = null!;
        public virtual DbSet<TblFinCompMaster> TblFinCompMasters { get; set; } = null!;
        public virtual DbSet<TblFinCovenantTextMaster> TblFinCovenantTextMasters { get; set; } = null!;
        public virtual DbSet<TblFinFinalFormula> TblFinFinalFormulas { get; set; } = null!;
        public virtual DbSet<TblFinFinalFormulaSen> TblFinFinalFormulaSens { get; set; } = null!;
        public virtual DbSet<TblFinFormula> TblFinFormulas { get; set; } = null!;
        public virtual DbSet<TblFinHistory> TblFinHistories { get; set; } = null!;
        public virtual DbSet<TblFinHistorySen> TblFinHistorySens { get; set; } = null!;
        public virtual DbSet<TblFinancialModelTempMap> TblFinancialModelTempMaps { get; set; } = null!;
        public virtual DbSet<TblFinancialSensitivity> TblFinancialSensitivities { get; set; } = null!;
        public virtual DbSet<TblFinancialsAdj> TblFinancialsAdjs { get; set; } = null!;
        public virtual DbSet<TblFinancialsAdjSen> TblFinancialsAdjSens { get; set; } = null!;
        public virtual DbSet<TblFinancialsUploadExcel> TblFinancialsUploadExcels { get; set; } = null!;
        public virtual DbSet<TblFinancialsUploadSourceSystem> TblFinancialsUploadSourceSystems { get; set; } = null!;
        public virtual DbSet<TblFraudulent> TblFraudulents { get; set; } = null!;
        public virtual DbSet<TblFxRateIntegration> TblFxRateIntegrations { get; set; } = null!;
        public virtual DbSet<TblFxRateIntegrationHistory> TblFxRateIntegrationHistories { get; set; } = null!;
        public virtual DbSet<TblGeoTaggingDetail> TblGeoTaggingDetails { get; set; } = null!;
        public virtual DbSet<TblGeoTaggingId> TblGeoTaggingIds { get; set; } = null!;
        public virtual DbSet<TblGlobalCreditCheckByEntity> TblGlobalCreditCheckByEntities { get; set; } = null!;
        public virtual DbSet<TblGlobalCreditCheckByEntityWithoutIdentifier> TblGlobalCreditCheckByEntityWithoutIdentifiers { get; set; } = null!;
        public virtual DbSet<TblGlobalEntityCustomerRelationshipMaster> TblGlobalEntityCustomerRelationshipMasters { get; set; } = null!;
        public virtual DbSet<TblGlobalEntityDetailsMaster> TblGlobalEntityDetailsMasters { get; set; } = null!;
        public virtual DbSet<TblGlobalEntityDetailsMasterWithoutIdentifier> TblGlobalEntityDetailsMasterWithoutIdentifiers { get; set; } = null!;
        public virtual DbSet<TblGlobalIdentifiersDetailsMaster> TblGlobalIdentifiersDetailsMasters { get; set; } = null!;
        public virtual DbSet<TblGlobalMcaorder> TblGlobalMcaorders { get; set; } = null!;
        public virtual DbSet<TblGstanalysisDetail> TblGstanalysisDetails { get; set; } = null!;
        public virtual DbSet<TblGststatusDetail> TblGststatusDetails { get; set; } = null!;
        public virtual DbSet<TblGststatusDetailsHistory> TblGststatusDetailsHistories { get; set; } = null!;
        public virtual DbSet<TblHandlerUnitValue> TblHandlerUnitValues { get; set; } = null!;
        public virtual DbSet<TblHelp> TblHelps { get; set; } = null!;
        public virtual DbSet<TblIbareported> TblIbareporteds { get; set; } = null!;
        public virtual DbSet<TblIexternalSystemXmlUpload> TblIexternalSystemXmlUploads { get; set; } = null!;
        public virtual DbSet<TblIinterfaceXmlMapping> TblIinterfaceXmlMappings { get; set; } = null!;
        public virtual DbSet<TblIndustry> TblIndustries { get; set; } = null!;
        public virtual DbSet<TblIndustryBkp> TblIndustryBkps { get; set; } = null!;
        public virtual DbSet<TblIndustryExposure> TblIndustryExposures { get; set; } = null!;
        public virtual DbSet<TblIndustryExposureUpoad> TblIndustryExposureUpoads { get; set; } = null!;
        public virtual DbSet<TblIndustryHeirarchy> TblIndustryHeirarchies { get; set; } = null!;
        public virtual DbSet<TblInterfaceDetail> TblInterfaceDetails { get; set; } = null!;
        public virtual DbSet<TblInterfacetablesCol> TblInterfacetablesCols { get; set; } = null!;
        public virtual DbSet<TblInterfacetablesDetail> TblInterfacetablesDetails { get; set; } = null!;
        public virtual DbSet<TblLeftMenu> TblLeftMenus { get; set; } = null!;
        public virtual DbSet<TblLegaItemsId> TblLegaItemsIds { get; set; } = null!;
        public virtual DbSet<TblLegalType> TblLegalTypes { get; set; } = null!;
        public virtual DbSet<TblListingInfo> TblListingInfos { get; set; } = null!;
        public virtual DbSet<TblLocationMaster> TblLocationMasters { get; set; } = null!;
        public virtual DbSet<TblLog> TblLogs { get; set; } = null!;
        public virtual DbSet<TblLsmcheckListId> TblLsmcheckListIds { get; set; } = null!;
        public virtual DbSet<TblLsmwfactionStatusComplianceCheckListTracker> TblLsmwfactionStatusComplianceCheckListTrackers { get; set; } = null!;
        public virtual DbSet<TblLsmwfactionStatusComplianceCheckListTrackerHistory> TblLsmwfactionStatusComplianceCheckListTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblLtvmasterConfiguration> TblLtvmasterConfigurations { get; set; } = null!;
        public virtual DbSet<TblLtvmasterConfiguration081220> TblLtvmasterConfiguration081220s { get; set; } = null!;
        public virtual DbSet<TblMailDatum> TblMailData { get; set; } = null!;
        public virtual DbSet<TblMcaorderSectionStatus> TblMcaorderSectionStatuses { get; set; } = null!;
        public virtual DbSet<TblMessage> TblMessages { get; set; } = null!;
        public virtual DbSet<TblMigCounterparty> TblMigCounterparties { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyAddress> TblMigCounterpartyAddresses { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyAssociate> TblMigCounterpartyAssociates { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyBkp> TblMigCounterpartyBkps { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyDirector> TblMigCounterpartyDirectors { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyIdentifier> TblMigCounterpartyIdentifiers { get; set; } = null!;
        public virtual DbSet<TblMigCounterpartyUniqueId> TblMigCounterpartyUniqueIds { get; set; } = null!;
        public virtual DbSet<TblMisappDeltum> TblMisappDelta { get; set; } = null!;
        public virtual DbSet<TblMisapplicationSummaryTracker> TblMisapplicationSummaryTrackers { get; set; } = null!;
        public virtual DbSet<TblMisapplicationSummaryTrackerHistory> TblMisapplicationSummaryTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblMisapplicationTracker> TblMisapplicationTrackers { get; set; } = null!;
        public virtual DbSet<TblMisapplicationTrackerHistory> TblMisapplicationTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblMiscounterparty> TblMiscounterparties { get; set; } = null!;
        public virtual DbSet<TblMiscounterpartyHistory> TblMiscounterpartyHistories { get; set; } = null!;
        public virtual DbSet<TblMisdeviationTracker> TblMisdeviationTrackers { get; set; } = null!;
        public virtual DbSet<TblMisdeviationTrackerHistory> TblMisdeviationTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblMisfacilityTracker> TblMisfacilityTrackers { get; set; } = null!;
        public virtual DbSet<TblMisfacilityTrackerHistory> TblMisfacilityTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblMisfinancialTracker> TblMisfinancialTrackers { get; set; } = null!;
        public virtual DbSet<TblMisfinancialTrackerHistory> TblMisfinancialTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblMisreportForCcbg> TblMisreportForCcbgs { get; set; } = null!;
        public virtual DbSet<TblModelType> TblModelTypes { get; set; } = null!;
        public virtual DbSet<TblModifyLeadRmhistory> TblModifyLeadRmhistories { get; set; } = null!;
        public virtual DbSet<TblModule> TblModules { get; set; } = null!;
        public virtual DbSet<TblMonitoringStatus> TblMonitoringStatuses { get; set; } = null!;
        public virtual DbSet<TblNclatcauseList> TblNclatcauseLists { get; set; } = null!;
        public virtual DbSet<TblNclatfinalOrder> TblNclatfinalOrders { get; set; } = null!;
        public virtual DbSet<TblNcltcauseList> TblNcltcauseLists { get; set; } = null!;
        public virtual DbSet<TblNcltfinalOrder> TblNcltfinalOrders { get; set; } = null!;
        public virtual DbSet<TblNegativeList> TblNegativeLists { get; set; } = null!;
        public virtual DbSet<TblNhb> TblNhbs { get; set; } = null!;
        public virtual DbSet<TblNotification> TblNotifications { get; set; } = null!;
        public virtual DbSet<TblNpasearch> TblNpasearches { get; set; } = null!;
        public virtual DbSet<TblNwfrole> TblNwfroles { get; set; } = null!;
        public virtual DbSet<TblNwfuserRole> TblNwfuserRoles { get; set; } = null!;
        public virtual DbSet<TblOanalysis> TblOanalyses { get; set; } = null!;
        public virtual DbSet<TblOapplicationDefaultFacility> TblOapplicationDefaultFacilities { get; set; } = null!;
        public virtual DbSet<TblOapplicationFacilitiesRpt> TblOapplicationFacilitiesRpts { get; set; } = null!;
        public virtual DbSet<TblOapplicationFacility> TblOapplicationFacilities { get; set; } = null!;
        public virtual DbSet<TblOapplicationFinancial> TblOapplicationFinancials { get; set; } = null!;
        public virtual DbSet<TblOapplicationFinancialCondition> TblOapplicationFinancialConditions { get; set; } = null!;
        public virtual DbSet<TblOapplicationFinancialCovenant> TblOapplicationFinancialCovenants { get; set; } = null!;
        public virtual DbSet<TblOapplicationGcollateral> TblOapplicationGcollaterals { get; set; } = null!;
        public virtual DbSet<TblOapplicationLimitsMonitorMaster> TblOapplicationLimitsMonitorMasters { get; set; } = null!;
        public virtual DbSet<TblOapplicationMaster> TblOapplicationMasters { get; set; } = null!;
        public virtual DbSet<TblOapplicationMasterRpt> TblOapplicationMasterRpts { get; set; } = null!;
        public virtual DbSet<TblOapplicationPeerFinancial> TblOapplicationPeerFinancials { get; set; } = null!;
        public virtual DbSet<TblOapplicationPricingAndProfitability> TblOapplicationPricingAndProfitabilities { get; set; } = null!;
        public virtual DbSet<TblOapplicationType> TblOapplicationTypes { get; set; } = null!;
        public virtual DbSet<TblOassetsMaster> TblOassetsMasters { get; set; } = null!;
        public virtual DbSet<TblObjUniqueIdconfig> TblObjUniqueIdconfigs { get; set; } = null!;
        public virtual DbSet<TblObjectChangeDetailsTracker> TblObjectChangeDetailsTrackers { get; set; } = null!;
        public virtual DbSet<TblOcalenderMaster> TblOcalenderMasters { get; set; } = null!;
        public virtual DbSet<TblOcolUserCounterParty> TblOcolUserCounterParties { get; set; } = null!;
        public virtual DbSet<TblOcollateralFinancialSecurity> TblOcollateralFinancialSecurities { get; set; } = null!;
        public virtual DbSet<TblOcollateralGuarantee> TblOcollateralGuarantees { get; set; } = null!;
        public virtual DbSet<TblOcollateralLien> TblOcollateralLiens { get; set; } = null!;
        public virtual DbSet<TblOcollateralMortgage> TblOcollateralMortgages { get; set; } = null!;
        public virtual DbSet<TblOcollateralSubType> TblOcollateralSubTypes { get; set; } = null!;
        public virtual DbSet<TblOcollateralType> TblOcollateralTypes { get; set; } = null!;
        public virtual DbSet<TblOcollateralTypsubtypmapper> TblOcollateralTypsubtypmappers { get; set; } = null!;
        public virtual DbSet<TblOdeclinedApplication> TblOdeclinedApplications { get; set; } = null!;
        public virtual DbSet<TblOfacUserCounterparty> TblOfacUserCounterparties { get; set; } = null!;
        public virtual DbSet<TblOfacilityClass> TblOfacilityClasses { get; set; } = null!;
        public virtual DbSet<TblOfacilityClassification> TblOfacilityClassifications { get; set; } = null!;
        public virtual DbSet<TblOfacilityClsftypmapper> TblOfacilityClsftypmappers { get; set; } = null!;
        public virtual DbSet<TblOfacilityClsftypmapperHistory> TblOfacilityClsftypmapperHistories { get; set; } = null!;
        public virtual DbSet<TblOfacilityGlobal> TblOfacilityGlobals { get; set; } = null!;
        public virtual DbSet<TblOfacilityPanel> TblOfacilityPanels { get; set; } = null!;
        public virtual DbSet<TblOfacilityProduct> TblOfacilityProducts { get; set; } = null!;
        public virtual DbSet<TblOfacilityProductComType> TblOfacilityProductComTypes { get; set; } = null!;
        public virtual DbSet<TblOfacilityProductHistory> TblOfacilityProductHistories { get; set; } = null!;
        public virtual DbSet<TblOfacilitySubType> TblOfacilitySubTypes { get; set; } = null!;
        public virtual DbSet<TblOfacilitySubTypeHistory> TblOfacilitySubTypeHistories { get; set; } = null!;
        public virtual DbSet<TblOfacilitySubTypeMapper> TblOfacilitySubTypeMappers { get; set; } = null!;
        public virtual DbSet<TblOfacilityType> TblOfacilityTypes { get; set; } = null!;
        public virtual DbSet<TblOfacilityType1602023> TblOfacilityType1602023s { get; set; } = null!;
        public virtual DbSet<TblOfacilityTypeHistory> TblOfacilityTypeHistories { get; set; } = null!;
        public virtual DbSet<TblOperationDiary> TblOperationDiaries { get; set; } = null!;
        public virtual DbSet<TblOpricingMaster> TblOpricingMasters { get; set; } = null!;
        public virtual DbSet<TblOproductAssetMapping> TblOproductAssetMappings { get; set; } = null!;
        public virtual DbSet<TblOproject> TblOprojects { get; set; } = null!;
        public virtual DbSet<TblOprojectMaster> TblOprojectMasters { get; set; } = null!;
        public virtual DbSet<TblOrating> TblOratings { get; set; } = null!;
        public virtual DbSet<TblOrgHierarchy> TblOrgHierarchies { get; set; } = null!;
        public virtual DbSet<TblOrgHierarchyHistory> TblOrgHierarchyHistories { get; set; } = null!;
        public virtual DbSet<TblOrgHierarchyUploadExcel> TblOrgHierarchyUploadExcels { get; set; } = null!;
        public virtual DbSet<TblOriskTransferCountry> TblOriskTransferCountries { get; set; } = null!;
        public virtual DbSet<TblOsAppFacColWfdraftTracker> TblOsAppFacColWfdraftTrackers { get; set; } = null!;
        public virtual DbSet<TblOsAppFacColWfdraftTrackerRpt> TblOsAppFacColWfdraftTrackerRpts { get; set; } = null!;
        public virtual DbSet<TblOsanalysisId> TblOsanalysisIds { get; set; } = null!;
        public virtual DbSet<TblOsapplicationClientRevenue> TblOsapplicationClientRevenues { get; set; } = null!;
        public virtual DbSet<TblOsapplicationComplianceChecklist> TblOsapplicationComplianceChecklists { get; set; } = null!;
        public virtual DbSet<TblOsapplicationId> TblOsapplicationIds { get; set; } = null!;
        public virtual DbSet<TblOsassesmentId> TblOsassesmentIds { get; set; } = null!;
        public virtual DbSet<TblOsbsaid> TblOsbsaids { get; set; } = null!;
        public virtual DbSet<TblOsbusinessLoanCa> TblOsbusinessLoanCas { get; set; } = null!;
        public virtual DbSet<TblOscheckListId> TblOscheckListIds { get; set; } = null!;
        public virtual DbSet<TblOscollateralId> TblOscollateralIds { get; set; } = null!;
        public virtual DbSet<TblOscommentId> TblOscommentIds { get; set; } = null!;
        public virtual DbSet<TblOscommittee> TblOscommittees { get; set; } = null!;
        public virtual DbSet<TblOscommitteeMember> TblOscommitteeMembers { get; set; } = null!;
        public virtual DbSet<TblOscommonTrackerId> TblOscommonTrackerIds { get; set; } = null!;
        public virtual DbSet<TblOscommunicatedFaclility> TblOscommunicatedFaclilities { get; set; } = null!;
        public virtual DbSet<TblOscomplianceChecklist> TblOscomplianceChecklists { get; set; } = null!;
        public virtual DbSet<TblOsconditionId> TblOsconditionIds { get; set; } = null!;
        public virtual DbSet<TblOscounterpartyId> TblOscounterpartyIds { get; set; } = null!;
        public virtual DbSet<TblOscovenantId> TblOscovenantIds { get; set; } = null!;
        public virtual DbSet<TblOsdeclineApplicationId> TblOsdeclineApplicationIds { get; set; } = null!;
        public virtual DbSet<TblOsdocumentId> TblOsdocumentIds { get; set; } = null!;
        public virtual DbSet<TblOsdrawingPowerId> TblOsdrawingPowerIds { get; set; } = null!;
        public virtual DbSet<TblOsdrawingPowerSetupId> TblOsdrawingPowerSetupIds { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningAccountPosition> TblOsearlyWarningAccountPositions { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningAccountStrategy> TblOsearlyWarningAccountStrategies { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningId> TblOsearlyWarningIds { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningQuestionaire> TblOsearlyWarningQuestionaires { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningTracker> TblOsearlyWarningTrackers { get; set; } = null!;
        public virtual DbSet<TblOsearlyWarningTrackerHistory> TblOsearlyWarningTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOsecurity> TblOsecurities { get; set; } = null!;
        public virtual DbSet<TblOsfacilityId> TblOsfacilityIds { get; set; } = null!;
        public virtual DbSet<TblOsfacilitySummaryRpt> TblOsfacilitySummaryRpts { get; set; } = null!;
        public virtual DbSet<TblOsfacilitySummaryRpt1> TblOsfacilitySummaryRpt1s { get; set; } = null!;
        public virtual DbSet<TblOsfinancialId> TblOsfinancialIds { get; set; } = null!;
        public virtual DbSet<TblOsiomfacilitySummaryTable> TblOsiomfacilitySummaryTables { get; set; } = null!;
        public virtual DbSet<TblOsiomid> TblOsiomids { get; set; } = null!;
        public virtual DbSet<TblOsiomtabId> TblOsiomtabIds { get; set; } = null!;
        public virtual DbSet<TblOsiomtabTracker> TblOsiomtabTrackers { get; set; } = null!;
        public virtual DbSet<TblOsiomtabTrackerHistory> TblOsiomtabTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOslimitReferenceCodeId> TblOslimitReferenceCodeIds { get; set; } = null!;
        public virtual DbSet<TblOspecialSectorCategory> TblOspecialSectorCategories { get; set; } = null!;
        public virtual DbSet<TblOspeerFinancialId> TblOspeerFinancialIds { get; set; } = null!;
        public virtual DbSet<TblOspricingAndProfitabilityId> TblOspricingAndProfitabilityIds { get; set; } = null!;
        public virtual DbSet<TblOspricingId> TblOspricingIds { get; set; } = null!;
        public virtual DbSet<TblOsprojectId> TblOsprojectIds { get; set; } = null!;
        public virtual DbSet<TblOspurposeOfCa> TblOspurposeOfCas { get; set; } = null!;
        public virtual DbSet<TblOspurposeOfCaworkflow> TblOspurposeOfCaworkflows { get; set; } = null!;
        public virtual DbSet<TblOsraclessThan> TblOsraclessThans { get; set; } = null!;
        public virtual DbSet<TblOsrarocCalculatorId> TblOsrarocCalculatorIds { get; set; } = null!;
        public virtual DbSet<TblOsreservationId> TblOsreservationIds { get; set; } = null!;
        public virtual DbSet<TblOsroleCommittee> TblOsroleCommittees { get; set; } = null!;
        public virtual DbSet<TblOsroleCommitteeMember> TblOsroleCommitteeMembers { get; set; } = null!;
        public virtual DbSet<TblOssanctionLetterId> TblOssanctionLetterIds { get; set; } = null!;
        public virtual DbSet<TblOssecurityId> TblOssecurityIds { get; set; } = null!;
        public virtual DbSet<TblOstempLeadId> TblOstempLeadIds { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusAnalysisTracker> TblOswfactionStatusAnalysisTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusAnalysisTrackerHistory> TblOswfactionStatusAnalysisTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTracker> TblOswfactionStatusApplicationTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerExtended> TblOswfactionStatusApplicationTrackerExtendeds { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerExtendedHistory> TblOswfactionStatusApplicationTrackerExtendedHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerHistory> TblOswfactionStatusApplicationTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerHistoryDeltaMi> TblOswfactionStatusApplicationTrackerHistoryDeltaMis { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerHistoryRpt> TblOswfactionStatusApplicationTrackerHistoryRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerOutOfOffice> TblOswfactionStatusApplicationTrackerOutOfOffices { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusApplicationTrackerRpt> TblOswfactionStatusApplicationTrackerRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusAssesmentTracker> TblOswfactionStatusAssesmentTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusAssesmentTrackerHistory> TblOswfactionStatusAssesmentTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusBsatracker> TblOswfactionStatusBsatrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusBsatrackerHistory> TblOswfactionStatusBsatrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCollateralTracker> TblOswfactionStatusCollateralTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCollateralTrackerHistory> TblOswfactionStatusCollateralTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCollateralTrackerHistoryRpt> TblOswfactionStatusCollateralTrackerHistoryRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCollateralTrackerRpt> TblOswfactionStatusCollateralTrackerRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCommentsTracker> TblOswfactionStatusCommentsTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCommentsTrackerHistory> TblOswfactionStatusCommentsTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCommitteeTracker> TblOswfactionStatusCommitteeTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCommonTracker> TblOswfactionStatusCommonTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCommonTrackerHistory> TblOswfactionStatusCommonTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusComplianceCheckListTracker> TblOswfactionStatusComplianceCheckListTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusComplianceCheckListTrackerHistory> TblOswfactionStatusComplianceCheckListTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCompositeGroupTracker> TblOswfactionStatusCompositeGroupTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusCompositeGroupTrackerHistory> TblOswfactionStatusCompositeGroupTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusConditionTracker> TblOswfactionStatusConditionTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusConditionTrackerHistory> TblOswfactionStatusConditionTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusDeviationsTracker> TblOswfactionStatusDeviationsTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusDeviationsTrackerHistory> TblOswfactionStatusDeviationsTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusDocumentConstitutionalTracker> TblOswfactionStatusDocumentConstitutionalTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusDocumentConstitutionalTrackerHistory> TblOswfactionStatusDocumentConstitutionalTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFacilityTracker> TblOswfactionStatusFacilityTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFacilityTrackerHistory> TblOswfactionStatusFacilityTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFacilityTrackerHistoryDeltaMi> TblOswfactionStatusFacilityTrackerHistoryDeltaMis { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFacilityTrackerHistoryRpt> TblOswfactionStatusFacilityTrackerHistoryRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFacilityTrackerRpt> TblOswfactionStatusFacilityTrackerRpts { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFinancialCovenantTracker> TblOswfactionStatusFinancialCovenantTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFinancialCovenantTrackerHistory> TblOswfactionStatusFinancialCovenantTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFinancialTracker> TblOswfactionStatusFinancialTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusFinancialTrackerHistory> TblOswfactionStatusFinancialTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusInitiateDocumentTracker> TblOswfactionStatusInitiateDocumentTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusInitiateDocumentTrackerHistory> TblOswfactionStatusInitiateDocumentTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPeerFinancialTracker> TblOswfactionStatusPeerFinancialTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPeerFinancialTrackerHistory> TblOswfactionStatusPeerFinancialTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPortfolioAppTracker> TblOswfactionStatusPortfolioAppTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPortfolioAppTrackerHistory> TblOswfactionStatusPortfolioAppTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPricingAndProfitabilityTracker> TblOswfactionStatusPricingAndProfitabilityTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPricingAndProfitabilityTrackerHistory> TblOswfactionStatusPricingAndProfitabilityTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPricingTracker> TblOswfactionStatusPricingTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusPricingTrackerHistory> TblOswfactionStatusPricingTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusScoringTracker> TblOswfactionStatusScoringTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusScoringTrackerHistory> TblOswfactionStatusScoringTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusSecuritiesTracker> TblOswfactionStatusSecuritiesTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusSecuritiesTrackerHistory> TblOswfactionStatusSecuritiesTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusrarocCalculatorTracker> TblOswfactionStatusrarocCalculatorTrackers { get; set; } = null!;
        public virtual DbSet<TblOswfactionStatusrarocCalculatorTrackerHistory> TblOswfactionStatusrarocCalculatorTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblOtenor> TblOtenors { get; set; } = null!;
        public virtual DbSet<TblOtenorComputation> TblOtenorComputations { get; set; } = null!;
        public virtual DbSet<TblPfpicker> TblPfpickers { get; set; } = null!;
        public virtual DbSet<TblPfpicker1006> TblPfpicker1006s { get; set; } = null!;
        public virtual DbSet<TblPfpickerApproval> TblPfpickerApprovals { get; set; } = null!;
        public virtual DbSet<TblPfpickerApproval1006> TblPfpickerApproval1006s { get; set; } = null!;
        public virtual DbSet<TblPincodeMaster> TblPincodeMasters { get; set; } = null!;
        public virtual DbSet<TblPortfolio> TblPortfolios { get; set; } = null!;
        public virtual DbSet<TblPortfolioDefinition> TblPortfolioDefinitions { get; set; } = null!;
        public virtual DbSet<TblPortfolioExposure> TblPortfolioExposures { get; set; } = null!;
        public virtual DbSet<TblPortfolioLimit> TblPortfolioLimits { get; set; } = null!;
        public virtual DbSet<TblPortfolioLimitsConstant> TblPortfolioLimitsConstants { get; set; } = null!;
        public virtual DbSet<TblPortfolioLimitsConsumed> TblPortfolioLimitsConsumeds { get; set; } = null!;
        public virtual DbSet<TblPortfolioMaster> TblPortfolioMasters { get; set; } = null!;
        public virtual DbSet<TblPreference> TblPreferences { get; set; } = null!;
        public virtual DbSet<TblPricingAndProfitabilitySpecialTariff> TblPricingAndProfitabilitySpecialTariffs { get; set; } = null!;
        public virtual DbSet<TblPrivateRoom> TblPrivateRooms { get; set; } = null!;
        public virtual DbSet<TblPrivateRoomComment> TblPrivateRoomComments { get; set; } = null!;
        public virtual DbSet<TblPrivateRoomCommentsHistory> TblPrivateRoomCommentsHistories { get; set; } = null!;
        public virtual DbSet<TblPrivateRoomsHistory> TblPrivateRoomsHistories { get; set; } = null!;
        public virtual DbSet<TblProductAndPurpose> TblProductAndPurposes { get; set; } = null!;
        public virtual DbSet<TblProductAndPurpose0501bkp> TblProductAndPurpose0501bkps { get; set; } = null!;
        public virtual DbSet<TblProgramAssesmentParamMaster> TblProgramAssesmentParamMasters { get; set; } = null!;
        public virtual DbSet<TblProjectApplicationDetail> TblProjectApplicationDetails { get; set; } = null!;
        public virtual DbSet<TblProjectChange> TblProjectChanges { get; set; } = null!;
        public virtual DbSet<TblPslmaster> TblPslmasters { get; set; } = null!;
        public virtual DbSet<TblPuqueryLog> TblPuqueryLogs { get; set; } = null!;
        public virtual DbSet<TblQmaster> TblQmasters { get; set; } = null!;
        public virtual DbSet<TblQualifyingCondition> TblQualifyingConditions { get; set; } = null!;
        public virtual DbSet<TblRarocBaselCollateralType> TblRarocBaselCollateralTypes { get; set; } = null!;
        public virtual DbSet<TblRarocBaselCtptButype> TblRarocBaselCtptButypes { get; set; } = null!;
        public virtual DbSet<TblRarocBaselEntityType> TblRarocBaselEntityTypes { get; set; } = null!;
        public virtual DbSet<TblRarocBaselFacilityType> TblRarocBaselFacilityTypes { get; set; } = null!;
        public virtual DbSet<TblRarocRatingPdlgd> TblRarocRatingPdlgds { get; set; } = null!;
        public virtual DbSet<TblRating> TblRatings { get; set; } = null!;
        public virtual DbSet<TblRatingAgency> TblRatingAgencies { get; set; } = null!;
        public virtual DbSet<TblRbidefaulterChecklist> TblRbidefaulterChecklists { get; set; } = null!;
        public virtual DbSet<TblReferenceRate> TblReferenceRates { get; set; } = null!;
        public virtual DbSet<TblRegion> TblRegions { get; set; } = null!;
        public virtual DbSet<TblRegisteredAuthMaster> TblRegisteredAuthMasters { get; set; } = null!;
        public virtual DbSet<TblRelationshipDetail> TblRelationshipDetails { get; set; } = null!;
        public virtual DbSet<TblRelationshipType> TblRelationshipTypes { get; set; } = null!;
        public virtual DbSet<TblReleaseDateTime> TblReleaseDateTimes { get; set; } = null!;
        public virtual DbSet<TblRemsbankWiseExposure> TblRemsbankWiseExposures { get; set; } = null!;
        public virtual DbSet<TblRemscountryWiseExposure> TblRemscountryWiseExposures { get; set; } = null!;
        public virtual DbSet<TblReport> TblReports { get; set; } = null!;
        public virtual DbSet<TblReportAccess> TblReportAccesses { get; set; } = null!;
        public virtual DbSet<TblReportConfig> TblReportConfigs { get; set; } = null!;
        public virtual DbSet<TblReportFilter> TblReportFilters { get; set; } = null!;
        public virtual DbSet<TblReviewMechanismReport> TblReviewMechanismReports { get; set; } = null!;
        public virtual DbSet<TblReviewerEditableField> TblReviewerEditableFields { get; set; } = null!;
        public virtual DbSet<TblRiskBusinessRoleMapping> TblRiskBusinessRoleMappings { get; set; } = null!;
        public virtual DbSet<TblRiskHighlightedStatus> TblRiskHighlightedStatuses { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueue> TblRiskNoteGenerationQueues { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueueForAdhocrequest> TblRiskNoteGenerationQueueForAdhocrequests { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueueForAdhocrequestsHistory> TblRiskNoteGenerationQueueForAdhocrequestsHistories { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueueHistory> TblRiskNoteGenerationQueueHistories { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueueMixup> TblRiskNoteGenerationQueueMixups { get; set; } = null!;
        public virtual DbSet<TblRiskNoteGenerationQueueMixupHistory> TblRiskNoteGenerationQueueMixupHistories { get; set; } = null!;
        public virtual DbSet<TblRoipicker> TblRoipickers { get; set; } = null!;
        public virtual DbSet<TblRoipickerApproval> TblRoipickerApprovals { get; set; } = null!;
        public virtual DbSet<TblRole> TblRoles { get; set; } = null!;
        public virtual DbSet<TblRolePriorityOrder> TblRolePriorityOrders { get; set; } = null!;
        public virtual DbSet<TblRrramisreport> TblRrramisreports { get; set; } = null!;
        public virtual DbSet<TblRuleSetAccess> TblRuleSetAccesses { get; set; } = null!;
        public virtual DbSet<TblRuleSetAccessLog> TblRuleSetAccessLogs { get; set; } = null!;
        public virtual DbSet<TblSalesReject> TblSalesRejects { get; set; } = null!;
        public virtual DbSet<TblSanctionAuthority> TblSanctionAuthorities { get; set; } = null!;
        public virtual DbSet<TblSblgbllimit> TblSblgbllimits { get; set; } = null!;
        public virtual DbSet<TblScheduledEventsConfig> TblScheduledEventsConfigs { get; set; } = null!;
        public virtual DbSet<TblScheduledEventsConfigHistory> TblScheduledEventsConfigHistories { get; set; } = null!;
        public virtual DbSet<TblScheduledItem> TblScheduledItems { get; set; } = null!;
        public virtual DbSet<TblScheduledItemsHistory> TblScheduledItemsHistories { get; set; } = null!;
        public virtual DbSet<TblScheduledItemsId> TblScheduledItemsIds { get; set; } = null!;
        public virtual DbSet<TblScheduledItemsTracker> TblScheduledItemsTrackers { get; set; } = null!;
        public virtual DbSet<TblScheduledItemsTrackerHistory> TblScheduledItemsTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblScoringId> TblScoringIds { get; set; } = null!;
        public virtual DbSet<TblScoringModel> TblScoringModels { get; set; } = null!;
        public virtual DbSet<TblScoringModels02julbkp> TblScoringModels02julbkps { get; set; } = null!;
        public virtual DbSet<TblScriptConfigObject> TblScriptConfigObjects { get; set; } = null!;
        public virtual DbSet<TblServiceCallLog> TblServiceCallLogs { get; set; } = null!;
        public virtual DbSet<TblServiceCallLog20200324> TblServiceCallLog20200324s { get; set; } = null!;
        public virtual DbSet<TblSmslogger> TblSmsloggers { get; set; } = null!;
        public virtual DbSet<TblStandardCondition> TblStandardConditions { get; set; } = null!;
        public virtual DbSet<TblStandardConditions20200118> TblStandardConditions20200118s { get; set; } = null!;
        public virtual DbSet<TblStandardConditions3004bkp> TblStandardConditions3004bkps { get; set; } = null!;
        public virtual DbSet<TblStandardConditionsBkp2312> TblStandardConditionsBkp2312s { get; set; } = null!;
        public virtual DbSet<TblState> TblStates { get; set; } = null!;
        public virtual DbSet<TblStateManagement> TblStateManagements { get; set; } = null!;
        public virtual DbSet<TblStatement> TblStatements { get; set; } = null!;
        public virtual DbSet<TblStatementsUpload> TblStatementsUploads { get; set; } = null!;
        public virtual DbSet<TblStatementsUploadHist> TblStatementsUploadHists { get; set; } = null!;
        public virtual DbSet<TblSubTemplate> TblSubTemplates { get; set; } = null!;
        public virtual DbSet<TblTableObjectXmlschema> TblTableObjectXmlschemas { get; set; } = null!;
        public virtual DbSet<TblTableObjectXmlschemaDetail> TblTableObjectXmlschemaDetails { get; set; } = null!;
        public virtual DbSet<TblTaskTransferred> TblTaskTransferreds { get; set; } = null!;
        public virtual DbSet<TblTempLead> TblTempLeads { get; set; } = null!;
        public virtual DbSet<TblTemplate> TblTemplates { get; set; } = null!;
        public virtual DbSet<TblTemplateParameter> TblTemplateParameters { get; set; } = null!;
        public virtual DbSet<TblTemplateServiceMonitor> TblTemplateServiceMonitors { get; set; } = null!;
        public virtual DbSet<TblTenorAssetMap> TblTenorAssetMaps { get; set; } = null!;
        public virtual DbSet<TblTenorComputationAssetMap> TblTenorComputationAssetMaps { get; set; } = null!;
        public virtual DbSet<TblTenorDate> TblTenorDates { get; set; } = null!;
        public virtual DbSet<TblThirdPartyEntity> TblThirdPartyEntities { get; set; } = null!;
        public virtual DbSet<TblTmpStmtDataUpload> TblTmpStmtDataUploads { get; set; } = null!;
        public virtual DbSet<TblTmpStmtDataUploadHist> TblTmpStmtDataUploadHists { get; set; } = null!;
        public virtual DbSet<TblTmpStmtDataUploadSen> TblTmpStmtDataUploadSens { get; set; } = null!;
        public virtual DbSet<TblTmpStmtDatum> TblTmpStmtData { get; set; } = null!;
        public virtual DbSet<TblTrackingItemStatus> TblTrackingItemStatuses { get; set; } = null!;
        public virtual DbSet<TblTrackingItemSubType> TblTrackingItemSubTypes { get; set; } = null!;
        public virtual DbSet<TblTrackingItemType> TblTrackingItemTypes { get; set; } = null!;
        public virtual DbSet<TblTrackingItemTypeSubTypeMapper> TblTrackingItemTypeSubTypeMappers { get; set; } = null!;
        public virtual DbSet<TblTrackingObjectsConfiguration> TblTrackingObjectsConfigurations { get; set; } = null!;
        public virtual DbSet<TblTransactionsDetail> TblTransactionsDetails { get; set; } = null!;
        public virtual DbSet<TblTransactionsDetailsHistory> TblTransactionsDetailsHistories { get; set; } = null!;
        public virtual DbSet<TblTreasuryLimitsCtpt> TblTreasuryLimitsCtpts { get; set; } = null!;
        public virtual DbSet<TblTreasuryTimeBucket> TblTreasuryTimeBuckets { get; set; } = null!;
        public virtual DbSet<TblTreasuryTimeBucketsProductMapping> TblTreasuryTimeBucketsProductMappings { get; set; } = null!;
        public virtual DbSet<TblTreasuryTimeBucketsTenor> TblTreasuryTimeBucketsTenors { get; set; } = null!;
        public virtual DbSet<TblTreasuryTransactionsDetail> TblTreasuryTransactionsDetails { get; set; } = null!;
        public virtual DbSet<TblTreasuryTransactionsDetailsBkp> TblTreasuryTransactionsDetailsBkps { get; set; } = null!;
        public virtual DbSet<TblTreasuryTransactionsDetailsHistory> TblTreasuryTransactionsDetailsHistories { get; set; } = null!;
        public virtual DbSet<TblTreasurytblUtilizationsCustomer> TblTreasurytblUtilizationsCustomers { get; set; } = null!;
        public virtual DbSet<TblTrxnProductAssetType> TblTrxnProductAssetTypes { get; set; } = null!;
        public virtual DbSet<TblTsconditionsMaster> TblTsconditionsMasters { get; set; } = null!;
        public virtual DbSet<TblTsconditionsMaster20180910> TblTsconditionsMaster20180910s { get; set; } = null!;
        public virtual DbSet<TblUploadDay0facilitesErr> TblUploadDay0facilitesErrs { get; set; } = null!;
        public virtual DbSet<TblUser> TblUsers { get; set; } = null!;
        public virtual DbSet<TblUserApprovalLimitMatrix> TblUserApprovalLimitMatrices { get; set; } = null!;
        public virtual DbSet<TblUserAssignedPortfolio> TblUserAssignedPortfolios { get; set; } = null!;
        public virtual DbSet<TblUserCallDetail> TblUserCallDetails { get; set; } = null!;
        public virtual DbSet<TblUserEventsConfiguration> TblUserEventsConfigurations { get; set; } = null!;
        public virtual DbSet<TblUserHierarchy> TblUserHierarchies { get; set; } = null!;
        public virtual DbSet<TblUserMachinDetail> TblUserMachinDetails { get; set; } = null!;
        public virtual DbSet<TblUserMachinDetails20220315> TblUserMachinDetails20220315s { get; set; } = null!;
        public virtual DbSet<TblUserMachinDetailsHistory> TblUserMachinDetailsHistories { get; set; } = null!;
        public virtual DbSet<TblUserPermission> TblUserPermissions { get; set; } = null!;
        public virtual DbSet<TblUserPortfolio> TblUserPortfolios { get; set; } = null!;
        public virtual DbSet<TblUserRole> TblUserRoles { get; set; } = null!;
        public virtual DbSet<TblUserRoleRegion> TblUserRoleRegions { get; set; } = null!;
        public virtual DbSet<TblUserRoleRegionH> TblUserRoleRegionHs { get; set; } = null!;
        public virtual DbSet<TblUserRolesMovement> TblUserRolesMovements { get; set; } = null!;
        public virtual DbSet<TblUtilizationsCustomer> TblUtilizationsCustomers { get; set; } = null!;
        public virtual DbSet<TblValuationItemsId> TblValuationItemsIds { get; set; } = null!;
        public virtual DbSet<TblValuer> TblValuers { get; set; } = null!;
        public virtual DbSet<TblVelocityReportMaster> TblVelocityReportMasters { get; set; } = null!;
        public virtual DbSet<TblVendorMaster> TblVendorMasters { get; set; } = null!;
        public virtual DbSet<TblVendorMasterBkp2904> TblVendorMasterBkp2904s { get; set; } = null!;
        public virtual DbSet<TblVendorTypeMaster> TblVendorTypeMasters { get; set; } = null!;
        public virtual DbSet<TblVesselType> TblVesselTypes { get; set; } = null!;
        public virtual DbSet<TblViewSubTemplate> TblViewSubTemplates { get; set; } = null!;
        public virtual DbSet<TblViewTemplate> TblViewTemplates { get; set; } = null!;
        public virtual DbSet<TblViewTemplateParameter> TblViewTemplateParameters { get; set; } = null!;
        public virtual DbSet<TblViewTemplateParameter20190111> TblViewTemplateParameter20190111s { get; set; } = null!;
        public virtual DbSet<TblViewTemplateParameterBkp17feb2021> TblViewTemplateParameterBkp17feb2021s { get; set; } = null!;
        public virtual DbSet<TblViewTemplateSubTemplateMap> TblViewTemplateSubTemplateMaps { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusAdminTasksTracker> TblWfactionStatusAdminTasksTrackers { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusAdminTasksTrackerHistory> TblWfactionStatusAdminTasksTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusAutoRenewalTracker> TblWfactionStatusAutoRenewalTrackers { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusAutoRenewalTrackerHistory> TblWfactionStatusAutoRenewalTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusProjectTracker> TblWfactionStatusProjectTrackers { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusProjectTrackerHistory> TblWfactionStatusProjectTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusTracker> TblWfactionStatusTrackers { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusTrackerForOutOfOffice> TblWfactionStatusTrackerForOutOfOffices { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusTrackerHistory> TblWfactionStatusTrackerHistories { get; set; } = null!;
        public virtual DbSet<TblWfactionStatusTrackerOutOfOffice> TblWfactionStatusTrackerOutOfOffices { get; set; } = null!;
        public virtual DbSet<TblWfcActionType> TblWfcActionTypes { get; set; } = null!;
        public virtual DbSet<TblWfcWorkFlowAction> TblWfcWorkFlowActions { get; set; } = null!;
        public virtual DbSet<TblWfconfigAttribute> TblWfconfigAttributes { get; set; } = null!;
        public virtual DbSet<TblWillFulDefaulter> TblWillFulDefaulters { get; set; } = null!;
        public virtual DbSet<TblWillFull25L> TblWillFull25Ls { get; set; } = null!;
        public virtual DbSet<TblWillFullAbove1Cr> TblWillFullAbove1Crs { get; set; } = null!;
        public virtual DbSet<TblWorkFlow> TblWorkFlows { get; set; } = null!;
        public virtual DbSet<TblWorkFlowAction> TblWorkFlowActions { get; set; } = null!;
        public virtual DbSet<TblWorkFlowActionType> TblWorkFlowActionTypes { get; set; } = null!;
        public virtual DbSet<TblWorkflowRoleChecklist> TblWorkflowRoleChecklists { get; set; } = null!;
        public virtual DbSet<TblXmltablesDetail> TblXmltablesDetails { get; set; } = null!;
        public virtual DbSet<TblXmltablesFieldsMap> TblXmltablesFieldsMaps { get; set; } = null!;
        public virtual DbSet<TblXmltablesNode> TblXmltablesNodes { get; set; } = null!;
        public virtual DbSet<TblXmltablesNodesField> TblXmltablesNodesFields { get; set; } = null!;
        public virtual DbSet<Tblapplicationconfiguration20230127> Tblapplicationconfiguration20230127s { get; set; } = null!;
        public virtual DbSet<TblcropsmasterBkp> TblcropsmasterBkps { get; set; } = null!;
        public virtual DbSet<TbldeviationsModelsBkp2005> TbldeviationsModelsBkp2005s { get; set; } = null!;
        public virtual DbSet<TbldeviationsmodelsBkp1305> TbldeviationsmodelsBkp1305s { get; set; } = null!;
        public virtual DbSet<Tbldisplaysectionconfig20201005> Tbldisplaysectionconfig20201005s { get; set; } = null!;
        public virtual DbSet<Tbldoamatrix20180709> Tbldoamatrices20180709 { get; set; } = null!;
        public virtual DbSet<Tblexternalcustomer> Tblexternalcustomers { get; set; } = null!;
        public virtual DbSet<Tblexternalexposure> Tblexternalexposures { get; set; } = null!;
        public virtual DbSet<Tblexternalfacility> Tblexternalfacilities { get; set; } = null!;
        public virtual DbSet<TblindustryBkp26022020> TblindustryBkp26022020s { get; set; } = null!;
        public virtual DbSet<TbllegaltypeBkp230121> TbllegaltypeBkp230121s { get; set; } = null!;
        public virtual DbSet<TblltvmasterconfigurationBkp> TblltvmasterconfigurationBkps { get; set; } = null!;
        public virtual DbSet<TblltvmasterconfigurationBkp2> TblltvmasterconfigurationBkp2s { get; set; } = null!;
        public virtual DbSet<TblpslmasterBkp2503> TblpslmasterBkp2503s { get; set; } = null!;
        public virtual DbSet<Tblscoringmodels0305bkp> Tblscoringmodels0305bkps { get; set; } = null!;
        public virtual DbSet<TblstandardconditionsBkp> TblstandardconditionsBkps { get; set; } = null!;
        public virtual DbSet<TblvaluerBkp02042021> TblvaluerBkp02042021s { get; set; } = null!;
        public virtual DbSet<TbsLosExposureAccount> TbsLosExposureAccounts { get; set; } = null!;
        public virtual DbSet<TempStdatum> TempStdata { get; set; } = null!;
        public virtual DbSet<Tempfinancial> Tempfinancials { get; set; } = null!;
        public virtual DbSet<TestLoad> TestLoads { get; set; } = null!;
        public virtual DbSet<TmpTreasuryLimit> TmpTreasuryLimits { get; set; } = null!;
        public virtual DbSet<Tracker> Trackers { get; set; } = null!;
        public virtual DbSet<UserAppAuthMig> UserAppAuthMigs { get; set; } = null!;
        public virtual DbSet<UvwAllBranchDetail> UvwAllBranchDetails { get; set; } = null!;
        public virtual DbSet<UvwAllProbableGuarantor> UvwAllProbableGuarantors { get; set; } = null!;
        public virtual DbSet<UvwApplicationDueRenewal> UvwApplicationDueRenewals { get; set; } = null!;
        public virtual DbSet<UvwAssetProductMap> UvwAssetProductMaps { get; set; } = null!;
        public virtual DbSet<UvwCommitteeDetail> UvwCommitteeDetails { get; set; } = null!;
        public virtual DbSet<UvwCommitteeForRole> UvwCommitteeForRoles { get; set; } = null!;
        public virtual DbSet<UvwCurrencyDetail> UvwCurrencyDetails { get; set; } = null!;
        public virtual DbSet<UvwGetAllAsset> UvwGetAllAssets { get; set; } = null!;
        public virtual DbSet<UvwGetAllDisplaySectionConfig> UvwGetAllDisplaySectionConfigs { get; set; } = null!;
        public virtual DbSet<UvwGetAllTblFacilitySubtypePpsmapper> UvwGetAllTblFacilitySubtypePpsmappers { get; set; } = null!;
        public virtual DbSet<UvwGetAllTblOfacilityClsftypmapper> UvwGetAllTblOfacilityClsftypmappers { get; set; } = null!;
        public virtual DbSet<UvwGetAllUserApprovalLimitMatrix> UvwGetAllUserApprovalLimitMatrices { get; set; } = null!;
        public virtual DbSet<UvwGetAllUserReport> UvwGetAllUserReports { get; set; } = null!;
        public virtual DbSet<UvwGetAllWithFacilityTypeTblCcfmatrix> UvwGetAllWithFacilityTypeTblCcfmatrices { get; set; } = null!;
        public virtual DbSet<UvwGetAllWorkflow> UvwGetAllWorkflows { get; set; } = null!;
        public virtual DbSet<UvwGetAllWorkflowsAction> UvwGetAllWorkflowsActions { get; set; } = null!;
        public virtual DbSet<UvwGetAllrating> UvwGetAllratings { get; set; } = null!;
        public virtual DbSet<UvwLegalTypeCtptmappingDetail> UvwLegalTypeCtptmappingDetails { get; set; } = null!;
        public virtual DbSet<UvwModule> UvwModules { get; set; } = null!;
        public virtual DbSet<UvwNoOfWorkFlowsProcessedReport> UvwNoOfWorkFlowsProcessedReports { get; set; } = null!;
        public virtual DbSet<UvwReportCollateral> UvwReportCollaterals { get; set; } = null!;
        public virtual DbSet<UvwReportOfRelationalCtpt> UvwReportOfRelationalCtpts { get; set; } = null!;
        public virtual DbSet<UvwRole> UvwRoles { get; set; } = null!;
        public virtual DbSet<UvwSummaryOfAllNonAedborrowing> UvwSummaryOfAllNonAedborrowings { get; set; } = null!;
        public virtual DbSet<UvwUser> UvwUsers { get; set; } = null!;
        public virtual DbSet<UvwUserPermission> UvwUserPermissions { get; set; } = null!;
        public virtual DbSet<UvwUserRole> UvwUserRoles { get; set; } = null!;
        public virtual DbSet<UvwWorkFlow> UvwWorkFlows { get; set; } = null!;
        public virtual DbSet<VwApplicationFacilityDetail> VwApplicationFacilityDetails { get; set; } = null!;
        public virtual DbSet<VwAssetDetail> VwAssetDetails { get; set; } = null!;
        public virtual DbSet<VwCcbgMisTrackerDetail> VwCcbgMisTrackerDetails { get; set; } = null!;
        public virtual DbSet<VwCcbgMisTrackerHistoryDetail> VwCcbgMisTrackerHistoryDetails { get; set; } = null!;
        public virtual DbSet<VwCcbgTatTrackerDetail> VwCcbgTatTrackerDetails { get; set; } = null!;
        public virtual DbSet<VwCcbgTatTrackerHistoryDetail> VwCcbgTatTrackerHistoryDetails { get; set; } = null!;
        public virtual DbSet<VwCollateralTypeSubtype> VwCollateralTypeSubtypes { get; set; } = null!;
        public virtual DbSet<VwCountryHeirarchy> VwCountryHeirarchies { get; set; } = null!;
        public virtual DbSet<VwCreditEnhancer> VwCreditEnhancers { get; set; } = null!;
        public virtual DbSet<VwEligTblCounterparty> VwEligTblCounterparties { get; set; } = null!;
        public virtual DbSet<VwFacilityClassificationMi> VwFacilityClassificationMis { get; set; } = null!;
        public virtual DbSet<VwFacilitySubTypeClassification> VwFacilitySubTypeClassifications { get; set; } = null!;
        public virtual DbSet<VwIndustryHeirarchy> VwIndustryHeirarchies { get; set; } = null!;
        public virtual DbSet<VwIndustryPortfolioLimit> VwIndustryPortfolioLimits { get; set; } = null!;
        public virtual DbSet<VwLmFacCalBaseCcy> VwLmFacCalBaseCcies { get; set; } = null!;
        public virtual DbSet<VwMistrackerDetail> VwMistrackerDetails { get; set; } = null!;
        public virtual DbSet<VwMistrackerHistoryDetail> VwMistrackerHistoryDetails { get; set; } = null!;
        public virtual DbSet<VwRatingsHeirarchy> VwRatingsHeirarchies { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemBb> VwTblExposuresuploadSourceSystemBbs { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemBond> VwTblExposuresuploadSourceSystemBonds { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemEquity> VwTblExposuresuploadSourceSystemEquities { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemFxd> VwTblExposuresuploadSourceSystemFxds { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemMerged> VwTblExposuresuploadSourceSystemMergeds { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemRepo> VwTblExposuresuploadSourceSystemRepos { get; set; } = null!;
        public virtual DbSet<VwTblExposuresuploadSourceSystemUpload> VwTblExposuresuploadSourceSystemUploads { get; set; } = null!;
        public virtual DbSet<VwTblExternalCustomerUpload> VwTblExternalCustomerUploads { get; set; } = null!;
        public virtual DbSet<VwTblMigCounterpartyUpload> VwTblMigCounterpartyUploads { get; set; } = null!;
        public virtual DbSet<VwTblOrgHierarchyUploadExcel> VwTblOrgHierarchyUploadExcels { get; set; } = null!;
        public virtual DbSet<VwTreasuryTenorsRiskWise> VwTreasuryTenorsRiskWises { get; set; } = null!;
        public virtual DbSet<VwUserRoleRegion> VwUserRoleRegions { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=68.178.161.197;Initial Catalog=CredProDB_TRN1;Persist Security Info=True;User ID=TRNUSR1;Password=Trn@#23");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AggregatedCounter>(entity =>
            {
                entity.ToTable("AggregatedCounter", "HangFire");

                entity.HasIndex(e => e.Key, "UX_HangFire_CounterAggregated_Key")
                    .IsUnique();

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(100);
            });

            modelBuilder.Entity<AppsummaryCalculation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("APPSummaryCalculation");

                entity.Property(e => e.AppBaseCurrency).HasMaxLength(40);

                entity.Property(e => e.AppBaseCurrencyId).HasColumnName("AppBaseCurrencyID");

                entity.Property(e => e.BaseCr)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("BaseCR");

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.ClassificationId).HasColumnName("ClassificationID");

                entity.Property(e => e.Clsflag)
                    .HasMaxLength(10)
                    .HasColumnName("CLSFLAG");

                entity.Property(e => e.ColSubColType).HasMaxLength(100);

                entity.Property(e => e.ColSubtypeId).HasColumnName("ColSubtypeID");

                entity.Property(e => e.ColType).HasMaxLength(100);

                entity.Property(e => e.ColTypeId).HasColumnName("ColTypeID");

                entity.Property(e => e.CurrencyProposedLimit).HasMaxLength(40);

                entity.Property(e => e.CurrencyProposedLimitId).HasColumnName("CurrencyProposedLimitID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(20)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.OriginalApplicationId)
                    .HasMaxLength(20)
                    .HasColumnName("OriginalApplicationID");

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .HasColumnName("ParentFacilityID");
            });

            modelBuilder.Entity<ColTypeDatum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ColSubType).HasMaxLength(50);

                entity.Property(e => e.CollType).HasMaxLength(50);
            });

            modelBuilder.Entity<CollateralDataUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CollateralData_Upload");

                entity.Property(e => e.Cif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ColId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Col_ID");

                entity.Property(e => e.CollateralAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCodeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralRightId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CollateralRightID");

                entity.Property(e => e.CollateralSecurityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CollateralSecurityID");

                entity.Property(e => e.CollateralSubCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralSubCodeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CollateralDataWithoutComma2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CollateralDataWithoutComma_2");

                entity.Property(e => e.Cif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.ColId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Col_ID");

                entity.Property(e => e.CollateralAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCodeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CollateralID");

                entity.Property(e => e.CollateralSubCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollateralSubCodeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.ToTable("Counter", "HangFire");

                entity.HasIndex(e => e.Key, "IX_HangFire_Counter_Key");

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(100);
            });

            modelBuilder.Entity<Description>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Description");

                entity.Property(e => e.RoleName).HasMaxLength(50);
            });

            modelBuilder.Entity<Dual>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dual");

                entity.Property(e => e.Col1)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailErrorLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Email_ErrorLog");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<Employe>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("employes");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("firstName")
                    .IsFixedLength();

                entity.Property(e => e.LastName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("lastName")
                    .IsFixedLength();

                entity.Property(e => e.PersonId).HasColumnName("personId");
            });

            modelBuilder.Entity<FacilityDataUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacilityData_Upload");

                entity.Property(e => e.ApprovalDate).HasMaxLength(255);

                entity.Property(e => e.ArrangementFee).HasMaxLength(255);

                entity.Property(e => e.AvailableMarker).HasMaxLength(255);

                entity.Property(e => e.BorrowerName).HasMaxLength(255);

                entity.Property(e => e.Branch).HasMaxLength(255);

                entity.Property(e => e.Cif)
                    .HasMaxLength(255)
                    .HasColumnName("CIF");

                entity.Property(e => e.CountryPercentage).HasMaxLength(255);

                entity.Property(e => e.CountryofRisk).HasMaxLength(255);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(255)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.ExistingLimit).HasMaxLength(255);

                entity.Property(e => e.ExpiryDate).HasMaxLength(255);

                entity.Property(e => e.FacId)
                    .HasMaxLength(255)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.GroupCif)
                    .HasMaxLength(255)
                    .HasColumnName("GroupCIF");

                entity.Property(e => e.GroupCode).HasMaxLength(255);

                entity.Property(e => e.GroupMembership).HasMaxLength(255);

                entity.Property(e => e.GroupName).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IndependentOrGroup).HasMaxLength(255);

                entity.Property(e => e.InterestRateKey).HasMaxLength(255);

                entity.Property(e => e.InterestType).HasMaxLength(255);

                entity.Property(e => e.Interestratecurrency).HasMaxLength(255);

                entity.Property(e => e.IsGroupHeader).HasMaxLength(255);

                entity.Property(e => e.LimitCode).HasMaxLength(255);

                entity.Property(e => e.LimitCurrency).HasMaxLength(255);

                entity.Property(e => e.LimitReferenceCode).HasMaxLength(255);

                entity.Property(e => e.LimitType).HasMaxLength(255);

                entity.Property(e => e.MaximumTotal).HasMaxLength(255);

                entity.Property(e => e.MinimumInterestRate).HasMaxLength(255);

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.OfferedUntill).HasMaxLength(255);

                entity.Property(e => e.OnlinelimitDate).HasMaxLength(255);

                entity.Property(e => e.Outstanding).HasMaxLength(255);

                entity.Property(e => e.ParentCode).HasMaxLength(255);

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(255)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ParentLimitReferenceCode).HasMaxLength(255);

                entity.Property(e => e.ProposalDate).HasMaxLength(255);

                entity.Property(e => e.ReducingLimit).HasMaxLength(255);

                entity.Property(e => e.ReviewFrequency).HasMaxLength(255);

                entity.Property(e => e.Seq).HasMaxLength(255);

                entity.Property(e => e.Spread).HasMaxLength(255);

                entity.Property(e => e.Tenor).HasMaxLength(255);

                entity.Property(e => e.ToInclude).HasMaxLength(255);
            });

            modelBuilder.Entity<FacilityDataUploadUpdated5>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacilityData_Upload_updated_5");

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ChildCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.ExistingLimit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FacilitySpread)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GroupCIF");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IntRateKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LimitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LimitDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LimitReferenceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LimitType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumInterestRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Outstanding)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProjectID");

                entity.Property(e => e.ProjectSeqNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReducingLimit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubParentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tenor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fxrate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FXRates");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCY")
                    .IsFixedLength();

                entity.Property(e => e.Rate)
                    .HasColumnType("numeric(10, 5)")
                    .HasColumnName("RATE");
            });

            modelBuilder.Entity<Hash>(entity =>
            {
                entity.ToTable("Hash", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Hash_ExpireAt");

                entity.HasIndex(e => e.Key, "IX_HangFire_Hash_Key");

                entity.HasIndex(e => new { e.Key, e.Field }, "UX_HangFire_Hash_Key_Field")
                    .IsUnique();

                entity.Property(e => e.Field).HasMaxLength(100);

                entity.Property(e => e.Key).HasMaxLength(100);
            });

            modelBuilder.Entity<IvwIndGearing>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("IVW_IND_GEARING");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Indname)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("INDNAME");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("Job", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Job_ExpireAt");

                entity.HasIndex(e => e.StateName, "IX_HangFire_Job_StateName");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.StateName).HasMaxLength(20);
            });

            modelBuilder.Entity<JobParameter>(entity =>
            {
                entity.ToTable("JobParameter", "HangFire");

                entity.HasIndex(e => new { e.JobId, e.Name }, "IX_HangFire_JobParameter_JobIdAndName");

                entity.Property(e => e.Name).HasMaxLength(40);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobParameters)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_JobParameter_Job");
            });

            modelBuilder.Entity<JobQueue>(entity =>
            {
                entity.ToTable("JobQueue", "HangFire");

                entity.HasIndex(e => new { e.Queue, e.FetchedAt }, "IX_HangFire_JobQueue_QueueAndFetchedAt");

                entity.Property(e => e.FetchedAt).HasColumnType("datetime");

                entity.Property(e => e.Queue).HasMaxLength(50);
            });

            modelBuilder.Entity<List>(entity =>
            {
                entity.ToTable("List", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_List_ExpireAt");

                entity.HasIndex(e => e.Key, "IX_HangFire_List_Key");

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(100);
            });

            modelBuilder.Entity<LmCalVw>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LM_CAL_VW");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCY")
                    .IsFixedLength();

                entity.Property(e => e.Exposure)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("EXPOSURE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Facid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FACID");

                entity.Property(e => e.RealAvailable)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("REAL_AVAILABLE");

                entity.Property(e => e.RealExposure)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("REAL_EXPOSURE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Reservation)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("RESERVATION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RootFacid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ROOT_FACID");

                entity.Property(e => e.Sod)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("SOD")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<LmExpCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LM_EXP_CAL");

                entity.Property(e => e.ExposureAmount)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("EXPOSURE_AMOUNT");

                entity.Property(e => e.ExposureCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("EXPOSURE_CCY")
                    .IsFixedLength();

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.ResId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RES_ID");

                entity.Property(e => e.Rt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("RT")
                    .IsFixedLength();

                entity.Property(e => e.TrnId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TRN_ID");

                entity.Property(e => e.TrnType)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TRN_TYPE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<LmFacCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LM_FAC_CAL");

                entity.Property(e => e.AnchorCtptId).HasColumnName("AnchorCTPT_ID");

                entity.Property(e => e.AnchorLineFacid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AnchorLineFACID");

                entity.Property(e => e.ChildWithFullRecourseToAnchor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacClass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FacPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IpaApprovedLimit)
                    .HasColumnType("numeric(24, 5)")
                    .HasColumnName("IPA_ApprovedLimit");

                entity.Property(e => e.IpaApprovedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IPA_ApprovedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.IpaProposedLimit)
                    .HasColumnType("numeric(24, 5)")
                    .HasColumnName("IPA_ProposedLimit");

                entity.Property(e => e.IpaProposedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IPA_ProposedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.IsOneOff)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IsRevolving)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacID");

                entity.Property(e => e.PropertyPurchaseTl).HasColumnName("PropertyPurchaseTL");

                entity.Property(e => e.ProposedLimit).HasColumnType("numeric(22, 5)");

                entity.Property(e => e.ProposedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ProposedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.ProposedLimitCcyPrev)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ProposedLimitCCY_Prev")
                    .IsFixedLength();

                entity.Property(e => e.ProposedLimitPrev)
                    .HasColumnType("numeric(22, 5)")
                    .HasColumnName("ProposedLimit_Prev");

                entity.Property(e => e.Prrapplicable).HasColumnName("PRRApplicable");

                entity.Property(e => e.RealLimit).HasColumnType("numeric(22, 5)");

                entity.Property(e => e.RealLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("RealLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.RootFacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RootFacID");
            });

            modelBuilder.Entity<LmResCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LM_RES_CAL");

                entity.Property(e => e.FacId).HasColumnName("FacID");

                entity.Property(e => e.ResAmount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.ResCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ResCCY")
                    .IsFixedLength();
            });

            modelBuilder.Entity<LmSodCal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LM_SOD_CAL");

                entity.Property(e => e.FacId).HasColumnName("FacID");

                entity.Property(e => e.Sodamount)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("SODAmount");

                entity.Property(e => e.Sodccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SODCCY")
                    .IsFixedLength();
            });

            modelBuilder.Entity<LtctpttxtMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LTCTPTTxtMAP");

                entity.Property(e => e.Ctpttype)
                    .HasMaxLength(200)
                    .HasColumnName("CTPTType");

                entity.Property(e => e.LegalType).HasMaxLength(200);
            });

            modelBuilder.Entity<M2cfs20120109>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("M2CFS20120109");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adjusted Leverage");

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Capital Commitments");

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Conversion Cycle  Days");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Current Ratio");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer CIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DisplayUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Gross Profit(Loss)");

                entity.Property(e => e.GrossProfitMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Gross Profit Margin (%)");

                entity.Property(e => e.IntroductionOfFunds)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Introduction of funds");

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtInclContingenciesToEquity)
                    .IsUnicode(false)
                    .HasColumnName("Net Debt (incl  contingencies) to Equity                                                                                     ");

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Net Profit(Loss)");

                entity.Property(e => e.NetProfitMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Net Profit Margin (%)");

                entity.Property(e => e.OfWhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Of which Debt");

                entity.Property(e => e.OfWhichRelatedPartiesDuesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Of which Related parties dues (DRP)");

                entity.Property(e => e.OtherIncome)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Other income");

                entity.Property(e => e.PaidUpCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Paid up Capital");

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Statement Date");

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Statement ID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Stock Days  Days");

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Tangible Net Worth");

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Total Assets");

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Total Liabilities");

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Trade Creditor  Days");

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Trade Debtor  Days");

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Turnover   Total Sales");

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Withdrawn Profits");

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Working Capital");
            });

            modelBuilder.Entity<MigConditionsAu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_CONDITIONS_AU");

                entity.Property(e => e.Applicable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComplianceStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Compliance_Status");

                entity.Property(e => e.Condition).IsUnicode(false);

                entity.Property(e => e.ConditionCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Condition_Category");

                entity.Property(e => e.CustId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cust_id");

                entity.Property(e => e.DefermentDueDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Deferment_Due_Date");

                entity.Property(e => e.DeferralApprovalDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Deferral_Approval_Date");

                entity.Property(e => e.DeferralType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Deferral_Type");

                entity.Property(e => e.IsCommunicated)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Is_Communicated");

                entity.Property(e => e.MonthlyFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Monthly_Frequency");

                entity.Property(e => e.PrePostDisbursement)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Pre_Post_Disbursement");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MigCrossColl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_CROSS_COLL");

                entity.Property(e => e.CredProCrossCol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_CrossCol");

                entity.Property(e => e.CredProCtptId).HasColumnName("CredPro_CTPT_ID");

                entity.Property(e => e.CredProMotherCol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_MotherCol");

                entity.Property(e => e.CrossColl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cross_Coll");

                entity.Property(e => e.CrossCollateralAcId).HasColumnName("CrossCollateralAC_ID");

                entity.Property(e => e.CrossCollateralValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MotherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Mother_ID");
            });

            modelBuilder.Entity<MigCrossCollAu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_CROSS_COLL_AU");

                entity.Property(e => e.CredProCrossCol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_CrossCol");

                entity.Property(e => e.CredProCtptId).HasColumnName("CredPro_CTPT_ID");

                entity.Property(e => e.CredProMotherCol)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_MotherCol");

                entity.Property(e => e.CrossColl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cross_Coll");

                entity.Property(e => e.MotherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Mother_ID");
            });

            modelBuilder.Entity<MigFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_FACILITY");

                entity.Property(e => e.ApproveRejectState)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("APPROVE_REJECT_STATE");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.CbsLoanAc)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CBS_LOAN_AC");

                entity.Property(e => e.CommRate)
                    .HasColumnType("numeric(10, 5)")
                    .HasColumnName("COMM_RATE");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ExtFacilityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("Ext_FACILITY_ID");

                entity.Property(e => e.ExtParentFacilityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("Ext_PARENT_FACILITY_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.IsConditionalFacility)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_CONDITIONAL_FACILITY");

                entity.Property(e => e.IsExisting)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_EXISTING");

                entity.Property(e => e.IsSanctioned)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_SANCTIONED");

                entity.Property(e => e.LoanProcessingFee)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("LOAN_PROCESSING_FEE");

                entity.Property(e => e.MaturityDt).HasColumnName("MATURITY_DT");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.MstAssetclassId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_ASSETCLASS_ID");

                entity.Property(e => e.MstBankFacilityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_BANK_FACILITY_ID");

                entity.Property(e => e.MstCurrencyId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_CURRENCY_ID");

                entity.Property(e => e.MstLendingtypeId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_LENDINGTYPE_ID");

                entity.Property(e => e.MstSectorId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_SECTOR_ID");

                entity.Property(e => e.MstSubsectorId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_SUBSECTOR_ID");

                entity.Property(e => e.OsBalance)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("OS_BALANCE");

                entity.Property(e => e.OsRepDt).HasColumnName("OS_REP_DT");

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_FACILITY_ID");

                entity.Property(e => e.PercShare)
                    .HasColumnType("numeric(10, 5)")
                    .HasColumnName("PERC_SHARE");

                entity.Property(e => e.ProposedLimit)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("PROPOSED_LIMIT");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Tenor)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("TENOR");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<MigFacilityAu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_FACILITY_AU");

                entity.Property(e => e.Activity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedAmt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APPROVED_AMT");

                entity.Property(e => e.BanchMrak)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Banch_Mrak");

                entity.Property(e => e.Branch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BRANCH");

                entity.Property(e => e.Bu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CodCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_CUST");

                entity.Property(e => e.CodLineNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_LINE_NO");

                entity.Property(e => e.CredproId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_ID");

                entity.Property(e => e.CustRelationship)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUST_RELATIONSHIP");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_NAME");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.DisburseAmt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DISBURSE_AMT");

                entity.Property(e => e.DlodFlag)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DLOD_FLAG");

                entity.Property(e => e.EmiCycleDay)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EMI_CYCLE_DAY");

                entity.Property(e => e.EmiRepaymentCycleDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EMI_Repayment_Cycle_Date");

                entity.Property(e => e.ExtFacilityId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ext_FACILITY_ID");

                entity.Property(e => e.ExtParentFacilityId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ext_PARENT_FACILITY_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Fac_ID");

                entity.Property(e => e.FacSubtypeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Fac_subtype_name");

                entity.Property(e => e.FixedFloating)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Fixed_Floating");

                entity.Property(e => e.FlgAccrStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FLG_ACCR_STATUS");

                entity.Property(e => e.HasSensitiveSectorExposure)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Has_Sensitive_Sector_Exposure");

                entity.Property(e => e.HighlightedIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Highlighted_Industry");

                entity.Property(e => e.IsExistingLimitWithAusfb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Existing_limit_with_AUSFB");

                entity.Property(e => e.LimEnd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LIM_END");

                entity.Property(e => e.LimStart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LIM_START");

                entity.Property(e => e.LimitAmount)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_AMOUNT");

                entity.Property(e => e.MainIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Main_Industry");

                entity.Property(e => e.NegativeIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Negative_Industry");

                entity.Property(e => e.NetRoiCommission)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Net_ROI_Commission");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PARENT_FAC_ID");

                entity.Property(e => e.PeriodOfSanction)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Period_of_Sanction");

                entity.Property(e => e.Program)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedLimit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Proposed_Limit");

                entity.Property(e => e.PslCustomerCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Customer_Category");

                entity.Property(e => e.PslSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Sector");

                entity.Property(e => e.PslStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_status");

                entity.Property(e => e.PslSubSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_sub_sector");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RevolvingLine)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REVOLVING_LINE");

                entity.Property(e => e.SoleMultiple)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sole_Multiple");

                entity.Property(e => e.Spred)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.SubIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sub_Industry");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<MigGuarantee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_GUARANTEE");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ExtGuaranteeId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("Ext_GUARANTEE_ID");

                entity.Property(e => e.GuarInvocationDt).HasColumnName("GUAR_INVOCATION_DT");

                entity.Property(e => e.GuaranteeDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_DETAILS");

                entity.Property(e => e.GuaranteeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_ID");

                entity.Property(e => e.GuaranteeValue)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("GUARANTEE_VALUE");

                entity.Property(e => e.GuarantorBorrId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUARANTOR_BORR_ID");

                entity.Property(e => e.MaturityDate).HasColumnName("MATURITY_DATE");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.MstGuarIntRatingId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_GUAR_INT_RATING_ID");

                entity.Property(e => e.MstGuarTypeId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_GUAR_TYPE_ID");

                entity.Property(e => e.MstGuarantorCatId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_GUARANTOR_CAT_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.RecoveryPerc)
                    .HasColumnType("numeric(6, 2)")
                    .HasColumnName("RECOVERY_PERC");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<MigGuaranteeAu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_GUARANTEE_AU");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.AddressCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address_Country");

                entity.Property(e => e.ColIdExt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COL_ID_EXT");

                entity.Property(e => e.CollSubtype)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Coll_Subtype");

                entity.Property(e => e.CollateralType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Collateral_Type");

                entity.Property(e => e.DoeDob)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOE_DOB");

                entity.Property(e => e.ExtensionCreation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Extension_Creation");

                entity.Property(e => e.Gender)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GENDER");

                entity.Property(e => e.GurantorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Gurantor_Name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsCredproCustomer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_CREDPro_Customer");

                entity.Property(e => e.KmpType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KMP_Type");

                entity.Property(e => e.KmpTypeOthers)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("KMP_Type_Others");

                entity.Property(e => e.MainCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_CUST");

                entity.Property(e => e.Nationality)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PIN_Code");

                entity.Property(e => e.RelationshipDetails)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Relationship_Details");

                entity.Property(e => e.RelationshipWithBorrower)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Relationship_with_Borrower");
            });

            modelBuilder.Entity<MigIdentifierEnc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_IDENTIFIER_ENC");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentifierType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFIER_TYPE");

                entity.Property(e => e.IdentifierValue)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFIER_VALUE");

                entity.Property(e => e.IdentifierValueEnc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFIER_VALUE_ENC");

                entity.Property(e => e.RecordId).HasColumnName("RECORD_ID");

                entity.Property(e => e.RecordType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RECORD_TYPE");
            });

            modelBuilder.Entity<MigPropSec>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_PROP_SEC");

                entity.Property(e => e.ActualSecValue)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ACTUAL_SEC_VALUE");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Datafeeddate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ExtFacilityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("Ext_FACILITY_ID");

                entity.Property(e => e.ExtSecurityId)
                    .HasColumnType("numeric(30, 0)")
                    .HasColumnName("Ext_SECURITY_ID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_ID");

                entity.Property(e => e.IsGuarantee)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_GUARANTEE");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.SecurityId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_ID");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<MigSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_SECURITY");

                entity.Property(e => e.ActualSecValue)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ACTUAL_SEC_VALUE");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ExpiryDt).HasColumnName("EXPIRY_DT");

                entity.Property(e => e.ExtSecurityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("Ext_SECURITY_ID");

                entity.Property(e => e.InsAmount)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("INS_AMOUNT");

                entity.Property(e => e.InsCompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INS_COMPANY_NAME");

                entity.Property(e => e.InsExpiryDt).HasColumnName("INS_EXPIRY_DT");

                entity.Property(e => e.InsPolicyNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("INS_POLICY_NO");

                entity.Property(e => e.IsLegalOpinion)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_LEGAL_OPINION");

                entity.Property(e => e.IsOrigDoc)
                    .HasColumnType("numeric(1, 0)")
                    .HasColumnName("IS_ORIG_DOC");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.MstBankSecId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_BANK_SEC_ID");

                entity.Property(e => e.MstBranchId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_BRANCH_ID");

                entity.Property(e => e.MstChargetypeId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_CHARGETYPE_ID");

                entity.Property(e => e.MstCurrencyId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_CURRENCY_ID");

                entity.Property(e => e.MstDocQltyId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_DOC_QLTY_ID");

                entity.Property(e => e.MstSecMktblyId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_SEC_MKTBLY_ID");

                entity.Property(e => e.MstSecTypeId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_SEC_TYPE_ID");

                entity.Property(e => e.MstSeniorityId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MST_SENIORITY_ID");

                entity.Property(e => e.NumLenders)
                    .HasColumnType("numeric(3, 0)")
                    .HasColumnName("NUM_LENDERS");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.RecoveryPerc)
                    .HasColumnType("numeric(6, 2)")
                    .HasColumnName("RECOVERY_PERC");

                entity.Property(e => e.SecDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SEC_DETAILS");

                entity.Property(e => e.SecurityId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_ID");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValuationDt).HasColumnName("VALUATION_DT");
            });

            modelBuilder.Entity<MigSecurityAu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MIG_SECURITY_AU");

                entity.Property(e => e.ChargeSeniority)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_SENIORITY");

                entity.Property(e => e.ChargeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_TYPE");

                entity.Property(e => e.Cif)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CodAreaUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_AREA_UNIT");

                entity.Property(e => e.ColAddress)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COL_ADDRESS");

                entity.Property(e => e.CollSubtype)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Coll_Subtype");

                entity.Property(e => e.CollateralDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COLLATERAL_DESCRIPTION");

                entity.Property(e => e.CollateralType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Collateral_Type");

                entity.Property(e => e.CollateralValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COLLATERAL_VALUE");

                entity.Property(e => e.FltArea)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FLT_AREA");

                entity.Property(e => e.MigrationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MIGRATION_ID");

                entity.Property(e => e.NegativeArea)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NEGATIVE_AREA");

                entity.Property(e => e.OccupancyType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Occupancy_Type");

                entity.Property(e => e.OtherBuAmount)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_BU_AMOUNT");

                entity.Property(e => e.OtherBuCif)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_BU_CIF");

                entity.Property(e => e.OtherBuName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OTHER_BU_NAME");

                entity.Property(e => e.OurShare)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OUR_SHARE");

                entity.Property(e => e.Pincode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PINCODE");

                entity.Property(e => e.SecurityLevel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_LEVEL");

                entity.Property(e => e.SharedWith)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Shared_with");

                entity.Property(e => e.Specific)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Takeover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TAKEOVER");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<MistrackerDetailsReportDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MISTrackerDetails_Report_dashboard");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AppStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APP_START_DATE");

                entity.Property(e => e.AppStartMonth).HasColumnName("APP_START_MONTH");

                entity.Property(e => e.AppStartYear).HasColumnName("APP_START_YEAR");

                entity.Property(e => e.ApprovalDate).HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstSanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FIRST_SANCTION_DATE");

                entity.Property(e => e.FundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ProposedLimit_INR");

                entity.Property(e => e.IsAbort)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_ABORT");

                entity.Property(e => e.IsDecline)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_DECLINE");

                entity.Property(e => e.IsLoginAccepted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Is_Login_Accepted");

                entity.Property(e => e.LeadRm)
                    .HasMaxLength(302)
                    .HasColumnName("Lead_RM");

                entity.Property(e => e.LeadRmEmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("Lead_RM_EmployeeID");

                entity.Property(e => e.LoginAcceptedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_ACCEPTED_DATE");

                entity.Property(e => e.NonFundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ProposedLimit_INR");

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.SanctionCount).HasColumnName("SANCTION_COUNT");

                entity.Property(e => e.SanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SANCTION_DATE");

                entity.Property(e => e.TotalProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ProposedLimit_INR");

                entity.Property(e => e.Tray)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRAY");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFNAME");
            });

            modelBuilder.Entity<MistrackerHistoryDetailsReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MISTrackerHistoryDetails_Report");

                entity.Property(e => e.AppId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.ApproverTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("APPROVER_TRAY");

                entity.Property(e => e.BusinessTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("BUSINESS_TRAY");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Exposure).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.LeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM");

                entity.Property(e => e.LeadRmId).HasColumnName("Lead_RM_ID");

                entity.Property(e => e.LoginAcceptedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_ACCEPTED_DATE");

                entity.Property(e => e.LoginSanctionDateDiff).HasColumnName("Login & Sanction Date Diff");

                entity.Property(e => e.LoginacceptanceBusinesstray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("LOGINACCEPTANCE_BUSINESSTRAY");

                entity.Property(e => e.LoginacceptanceCredittray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("LOGINACCEPTANCE_CREDITTRAY");

                entity.Property(e => e.RecommendorTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("RECOMMENDOR_TRAY");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.TotalTat)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("TOTAL_TAT");

                entity.Property(e => e.UnderwritingTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("UNDERWRITING_TRAY");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<MistrackerHistoryDetailsReportDashboard>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MISTrackerHistoryDetails_Report_dashboard");

                entity.Property(e => e.AppId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AppStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APP_START_DATE");

                entity.Property(e => e.AppStartMonth).HasColumnName("APP_START_MONTH");

                entity.Property(e => e.AppStartYear).HasColumnName("APP_START_YEAR");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FirstSanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("FIRST_SANCTION_DATE");

                entity.Property(e => e.FundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ApprovedLimit_INR");

                entity.Property(e => e.IsAbort)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_ABORT");

                entity.Property(e => e.IsDecline)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_DECLINE");

                entity.Property(e => e.IsLoginAccepted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Is_Login_Accepted");

                entity.Property(e => e.LeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM");

                entity.Property(e => e.LeadRmEmployeeId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM_EmployeeID");

                entity.Property(e => e.LoginAcceptedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_ACCEPTED_DATE");

                entity.Property(e => e.NonFundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ApprovedLimit_INR");

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.SanctionCount).HasColumnName("SANCTION_COUNT");

                entity.Property(e => e.SanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SANCTION_DATE");

                entity.Property(e => e.TotalApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ApprovedLimit_INR");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFNAME");
            });

            modelBuilder.Entity<Mra2cmsFinancialStmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MRA2CMS_Financial_Stmt");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .HasColumnName("\"Adjusted Leverage\"");

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .HasColumnName("\"Capital Commitments\"");

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .HasColumnName("\"Contingencies\"");

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .HasColumnName("\"Conversion Cycle  Days\"");

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .HasColumnName("\"Current Ratio\"");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .HasColumnName("\"Customer CIF\"");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .HasColumnName("\"Customer Name\"");

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .HasColumnName("\"Gross Profit(Loss)\"");

                entity.Property(e => e.GrossProfitMargin)
                    .HasMaxLength(50)
                    .HasColumnName("\"Gross Profit Margin (%)\"");

                entity.Property(e => e.IntroductionOfFunds)
                    .HasMaxLength(50)
                    .HasColumnName("\"Introduction of funds\"");

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .HasColumnName("\"IsQualified\"");

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .HasColumnName("\"Leverage\"");

                entity.Property(e => e.NetDebtInclContingenciesToEquity)
                    .HasMaxLength(50)
                    .HasColumnName("\"Net Debt (incl  contingencies) to Equity\"");

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .HasColumnName("\"Net Profit(Loss)\"");

                entity.Property(e => e.NetProfitMargin)
                    .HasMaxLength(50)
                    .HasColumnName("\"Net Profit Margin (%)\"");

                entity.Property(e => e.OfWhichDebt)
                    .HasMaxLength(50)
                    .HasColumnName("\"Of which Debt\"");

                entity.Property(e => e.OfWhichRelatedPartiesDuesDrp)
                    .HasMaxLength(50)
                    .HasColumnName("\"Of which Related parties dues (DRP)\"");

                entity.Property(e => e.OtherIncome)
                    .HasMaxLength(50)
                    .HasColumnName("\"Other income\"");

                entity.Property(e => e.PaidUpCapital)
                    .HasMaxLength(50)
                    .HasColumnName("\"Paid up Capital\"");

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .HasColumnName("\"Period\"");

                entity.Property(e => e.StatedmentAuditStatus)
                    .HasMaxLength(50)
                    .HasColumnName("\"Statedment Audit Status\"");

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .HasColumnName("\"Statement Date\"");

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .HasColumnName("\"Statement ID\"");

                entity.Property(e => e.StatementTypeAnnualYtd)
                    .HasMaxLength(50)
                    .HasColumnName("\"Statement Type (Annual  YTD)\"");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .HasColumnName("\"Stock Days  Days\"");

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .HasColumnName("\"Tangible Net Worth\"");

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .HasColumnName("\"Total Assets\"");

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .HasColumnName("\"Total Liabilities\"");

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .HasColumnName("\"Trade Creditor  Days\"");

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .HasColumnName("\"Trade Debtor  Days \"");

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .HasColumnName("\"Turnover   Total Sales\"");

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .HasColumnName("\"Withdrawn Profits\"");

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .HasColumnName("\"Working Capital\"");
            });

            modelBuilder.Entity<MraFinancialDataNewFormatHist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MRA_Financial_Data_NewFormat_hist");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Introductionoffunds)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatementID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MraFinancialDataNewformat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mra_financial_data_newformat");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BsAdjTnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_ADJ_TNW");

                entity.Property(e => e.BsCashBalances)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CASH_BALANCES");

                entity.Property(e => e.BsContingentLi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CONTINGENT_LI");

                entity.Property(e => e.BsCpltd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CPLTD");

                entity.Property(e => e.BsDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_DEBT");

                entity.Property(e => e.BsEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_EQUITY");

                entity.Property(e => e.BsInvIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_INV_IN");

                entity.Property(e => e.BsLoansFromPromoters)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_LOANS_FROM_PROMOTERS");

                entity.Property(e => e.BsNetFixedAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_NET_FIXED_ASSETS");

                entity.Property(e => e.BsNetWorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_NET_WORKING_CAPITAL");

                entity.Property(e => e.BsOtherCur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_OTHER_CUR");

                entity.Property(e => e.BsPaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_PAIDUP_CAPITAL");

                entity.Property(e => e.BsTangibleNet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TANGIBLE_NET");

                entity.Property(e => e.BsTotalCurrAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_CURR_ASSETS");

                entity.Property(e => e.BsTotalCurrLiab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_CURR_LIAB");

                entity.Property(e => e.BsTotalExtDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_EXT_DEBT");

                entity.Property(e => e.BsTotalOut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_OUT");

                entity.Property(e => e.BsWcStDebit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_WC_ST_DEBIT");

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CfCashDisc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_CASH_DISC");

                entity.Property(e => e.CfDebtors)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_DEBTORS");

                entity.Property(e => e.CfDividPai)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_DIVID_PAI");

                entity.Property(e => e.CfEqShares)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_EQ_SHARES");

                entity.Property(e => e.CfFreeCash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_FREE_CASH");

                entity.Property(e => e.CfGrCapex)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_GR_CAPEX");

                entity.Property(e => e.CfIncCreditors)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_INC_CREDITORS");

                entity.Property(e => e.CfInventory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_INVENTORY");

                entity.Property(e => e.CfMaintCap)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_MAINT_CAP");

                entity.Property(e => e.CfNetCash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_NET_CASH");

                entity.Property(e => e.CfNetIssuePmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_NET_ISSUE_PMT");

                entity.Property(e => e.CfOthCash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_OTH_CASH");

                entity.Property(e => e.CfOthPrPmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_OTH_PR_PMT");

                entity.Property(e => e.CfOthSource)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_OTH_SOURCE");

                entity.Property(e => e.CfOtherAssetsLoans)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_OTHER_ASSETS_LOANS");

                entity.Property(e => e.CfPrefShares)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_PREF_SHARES");

                entity.Property(e => e.CfSchDebtRepay)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_SCH_DEBT_REPAY");

                entity.Property(e => e.CfShortDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_SHORT_DEBT");

                entity.Property(e => e.CfWrkgCap)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CF_WRKG_CAP");

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HlFinGoods)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_FIN_GOODS");

                entity.Property(e => e.HlRawMat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_RAW_MAT");

                entity.Property(e => e.HlSundryDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_SUNDRY_DEBT");

                entity.Property(e => e.HlTotalInv)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_TOTAL_INV");

                entity.Property(e => e.HlTotalOper)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_TOTAL_OPER");

                entity.Property(e => e.HlTradeCred)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_TRADE_CRED");

                entity.Property(e => e.HlWorkProg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("HL_WORK_PROG");

                entity.Property(e => e.Introductionoffunds)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KrActProj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_ACT_PROJ");

                entity.Property(e => e.KrAdjPatMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_ADJ_PAT_MARGIN");

                entity.Property(e => e.KrAssetSales)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_ASSET_SALES");

                entity.Property(e => e.KrCrRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_CR_RATIO");

                entity.Property(e => e.KrDiviPayout)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_DIVI_PAYOUT");

                entity.Property(e => e.KrDscr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_DSCR");

                entity.Property(e => e.KrEbitda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_EBITDA");

                entity.Property(e => e.KrEbitdaInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_EBITDA_INT");

                entity.Property(e => e.KrFinCharges)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_FIN_CHARGES");

                entity.Property(e => e.KrFxdassetratio)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_FXDASSETRATIO");

                entity.Property(e => e.KrGrossMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_GROSS_MARGIN");

                entity.Property(e => e.KrPatMargin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_PAT_MARGIN");

                entity.Property(e => e.KrRoce)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_ROCE");

                entity.Property(e => e.KrSgaExp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_SGA_EXP");

                entity.Property(e => e.KrSustGrowth)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_SUST_GROWTH");

                entity.Property(e => e.KrTargetted)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TARGETTED");

                entity.Property(e => e.KrTermDebit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TERM_DEBIT");

                entity.Property(e => e.KrTolAtnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TOL_ATNW");

                entity.Property(e => e.KrTolTnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TOL_TNW");

                entity.Property(e => e.KrTotalDebit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TOTAL_DEBIT");

                entity.Property(e => e.KrTotalDebitAtnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TOTAL_DEBIT_ATNW");

                entity.Property(e => e.KrTotalDebitTnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("KR_TOTAL_DEBIT_TNW");

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlDepreciation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_DEPRECIATION");

                entity.Property(e => e.PlDividendWithdrawal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_DIVIDEND_WITHDRAWAL");

                entity.Property(e => e.PlEbitda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_EBITDA");

                entity.Property(e => e.PlFinCharges)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_FIN_CHARGES");

                entity.Property(e => e.PlGrossProfit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_GROSS_PROFIT");

                entity.Property(e => e.PlNetCash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NET_CASH");

                entity.Property(e => e.PlNetRevenue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NET_REVENUE");

                entity.Property(e => e.PlNonOp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NON_OP");

                entity.Property(e => e.PlPat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_PAT");

                entity.Property(e => e.PlPbt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_PBT");

                entity.Property(e => e.PlSellingGen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_SELLING_GEN");

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatementID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MraFinancialDataNewformat1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mra_financial_data_newformat1");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Introductionoffunds)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementId)
                    .HasColumnType("numeric(8, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("StatementID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MraFinancialDataNewformat2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mra_financial_data_newformat2");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BsAdjTnw)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_ADJ_TNW");

                entity.Property(e => e.BsCashBalances)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CASH_BALANCES");

                entity.Property(e => e.BsContingentLi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CONTINGENT_LI");

                entity.Property(e => e.BsCpltd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_CPLTD");

                entity.Property(e => e.BsDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_DEBT");

                entity.Property(e => e.BsEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_EQUITY");

                entity.Property(e => e.BsInvIn)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_INV_IN");

                entity.Property(e => e.BsLoansFromPromoters)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_LOANS_FROM_PROMOTERS");

                entity.Property(e => e.BsNetFixedAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_NET_FIXED_ASSETS");

                entity.Property(e => e.BsNetWorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_NET_WORKING_CAPITAL");

                entity.Property(e => e.BsOtherCur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_OTHER_CUR");

                entity.Property(e => e.BsPaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_PAIDUP_CAPITAL");

                entity.Property(e => e.BsTangibleNet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TANGIBLE_NET");

                entity.Property(e => e.BsTotalCurrAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_CURR_ASSETS");

                entity.Property(e => e.BsTotalCurrLiab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_CURR_LIAB");

                entity.Property(e => e.BsTotalExtDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_EXT_DEBT");

                entity.Property(e => e.BsTotalOut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_TOTAL_OUT");

                entity.Property(e => e.BsWcStDebit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BS_WC_ST_DEBIT");

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Introductionoffunds)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlDepreciation)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_DEPRECIATION");

                entity.Property(e => e.PlDividendWithdrawal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_DIVIDEND_WITHDRAWAL");

                entity.Property(e => e.PlEbitda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_EBITDA");

                entity.Property(e => e.PlFinCharges)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_FIN_CHARGES");

                entity.Property(e => e.PlGrossProfit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_GROSS_PROFIT");

                entity.Property(e => e.PlNetCash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NET_CASH");

                entity.Property(e => e.PlNetRevenue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NET_REVENUE");

                entity.Property(e => e.PlNonOp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_NON_OP");

                entity.Property(e => e.PlPat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_PAT");

                entity.Property(e => e.PlPbt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_PBT");

                entity.Property(e => e.PlSellingGen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PL_SELLING_GEN");

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementId)
                    .HasColumnType("numeric(8, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("StatementID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MracmsFinancialDataNewFormatTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MRACMS_Financial_Data_NewFormat_temp");

                entity.Property(e => e.AdjustedLeverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Audited)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CapitalCommitments)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contingencies)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConversionCycleDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRatio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrossProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Introductionoffunds)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsQualified)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Leverage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity).IsUnicode(false);

                entity.Property(e => e.NetProfitLoss)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetProfitMarginPercent)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichDebt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PaidupCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PastOrProjection)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Period)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StatementID");

                entity.Property(e => e.StockDaysDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TangibleNetWorth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAssets)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalLiabilities)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeCreditorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDebtorDays)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TurnoverTotalSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WithdrawnProfits)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapital)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MracmsFinancialDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MRACMS_Financial_Data");

                entity.Property(e => e.AdjustedLeverage).HasMaxLength(50);

                entity.Property(e => e.CapitalCommitments).HasMaxLength(50);

                entity.Property(e => e.Contingencies).HasMaxLength(50);

                entity.Property(e => e.ConversionCycleDays).HasMaxLength(50);

                entity.Property(e => e.CounterPartyName).HasMaxLength(50);

                entity.Property(e => e.CurrentRatio).HasMaxLength(50);

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(50)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.GrossProfitLoss).HasMaxLength(50);

                entity.Property(e => e.GrossProfitMarginPercent).HasMaxLength(50);

                entity.Property(e => e.Introductionoffunds).HasMaxLength(50);

                entity.Property(e => e.IsQualified).HasMaxLength(50);

                entity.Property(e => e.Leverage).HasMaxLength(50);

                entity.Property(e => e.NetDebtinclcontingenciestoEquity).HasMaxLength(50);

                entity.Property(e => e.NetProfitLoss).HasMaxLength(50);

                entity.Property(e => e.NetProfitMarginPercent).HasMaxLength(50);

                entity.Property(e => e.OfwhichDebt).HasMaxLength(50);

                entity.Property(e => e.OfwhichRelatedpartiesduesDrp)
                    .HasMaxLength(50)
                    .HasColumnName("OfwhichRelatedpartiesduesDRP");

                entity.Property(e => e.Otherincome).HasMaxLength(50);

                entity.Property(e => e.PaidupCapital).HasMaxLength(50);

                entity.Property(e => e.Period).HasMaxLength(50);

                entity.Property(e => e.StatedmentAuditStatus).HasMaxLength(50);

                entity.Property(e => e.StatementDate).HasMaxLength(50);

                entity.Property(e => e.StatementId)
                    .HasMaxLength(50)
                    .HasColumnName("StatementID");

                entity.Property(e => e.StatementTypeAnnualYtd)
                    .HasMaxLength(50)
                    .HasColumnName("StatementTypeAnnualYTD");

                entity.Property(e => e.StockDaysDays).HasMaxLength(50);

                entity.Property(e => e.TangibleNetWorth).HasMaxLength(50);

                entity.Property(e => e.TotalAssets).HasMaxLength(50);

                entity.Property(e => e.TotalLiabilities).HasMaxLength(50);

                entity.Property(e => e.TradeCreditorDays).HasMaxLength(50);

                entity.Property(e => e.TradeDebtorDays).HasMaxLength(50);

                entity.Property(e => e.TurnoverTotalSales).HasMaxLength(50);

                entity.Property(e => e.WithdrawnProfits).HasMaxLength(50);

                entity.Property(e => e.WorkingCapital).HasMaxLength(50);
            });

            modelBuilder.Entity<OsfacilityDetail>(entity =>
            {
                entity.ToTable("OSFacilityDetails");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BillTenor).IsUnicode(false);

                entity.Property(e => e.ClassificationDesc).IsUnicode(false);

                entity.Property(e => e.CurrencyDescExistingLimit).IsUnicode(false);

                entity.Property(e => e.CurrencyDescProposedLimit).IsUnicode(false);

                entity.Property(e => e.CurrencyDescUtilization).IsUnicode(false);

                entity.Property(e => e.CurrencyExistingLimit).IsUnicode(false);

                entity.Property(e => e.CurrencyProposedLimit).IsUnicode(false);

                entity.Property(e => e.CurrencyUtilization).IsUnicode(false);

                entity.Property(e => e.DeptId).HasColumnName("DeptID");

                entity.Property(e => e.FacId)
                    .IsUnicode(false)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .IsUnicode(false)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.InAppStatus).IsUnicode(false);

                entity.Property(e => e.OnSancationState).IsUnicode(false);

                entity.Property(e => e.OriginalApplicationId)
                    .IsUnicode(false)
                    .HasColumnName("OriginalApplicationID");

                entity.Property(e => e.ParentFacId).HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ParentFacilityId)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacilityID");

                entity.Property(e => e.ParentFacilityIddesc)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacilityIDDesc");

                entity.Property(e => e.SanctionId).HasColumnName("SanctionID");

                entity.Property(e => e.SubtypeDesc).IsUnicode(false);

                entity.Property(e => e.Tenor).IsUnicode(false);

                entity.Property(e => e.TenorUnit).IsUnicode(false);

                entity.Property(e => e.TypeDesc).IsUnicode(false);
            });

            modelBuilder.Entity<RsoutBorrBasicInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_BORR_BASIC_INFO");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("BORR_NAME");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.Pan)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Userid)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("USERID");
            });

            modelBuilder.Entity<RsoutDetailRiskRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_DETAIL_RISK_RPT");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.ScoreValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("SCORE_VALUE");

                entity.Property(e => e.ScoringDtlsDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCORING_DTLS_DESC");

                entity.Property(e => e.SectionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECTION_ID");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SR_NO");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL");

                entity.Property(e => e.AssessmentType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ASSESSMENT_TYPE");

                entity.Property(e => e.BaseYear)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("BASE_YEAR");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FinalUserLevel)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FINAL_USER_LEVEL");

                entity.Property(e => e.FinalizedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FINALIZED_BY");

                entity.Property(e => e.FinalizedDate).HasColumnName("FINALIZED_DATE");

                entity.Property(e => e.IndustryName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY_NAME");

                entity.Property(e => e.InitiatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INITIATED_BY");

                entity.Property(e => e.InitiationDate).HasColumnName("INITIATION_DATE");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.IsProposalFinalized)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_FINALIZED");

                entity.Property(e => e.Model)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODEL");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalBorrRaroc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_BORR_RAROC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrPd)
                    .HasColumnType("numeric(12, 6)")
                    .HasColumnName("BORR_PD");

                entity.Property(e => e.BorrRaroc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("BORR_RAROC");

                entity.Property(e => e.BorrRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BORR_RATING");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.OtherIncome01)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_01");

                entity.Property(e => e.OtherIncome02)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_02");

                entity.Property(e => e.OtherIncome03)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_03");

                entity.Property(e => e.OtherIncome04)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_04");

                entity.Property(e => e.OtherIncome05)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_05");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROCESSING_FEE");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedExp)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PROPOSED_EXP");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.TotalCommitmentFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("TOTAL_COMMITMENT_FEE");

                entity.Property(e => e.TotalIncomeCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("TOTAL_INCOME_CAPITAL");

                entity.Property(e => e.UfceImpact)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("UFCE_IMPACT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalChargeDtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_CHARGE_DTLS");

                entity.Property(e => e.BankDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_DESC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.ChargeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_DESC");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.SecSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_SR_NO");

                entity.Property(e => e.SecurityAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("SECURITY_AMT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalFacRaroc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_FAC_RAROC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.CcfAvgUtilisation)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_AVG_UTILISATION");

                entity.Property(e => e.CcfDrawnFac)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_DRAWN_FAC");

                entity.Property(e => e.CcfUndrawnExp)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_UNDRAWN_EXP");

                entity.Property(e => e.CommitmentFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("COMMITMENT_FEE");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.EconomicCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ECONOMIC_CAPITAL");

                entity.Property(e => e.EconomicProfit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ECONOMIC_PROFIT");

                entity.Property(e => e.EfficiencyRatio)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EFFICIENCY_RATIO");

                entity.Property(e => e.El)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EL");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.FacilityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_DESC");

                entity.Property(e => e.FundingCost)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("FUNDING_COST");

                entity.Property(e => e.HurdleRate)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("HURDLE_RATE");

                entity.Property(e => e.IncomeFromCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("INCOME_FROM_CAPITAL");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.Lgd)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("LGD");

                entity.Property(e => e.OtherIncome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME");

                entity.Property(e => e.Pd)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("PD");

                entity.Property(e => e.PostTaxnetincome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("POST_TAXNETINCOME");

                entity.Property(e => e.PreTaxnetincome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PRE_TAXNETINCOME");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedInterestFee)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("PROPOSED_INTEREST_FEE");

                entity.Property(e => e.ProposedLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROPOSED_LIMIT");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Raroc)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("RAROC");

                entity.Property(e => e.RealisedRaroc)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("REALISED_RAROC");

                entity.Property(e => e.Revenue)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("REVENUE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_FACILITY");

                entity.Property(e => e.ActualExpectedDdCcf1)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("ACTUAL_EXPECTED_DD_CCF1");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ElRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EL_RATING");

                entity.Property(e => e.ExistingLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("EXISTING_LIMIT");

                entity.Property(e => e.ExpectedDdCcf1)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("EXPECTED_DD_CCF1");

                entity.Property(e => e.ExpectedDevCcf2)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("EXPECTED_DEV_CCF2");

                entity.Property(e => e.FacEndDate).HasColumnName("FAC_END_DATE");

                entity.Property(e => e.FacGrpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAC_GRP_NAME");

                entity.Property(e => e.FacParentSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_PARENT_SR_NO");

                entity.Property(e => e.FacRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_RATING");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.FacStartDate).HasColumnName("FAC_START_DATE");

                entity.Property(e => e.FacilityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_DESC");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.Lgd)
                    .HasColumnType("numeric(12, 6)")
                    .HasColumnName("LGD");

                entity.Property(e => e.ObligorRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OBLIGOR_RATING");

                entity.Property(e => e.OutstandingAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OUTSTANDING_AMT");

                entity.Property(e => e.OverallCap)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OVERALL_CAP");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROPOSED_LIMIT");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.UcfFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UCF_FLAG");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalGuarantee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_GUARANTEE");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.GuaranteeAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("GUARANTEE_AMT");

                entity.Property(e => e.GuaranteeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_DESC");

                entity.Property(e => e.GuaranteeSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_SR_NO");

                entity.Property(e => e.GuarantorBorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_BORR_ID");

                entity.Property(e => e.GuarantorRatingGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_RATING_GRADE");

                entity.Property(e => e.GuarantorValidity).HasColumnName("GUARANTOR_VALIDITY");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<RsoutProposalSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_PROPOSAL_SECURITY");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedEndDate).HasColumnName("PROPOSED_END_DATE");

                entity.Property(e => e.ProposedStartDate).HasColumnName("PROPOSED_START_DATE");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Rating)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("RATING");

                entity.Property(e => e.SecSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_SR_NO");

                entity.Property(e => e.SecurityAddrDet)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_ADDR_DET");

                entity.Property(e => e.SecurityCityId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CITY_ID");

                entity.Property(e => e.SecurityCreated)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CREATED");

                entity.Property(e => e.SecurityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_DESC");

                entity.Property(e => e.SecurityPinCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_PIN_CODE");

                entity.Property(e => e.SecurityStateId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_STATE_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValidDate).HasColumnName("VALID_DATE");

                entity.Property(e => e.ValidSource)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALID_SOURCE");

                entity.Property(e => e.ValuedAtAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("VALUED_AT_AMT");
            });

            modelBuilder.Entity<RsoutSubjDataCnf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RSOUT_SUBJ_DATA_CNF");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrowerRating)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BORROWER_RATING");

                entity.Property(e => e.CompType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMP_TYPE");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.IndustryBenchmark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY_BENCHMARK");

                entity.Property(e => e.IsProposalDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IS_PROPOSAL_DELETED");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Score)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCORE");

                entity.Property(e => e.ScoringDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCORING_DESC");

                entity.Property(e => e.SectionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECTION_ID");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SR_NO");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Weightages)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHTAGES");

                entity.Property(e => e.WeightedScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHTED_SCORE");
            });

            modelBuilder.Entity<RuleSet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RuleSet");

                entity.Property(e => e.ActivityName).HasMaxLength(128);

                entity.Property(e => e.AssemblyPath).HasMaxLength(256);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.Property(e => e.RuleSet1)
                    .HasColumnType("ntext")
                    .HasColumnName("RuleSet");
            });

            modelBuilder.Entity<RuleSet20220621>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RuleSet_20220621");

                entity.Property(e => e.ActivityName).HasMaxLength(128);

                entity.Property(e => e.AssemblyPath).HasMaxLength(256);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.Property(e => e.RuleSet).HasColumnType("ntext");
            });

            modelBuilder.Entity<RuleSetRemove>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RuleSet_Remove");

                entity.Property(e => e.ActivityName).HasMaxLength(128);

                entity.Property(e => e.AssemblyPath).HasMaxLength(256);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.Property(e => e.RuleSet).HasColumnType("ntext");
            });

            modelBuilder.Entity<Schema>(entity =>
            {
                entity.HasKey(e => e.Version)
                    .HasName("PK_HangFire_Schema");

                entity.ToTable("Schema", "HangFire");

                entity.Property(e => e.Version).ValueGeneratedNever();
            });

            modelBuilder.Entity<Server>(entity =>
            {
                entity.ToTable("Server", "HangFire");

                entity.Property(e => e.Id).HasMaxLength(100);

                entity.Property(e => e.LastHeartbeat).HasColumnType("datetime");
            });

            modelBuilder.Entity<Set>(entity =>
            {
                entity.ToTable("Set", "HangFire");

                entity.HasIndex(e => e.ExpireAt, "IX_HangFire_Set_ExpireAt");

                entity.HasIndex(e => e.Key, "IX_HangFire_Set_Key");

                entity.HasIndex(e => new { e.Key, e.Value }, "UX_HangFire_Set_KeyAndValue")
                    .IsUnique();

                entity.Property(e => e.ExpireAt).HasColumnType("datetime");

                entity.Property(e => e.Key).HasMaxLength(100);

                entity.Property(e => e.Value).HasMaxLength(256);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.ToTable("State", "HangFire");

                entity.HasIndex(e => e.JobId, "IX_HangFire_State_JobId");

                entity.Property(e => e.CreatedAt).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(20);

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.States)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_HangFire_State_Job");
            });

            modelBuilder.Entity<T24cmCollateralXmldatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("T24CM_Collateral_XMLData");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("application_id");

                entity.Property(e => e.AssignToBank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("assign_to_bank");

                entity.Property(e => e.BankInterest)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bank_interest");

                entity.Property(e => e.Baselcomplied)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("baselcomplied");

                entity.Property(e => e.Centralbankvalue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("centralbankvalue");

                entity.Property(e => e.CollateralCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("collateral_code");

                entity.Property(e => e.CollateralId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("collateral_id");

                entity.Property(e => e.CollateralType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("collateral_type");

                entity.Property(e => e.Company)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("company");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("country");

                entity.Property(e => e.CrmValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("crm_value");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Emirates)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("emirates");

                entity.Property(e => e.EndOfLease)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("end_of_lease");

                entity.Property(e => e.ExecutionValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("execution_value");

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("expiry_date");

                entity.Property(e => e.ExtentOfLand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("extent_of_land");

                entity.Property(e => e.Genledgervalue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("genledgervalue");

                entity.Property(e => e.GiftCrownLand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gift_crown_land");

                entity.Property(e => e.InsExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ins_expiry_date");

                entity.Property(e => e.InsurCompany)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("insur_company");

                entity.Property(e => e.InsuranceDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("insurance_date");

                entity.Property(e => e.InsuredAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("insured_amount");

                entity.Property(e => e.LandBuilding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("land_building");

                entity.Property(e => e.Ldt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ldt");

                entity.Property(e => e.LeaseAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lease_amount");

                entity.Property(e => e.LeasePayFreq)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lease_pay_freq");

                entity.Property(e => e.LocationArea)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("location_area");

                entity.Property(e => e.NameOfOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name_of_owner");

                entity.Property(e => e.NameOfScrip)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name_of_scrip");

                entity.Property(e => e.NameOfValuer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name_of_valuer");

                entity.Property(e => e.NameOfVessel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name_of_vessel");

                entity.Property(e => e.NoOfShares)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("no_of_shares");

                entity.Property(e => e.Nominalvalue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nominalvalue");

                entity.Property(e => e.Notes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Order)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("order");

                entity.Property(e => e.PlotNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("plot_no");

                entity.Property(e => e.PolicyNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("policy_no");

                entity.Property(e => e.PolicyType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("policy_type");

                entity.Property(e => e.PotLiabLease)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("pot_liab_lease");

                entity.Property(e => e.RegAuthority)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reg_authority");

                entity.Property(e => e.RegCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reg_country");

                entity.Property(e => e.Registered)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("registered");

                entity.Property(e => e.RentedLeased)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rented_leased");

                entity.Property(e => e.ReviewDateFqu)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("review_date_fqu");

                entity.Property(e => e.SecCoverage)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sec_coverage");

                entity.Property(e => e.StartOfLease)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("start_of_lease");

                entity.Property(e => e.Thirdpartyvalue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("thirdpartyvalue");

                entity.Property(e => e.TypeOfVessel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type_of_vessel");

                entity.Property(e => e.UnitPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unit_price");

                entity.Property(e => e.ValuationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("valuation_date");

                entity.Property(e => e.ValueDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("value_date");

                entity.Property(e => e.YearBuilt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("year_built");
            });

            modelBuilder.Entity<T24prodMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("T24ProdMaster");

                entity.Property(e => e.CcfperYear)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCFPerYear");

                entity.Property(e => e.Clsfid).HasColumnName("CLSFID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductPurpose).HasMaxLength(500);

                entity.Property(e => e.T24pid).HasColumnName("T24PID");

                entity.Property(e => e.T24prodName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("T24ProdName");

                entity.Property(e => e.Tmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMID");
            });

            modelBuilder.Entity<T24prodMasterHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("T24ProdMaster_History");

                entity.Property(e => e.CcfperYear)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCFPerYear");

                entity.Property(e => e.Clsfid).HasColumnName("CLSFID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacStage).HasColumnName("Fac_Stage");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProductPurpose).HasMaxLength(500);

                entity.Property(e => e.T24pid).HasColumnName("T24PID");

                entity.Property(e => e.T24prodName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("T24ProdName");

                entity.Property(e => e.Tmid).HasColumnName("TMID");
            });

            modelBuilder.Entity<Table2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("table2");

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(300)
                    .HasColumnName("Address_Line1");

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(300)
                    .HasColumnName("Address_Line2");

                entity.Property(e => e.Age).HasColumnName("AGE");

                entity.Property(e => e.Cbsnumber)
                    .HasColumnType("xml")
                    .HasColumnName("CBSNumber");

                entity.Property(e => e.Cibilscore)
                    .HasMaxLength(10)
                    .HasColumnName("CIBILScore");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentDesgAppointmentDate).HasColumnName("CurrentDesg_AppointmentDate");

                entity.Property(e => e.Designation).HasMaxLength(200);

                entity.Property(e => e.Din)
                    .HasMaxLength(100)
                    .HasColumnName("DIN");

                entity.Property(e => e.DirectorName).HasMaxLength(200);

                entity.Property(e => e.Dob).HasColumnName("DOB");

                entity.Property(e => e.DrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DR_ID");

                entity.Property(e => e.DscExpiryDate).HasColumnName("DSC_Expiry_Date");

                entity.Property(e => e.DscStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DSC_Status");

                entity.Property(e => e.FathersName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Kmptype).HasColumnName("KMPType");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MothersName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NegativeList).HasMaxLength(50);

                entity.Property(e => e.OnBoardOfAnyOtherBank).HasMaxLength(10);

                entity.Property(e => e.OtherDirectorShipInfo).IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode).HasMaxLength(100);

                entity.Property(e => e.Qualification).HasMaxLength(250);

                entity.Property(e => e.RbiwilfulDefaulter)
                    .HasMaxLength(50)
                    .HasColumnName("RBIWilfulDefaulter");

                entity.Property(e => e.RelationshipDetails)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(100);

                entity.Property(e => e.UserComments)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblAadhaarVaultLogger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAadhaarVaultLogger");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Request).IsUnicode(false);

                entity.Property(e => e.Response).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<TblActionStatusDptracker>(entity =>
            {
                entity.HasKey(e => e.WfstdpId);

                entity.ToTable("tblActionStatusDPTracker");

                entity.Property(e => e.WfstdpId).HasColumnName("WFSTDP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DpId)
                    .HasMaxLength(50)
                    .HasColumnName("DP_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblActionStatusDptrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstdpId);

                entity.ToTable("tblActionStatusDPTracker_History");

                entity.Property(e => e.WfstdpId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTDP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DpId)
                    .HasMaxLength(50)
                    .HasColumnName("DP_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblActionableMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblActionableMaster");

                entity.Property(e => e.AcDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AC_Description");

                entity.Property(e => e.AcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AC_ID");

                entity.Property(e => e.AcText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AC_Text");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblActivityStatus>(entity =>
            {
                entity.HasKey(e => e.AsId);

                entity.ToTable("tblActivityStatus");

                entity.Property(e => e.AsId).HasColumnName("AS_ID");

                entity.Property(e => e.ActivityStatus).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblAddonMatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAddonMatrix");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.XmlAddon)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Addon");
            });

            modelBuilder.Entity<TblAddressType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAddressType");

                entity.Property(e => e.AddressType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblAdminChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAdminChange");

                entity.Property(e => e.AcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AC_ID");

                entity.Property(e => e.AcValue)
                    .HasMaxLength(20)
                    .HasColumnName("AC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblAdminCleanUpAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAdminCleanUpActions");

                entity.Property(e => e.ActionFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ActionObjectId).HasColumnName("ActionObjectID");

                entity.Property(e => e.ActionObjectType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Operation).IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblAggregateExposureSourceSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAggregateExposureSourceSystem");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cif_id");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ExposureFbOs)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("exposure_fb_os");

                entity.Property(e => e.ExposureNfbOs)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("exposure_nfb_os");

                entity.Property(e => e.FbNodeDpdBucket)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd_bucket");

                entity.Property(e => e.GrossFbExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("gross_fb_exposure");

                entity.Property(e => e.GrossNfbExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("gross_nfb_exposure");

                entity.Property(e => e.GrossTotalExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("gross_total_exposure");

                entity.Property(e => e.NetFbExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("net_fb_exposure");

                entity.Property(e => e.NetNfbExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("net_nfb_exposure");

                entity.Property(e => e.NetTotalExposure)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("net_total_exposure");

                entity.Property(e => e.Nfb)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("nfb");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("report_date");

                entity.Property(e => e.TotalFb)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("total_fb");

                entity.Property(e => e.TotalOsInCrores)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("total_os_in_crores");
            });

            modelBuilder.Entity<TblAlertAndNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAlertAndNotifications");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");
            });

            modelBuilder.Entity<TblAnalysisConfigMaster>(entity =>
            {
                entity.HasKey(e => e.Anlcid);

                entity.ToTable("tblAnalysisConfigMaster");

                entity.Property(e => e.Anlcid).HasColumnName("ANLCID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.AnalysisNature).HasColumnName("Analysis_Nature");

                entity.Property(e => e.AnalysisStructure).HasColumnName("Analysis_Structure");

                entity.Property(e => e.Antypid).HasColumnName("ANTYPID");

                entity.Property(e => e.Level1Tabtypeid)
                    .HasMaxLength(5)
                    .HasColumnName("LEVEL1/TABTYPEID");

                entity.Property(e => e.Level2Tabsubtypid)
                    .HasMaxLength(10)
                    .HasColumnName("LEVEL2/TABSUBTYPID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_Id");

                entity.Property(e => e.Mappedfields)
                    .HasMaxLength(50)
                    .HasColumnName("MAPPEDFIELDS");

                entity.Property(e => e.Sortordersubtypid).HasColumnName("SORTORDERSUBTYPID");

                entity.Property(e => e.Sortordertypid).HasColumnName("SORTORDERTYPID");

                entity.Property(e => e.Tabname)
                    .HasMaxLength(100)
                    .HasColumnName("TABNAME");

                entity.Property(e => e.Tabsubtyp)
                    .HasMaxLength(200)
                    .HasColumnName("TABSUBTYP");

                entity.HasOne(d => d.Antyp)
                    .WithMany(p => p.TblAnalysisConfigMasters)
                    .HasForeignKey(d => d.Antypid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAnalysisConfigMaster_tblAnalysisType");
            });

            modelBuilder.Entity<TblAnalysisConfigMaster1307bkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAnalysisConfigMaster_1307bkp");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.AnalysisNature).HasColumnName("Analysis_Nature");

                entity.Property(e => e.AnalysisStructure).HasColumnName("Analysis_Structure");

                entity.Property(e => e.Anlcid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ANLCID");

                entity.Property(e => e.Antypid).HasColumnName("ANTYPID");

                entity.Property(e => e.Level1Tabtypeid)
                    .HasMaxLength(5)
                    .HasColumnName("LEVEL1/TABTYPEID");

                entity.Property(e => e.Level2Tabsubtypid)
                    .HasMaxLength(10)
                    .HasColumnName("LEVEL2/TABSUBTYPID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_Id");

                entity.Property(e => e.Mappedfields)
                    .HasMaxLength(50)
                    .HasColumnName("MAPPEDFIELDS");

                entity.Property(e => e.Sortordersubtypid).HasColumnName("SORTORDERSUBTYPID");

                entity.Property(e => e.Sortordertypid).HasColumnName("SORTORDERTYPID");

                entity.Property(e => e.Tabname)
                    .HasMaxLength(100)
                    .HasColumnName("TABNAME");

                entity.Property(e => e.Tabsubtyp)
                    .HasMaxLength(200)
                    .HasColumnName("TABSUBTYP");
            });

            modelBuilder.Entity<TblAnalysisTabMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAnalysisTabMaster");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.TabId).ValueGeneratedOnAdd();

                entity.Property(e => e.TabName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblAnalysisTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAnalysisTemplate");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Template).HasColumnName("TEMPLATE");

                entity.Property(e => e.TmpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMP_ID");

                entity.Property(e => e.TmpKey)
                    .HasMaxLength(50)
                    .HasColumnName("TMP_KEY");

                entity.Property(e => e.TmpType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TMP_TYPE");
            });

            modelBuilder.Entity<TblAnalysisType>(entity =>
            {
                entity.HasKey(e => e.Antypid);

                entity.ToTable("tblAnalysisType");

                entity.Property(e => e.Antypid).HasColumnName("ANTYPID");

                entity.Property(e => e.AnalysisType).HasMaxLength(1000);
            });

            modelBuilder.Entity<TblAppSectionConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAppSectionConfig");

                entity.Property(e => e.AppType).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblAppSectionMaster>(entity =>
            {
                entity.ToTable("tblAppSectionMaster");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.SectionDisplayName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblApplicationConfiguration>(entity =>
            {
                entity.HasKey(e => e.Sno);

                entity.ToTable("tblApplicationConfiguration");

                entity.Property(e => e.Sno).HasColumnName("SNO");

                entity.Property(e => e.CDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("C_Description");

                entity.Property(e => e.CKey)
                    .HasMaxLength(100)
                    .HasColumnName("C_Key");

                entity.Property(e => e.CValue).HasColumnName("C_Value");

                entity.Property(e => e.ConfigType).HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("CreatedBY");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.XmlSchema)
                    .IsUnicode(false)
                    .HasColumnName("XML_SCHEMA");
            });

            modelBuilder.Entity<TblApplicationConfiguration20180719>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblApplicationConfiguration_20180719");

                entity.Property(e => e.CDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("C_Description");

                entity.Property(e => e.CKey)
                    .HasMaxLength(100)
                    .HasColumnName("C_Key");

                entity.Property(e => e.CValue).HasColumnName("C_Value");

                entity.Property(e => e.ConfigType).HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("CreatedBY");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Sno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SNO");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<TblApplicationsForDepartmentHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblApplicationsForDepartment_HistoryRpt");

                entity.Property(e => e.AppId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.AppStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("App_Status");

                entity.Property(e => e.ApprovalAuthority)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_AUTHORITY");

                entity.Property(e => e.ApprovalMonth).HasColumnName("Approval_Month");

                entity.Property(e => e.BankingArrangement)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Banking_Arrangement");

                entity.Property(e => e.BsrActivity)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BSR_ACTIVITY");

                entity.Property(e => e.CifId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreditAnalyst)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Analyst");

                entity.Property(e => e.CurrentRole)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentStage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfLogin)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Login");

                entity.Property(e => e.DepartmentType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Industry)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.LoginAcceptanceDate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Login_Acceptance_date");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MSME_TYPE");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PanNo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PAN_No");

                entity.Property(e => e.Product)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Rm)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RM");

                entity.Property(e => e.SanctionDate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Sanction_Date");

                entity.Property(e => e.Sno).HasColumnName("SNO");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.TypeOfApplication)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Type_Of_Application");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UnitHead)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_HEAD");

                entity.Property(e => e.ZonalHead)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ZONAL_HEAD");

                entity.Property(e => e.Zone)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblApplicationsForDepartmentRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblApplicationsForDepartmentRpt");

                entity.Property(e => e.AppId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.AppStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("App_Status");

                entity.Property(e => e.ApprovalAuthority)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("APPROVAL_AUTHORITY");

                entity.Property(e => e.ApprovalMonth).HasColumnName("Approval_Month");

                entity.Property(e => e.BankingArrangement)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Banking_Arrangement");

                entity.Property(e => e.BsrActivity)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("BSR_ACTIVITY");

                entity.Property(e => e.CifId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.CreditAnalyst)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Analyst");

                entity.Property(e => e.CurrentRole)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentStage)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfLogin)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Login");

                entity.Property(e => e.DepartmentType)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Industry)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.LoginAcceptanceDate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Login_Acceptance_date");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MSME_TYPE");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PanNo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PAN_No");

                entity.Property(e => e.Product)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportDate).HasColumnType("datetime");

                entity.Property(e => e.Rm)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("RM");

                entity.Property(e => e.SanctionDate)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Sanction_Date");

                entity.Property(e => e.Sno).HasColumnName("SNO");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.TypeOfApplication)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Type_Of_Application");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UnitHead)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("UNIT_HEAD");

                entity.Property(e => e.ZonalHead)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ZONAL_HEAD");

                entity.Property(e => e.Zone)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblAqlist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAQList");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.PersonalDetails)
                    .IsUnicode(false)
                    .HasColumnName("Personal details");

                entity.Property(e => e.SrNo).IsUnicode(false);
            });

            modelBuilder.Entity<TblAssetType>(entity =>
            {
                entity.HasKey(e => e.AstypId);

                entity.ToTable("tblAssetType");

                entity.Property(e => e.AstypId).HasColumnName("ASTYP_ID");

                entity.Property(e => e.AssetTypeClassification).HasMaxLength(200);

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblAstarclassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblASTARClassification");

                entity.Property(e => e.AstrcDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ASTRC_Description");

                entity.Property(e => e.AstrcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ASTRC_ID");

                entity.Property(e => e.AstrcText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASTRC_Text");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblAuditedMethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAuditedMethod");

                entity.Property(e => e.AuditmethodName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUDITMETHOD_NAME");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblAuditorMaster>(entity =>
            {
                entity.HasKey(e => e.AdId);

                entity.ToTable("tblAuditorMaster");

                entity.Property(e => e.AdId).HasColumnName("AD_ID");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuditorGrade).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(15);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IsBankApproved).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<TblAuditorPartner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAuditorPartner");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MemberId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PartnerID");
            });

            modelBuilder.Entity<TblAuditorPartnerMapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAuditorPartnerMapper");

                entity.Property(e => e.AuditorId).HasColumnName("AuditorID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MapperId).ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");
            });

            modelBuilder.Entity<TblAutoGenDocument>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoGenDocuments");

                entity.Property(e => e.BalanceTransferTakeOver)
                    .IsUnicode(false)
                    .HasColumnName("BalanceTransfer_TakeOver");

                entity.Property(e => e.BusinessGroup).IsUnicode(false);

                entity.Property(e => e.Consitution).IsUnicode(false);

                entity.Property(e => e.DocumentName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentRemarks).IsUnicode(false);

                entity.Property(e => e.DocumentTemplateName)
                    .IsUnicode(false)
                    .HasColumnName("Document_template_Name");

                entity.Property(e => e.DocumentTypes).IsUnicode(false);

                entity.Property(e => e.ExecutorStatus).IsUnicode(false);

                entity.Property(e => e.ExtenstionCreation)
                    .IsUnicode(false)
                    .HasColumnName("Extenstion_Creation");

                entity.Property(e => e.FacilityType).IsUnicode(false);

                entity.Property(e => e.FormatStatus)
                    .IsUnicode(false)
                    .HasColumnName("Format_Status");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Lessee).IsUnicode(false);

                entity.Property(e => e.ProgramType).IsUnicode(false);

                entity.Property(e => e.ProposalType).IsUnicode(false);

                entity.Property(e => e.SecurityType).IsUnicode(false);

                entity.Property(e => e.Seniority).IsUnicode(false);

                entity.Property(e => e.SystemGenerated)
                    .IsUnicode(false)
                    .HasColumnName("System_Generated");
            });

            modelBuilder.Entity<TblAutoRenewalFileUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoRenewalFileUpload");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(500)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AverageIntServicingDelay)
                    .HasMaxLength(500)
                    .HasColumnName("Average_int_servicing_delay");

                entity.Property(e => e.AvgEmiServicingOfTl)
                    .HasMaxLength(500)
                    .HasColumnName("Avg_EMI_Servicing_Of_TL");

                entity.Property(e => e.BorrowerExposureUpto)
                    .HasMaxLength(500)
                    .HasColumnName("Borrower_Exposure_upto");

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .HasColumnName("Branch_Name");

                entity.Property(e => e.ChurningPer)
                    .HasMaxLength(500)
                    .HasColumnName("Churning_Per");

                entity.Property(e => e.Cluster).HasMaxLength(500);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditSummationsBothOdccCa)
                    .HasMaxLength(500)
                    .HasColumnName("Credit_Summations_both_ODCC_CA");

                entity.Property(e => e.CustId)
                    .HasMaxLength(500)
                    .HasColumnName("Cust_ID");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.DlodDp)
                    .HasMaxLength(500)
                    .HasColumnName("DLOD_DP");

                entity.Property(e => e.DrawingPower).HasMaxLength(500);

                entity.Property(e => e.GroupExposureUpto)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Exposure_upto");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IrregularTodAdhoc)
                    .HasMaxLength(500)
                    .HasColumnName("Irregular_TOD_Adhoc");

                entity.Property(e => e.LcBg)
                    .HasMaxLength(500)
                    .HasColumnName("LC_BG");

                entity.Property(e => e.LimitEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Limit_End_date");

                entity.Property(e => e.LimitStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Limit_Start_date");

                entity.Property(e => e.MaxDelayInEmiServicingOfTl)
                    .HasMaxLength(500)
                    .HasColumnName("Max_Delay_in_EMI_Servicing_of_TL");

                entity.Property(e => e.MaxIntServicingDelay)
                    .HasMaxLength(500)
                    .HasColumnName("Max_int_servicing_delay");

                entity.Property(e => e.Module).HasMaxLength(500);

                entity.Property(e => e.NoDevolvementInvocationStatus)
                    .HasMaxLength(500)
                    .HasColumnName("No_Devolvement_invocation_status");

                entity.Property(e => e.NoOfIwChequeReturn)
                    .HasMaxLength(500)
                    .HasColumnName("No_of_IW_Cheque_Return");

                entity.Property(e => e.OdCcSanctionLimit)
                    .HasMaxLength(500)
                    .HasColumnName("OD_CC_Sanction_Limit");

                entity.Property(e => e.Odcc)
                    .HasMaxLength(500)
                    .HasColumnName("ODCC");

                entity.Property(e => e.OtherOd)
                    .HasMaxLength(500)
                    .HasColumnName("OtherOD");

                entity.Property(e => e.OverdrawnDays)
                    .HasMaxLength(500)
                    .HasColumnName("Overdrawn_Days");

                entity.Property(e => e.Pos)
                    .HasMaxLength(500)
                    .HasColumnName("POS");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(500)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(500)
                    .HasColumnName("Program_Name");

                entity.Property(e => e.Region).HasMaxLength(500);

                entity.Property(e => e.RiskHighlighted)
                    .HasMaxLength(500)
                    .HasColumnName("Risk_Highlighted");

                entity.Property(e => e.TlPos)
                    .HasMaxLength(500)
                    .HasColumnName("TL_POS");

                entity.Property(e => e.TotalExposure)
                    .HasMaxLength(500)
                    .HasColumnName("Total_Exposure");

                entity.Property(e => e.UtilizationOfLimit).HasMaxLength(500);

                entity.Property(e => e.WfstarId).HasColumnName("WFSTAR_ID");
            });

            modelBuilder.Entity<TblAutoRenewalFileUploadComputation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoRenewalFileUploadComputation");

                entity.Property(e => e.CpApprovedLimit)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_ApprovedLimit");

                entity.Property(e => e.CpChurningTurnOver)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_Churning_TurnOver");

                entity.Property(e => e.CpCollateralTotalValue)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_Collateral_TotalValue");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CustId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CUST_ID");

                entity.Property(e => e.EAccountsRenewed)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AccountsRenewed");

                entity.Property(e => e.EAverageEmiservicingofTl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AverageEMIServicingofTL");

                entity.Property(e => e.EAverageInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AverageInterestServicing");

                entity.Property(e => e.EBankingScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_BankingScore");

                entity.Property(e => e.EBorrowerTotalExposure)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_BorrowerTotalExposure");

                entity.Property(e => e.EChurning)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_Churning");

                entity.Property(e => e.ECollateralCoverage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_CollateralCoverage");

                entity.Property(e => e.EGroupTotalExposure)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_GroupTotalExposure");

                entity.Property(e => e.EInwardReturn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_InwardReturn");

                entity.Property(e => e.ELimitUtilization)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_LimitUtilization");

                entity.Property(e => e.EManualEligibility)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_ManualEligibility");

                entity.Property(e => e.EMaxEmiservicingofTl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_MaxEMIServicingofTL");

                entity.Property(e => e.EMaxInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_MaxInterestServicing");

                entity.Property(e => e.ENoDevolvementInvocation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_NoDevolvement_Invocation");

                entity.Property(e => e.ENoIrregularTodAdhoc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_No_Irregular_TOD_Adhoc");

                entity.Property(e => e.EOverallEligibility)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_OverallEligibility");

                entity.Property(e => e.EOverdrawnDays)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_OverdrawnDays");

                entity.Property(e => e.EPostDisbVintage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_PostDisbVintage");

                entity.Property(e => e.FuId).HasColumnName("FU_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Program)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SAverageInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_AverageInterestServicing");

                entity.Property(e => e.SAverageLimitUtilizationLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_AverageLimitUtilizationLevel");

                entity.Property(e => e.SChurningAtCustomerLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_ChurningAtCustomerLevel");

                entity.Property(e => e.SInwardChequeReturns)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_InwardChequeReturns");

                entity.Property(e => e.SOverallScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_OverallScore");

                entity.Property(e => e.WfstarId).HasColumnName("WFSTAR_ID");
            });

            modelBuilder.Entity<TblAutoRenewalFileUploadComputationHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoRenewalFileUploadComputation_History");

                entity.Property(e => e.CpApprovedLimit)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_ApprovedLimit");

                entity.Property(e => e.CpChurningTurnOver)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_Churning_TurnOver");

                entity.Property(e => e.CpCollateralTotalValue)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CP_Collateral_TotalValue");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CustId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CUST_ID");

                entity.Property(e => e.EAccountsRenewed)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AccountsRenewed");

                entity.Property(e => e.EAverageEmiservicingofTl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AverageEMIServicingofTL");

                entity.Property(e => e.EAverageInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_AverageInterestServicing");

                entity.Property(e => e.EBankingScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_BankingScore");

                entity.Property(e => e.EBorrowerTotalExposure)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_BorrowerTotalExposure");

                entity.Property(e => e.EChurning)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_Churning");

                entity.Property(e => e.ECollateralCoverage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_CollateralCoverage");

                entity.Property(e => e.EGroupTotalExposure)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_GroupTotalExposure");

                entity.Property(e => e.EInwardReturn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_InwardReturn");

                entity.Property(e => e.ELimitUtilization)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_LimitUtilization");

                entity.Property(e => e.EManualEligibility)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_ManualEligibility");

                entity.Property(e => e.EMaxEmiservicingofTl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_MaxEMIServicingofTL");

                entity.Property(e => e.EMaxInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_MaxInterestServicing");

                entity.Property(e => e.ENoDevolvementInvocation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_NoDevolvement_Invocation");

                entity.Property(e => e.ENoIrregularTodAdhoc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_No_Irregular_TOD_Adhoc");

                entity.Property(e => e.EOverallEligibility)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_OverallEligibility");

                entity.Property(e => e.EOverdrawnDays)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_OverdrawnDays");

                entity.Property(e => e.EPostDisbVintage)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("E_PostDisbVintage");

                entity.Property(e => e.FuId).HasColumnName("FU_ID");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Program)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SAverageInterestServicing)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_AverageInterestServicing");

                entity.Property(e => e.SAverageLimitUtilizationLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_AverageLimitUtilizationLevel");

                entity.Property(e => e.SChurningAtCustomerLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_ChurningAtCustomerLevel");

                entity.Property(e => e.SInwardChequeReturns)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_InwardChequeReturns");

                entity.Property(e => e.SOverallScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("S_OverallScore");

                entity.Property(e => e.WfstarId).HasColumnName("WFSTAR_ID");
            });

            modelBuilder.Entity<TblAutoRenewalFileUploadHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoRenewalFileUpload_History");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(500)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AverageIntServicingDelay)
                    .HasMaxLength(500)
                    .HasColumnName("Average_int_servicing_delay");

                entity.Property(e => e.AvgEmiServicingOfTl)
                    .HasMaxLength(500)
                    .HasColumnName("Avg_EMI_Servicing_Of_TL");

                entity.Property(e => e.BorrowerExposureUpto)
                    .HasMaxLength(500)
                    .HasColumnName("Borrower_Exposure_upto");

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .HasColumnName("Branch_Name");

                entity.Property(e => e.ChurningPer)
                    .HasMaxLength(500)
                    .HasColumnName("Churning_Per");

                entity.Property(e => e.Cluster).HasMaxLength(500);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditSummationsBothOdccCa)
                    .HasMaxLength(500)
                    .HasColumnName("Credit_Summations_both_ODCC_CA");

                entity.Property(e => e.CustId)
                    .HasMaxLength(500)
                    .HasColumnName("Cust_ID");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.DlodDp)
                    .HasMaxLength(500)
                    .HasColumnName("DLOD_DP");

                entity.Property(e => e.DrawingPower).HasMaxLength(500);

                entity.Property(e => e.GroupExposureUpto)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Exposure_upto");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IrregularTodAdhoc)
                    .HasMaxLength(500)
                    .HasColumnName("Irregular_TOD_Adhoc");

                entity.Property(e => e.LcBg)
                    .HasMaxLength(500)
                    .HasColumnName("LC_BG");

                entity.Property(e => e.LimitEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Limit_End_date");

                entity.Property(e => e.LimitStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Limit_Start_date");

                entity.Property(e => e.MaxDelayInEmiServicingOfTl)
                    .HasMaxLength(500)
                    .HasColumnName("Max_Delay_in_EMI_Servicing_of_TL");

                entity.Property(e => e.MaxIntServicingDelay)
                    .HasMaxLength(500)
                    .HasColumnName("Max_int_servicing_delay");

                entity.Property(e => e.Module).HasMaxLength(500);

                entity.Property(e => e.NoDevolvementInvocationStatus)
                    .HasMaxLength(500)
                    .HasColumnName("No_Devolvement_invocation_status");

                entity.Property(e => e.NoOfIwChequeReturn)
                    .HasMaxLength(500)
                    .HasColumnName("No_of_IW_Cheque_Return");

                entity.Property(e => e.OdCcSanctionLimit)
                    .HasMaxLength(500)
                    .HasColumnName("OD_CC_Sanction_Limit");

                entity.Property(e => e.Odcc)
                    .HasMaxLength(500)
                    .HasColumnName("ODCC");

                entity.Property(e => e.OtherOd)
                    .HasMaxLength(500)
                    .HasColumnName("OtherOD");

                entity.Property(e => e.OverdrawnDays)
                    .HasMaxLength(500)
                    .HasColumnName("Overdrawn_Days");

                entity.Property(e => e.Pos)
                    .HasMaxLength(500)
                    .HasColumnName("POS");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(500)
                    .HasColumnName("Product_Name");

                entity.Property(e => e.ProgramName)
                    .HasMaxLength(500)
                    .HasColumnName("Program_Name");

                entity.Property(e => e.Region).HasMaxLength(500);

                entity.Property(e => e.RiskHighlighted)
                    .HasMaxLength(500)
                    .HasColumnName("Risk_Highlighted");

                entity.Property(e => e.TlPos)
                    .HasMaxLength(500)
                    .HasColumnName("TL_POS");

                entity.Property(e => e.TotalExposure)
                    .HasMaxLength(500)
                    .HasColumnName("Total_Exposure");

                entity.Property(e => e.UtilizationOfLimit).HasMaxLength(500);

                entity.Property(e => e.WfstarId).HasColumnName("WFSTAR_ID");
            });

            modelBuilder.Entity<TblAutoRenewalId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblAutoRenewalID");

                entity.Property(e => e.ArId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AR_ID");

                entity.Property(e => e.ArValue)
                    .HasMaxLength(20)
                    .HasColumnName("AR_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblBankType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBankType");

                entity.Property(e => e.BankType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblBankValuesMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBankValuesMaster");

                entity.Property(e => e.AuValueCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AU_VALUE_CODE");

                entity.Property(e => e.AuValueName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AU_VALUE_NAME");

                entity.Property(e => e.BuId).HasColumnName("BU_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RegnId).HasColumnName("REGN_ID");
            });

            modelBuilder.Entity<TblBankingStatementAnalysis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBankingStatementAnalysis");

                entity.Property(e => e.AccHolderName).IsUnicode(false);

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AccountType).HasColumnName("Account_Type");

                entity.Property(e => e.Analysis).IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BankName).IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Doc_ID");

                entity.Property(e => e.FileData).IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_Code");

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PeriodEnd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Period_End");

                entity.Property(e => e.PeriodStart)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Period_Start");

                entity.Property(e => e.RelatedAccounts).IsUnicode(false);

                entity.Property(e => e.RelatedPartyKeywords).IsUnicode(false);

                entity.Property(e => e.RequestId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Request_ID");

                entity.Property(e => e.ServiceStatus)
                    .IsUnicode(false)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblBankingStatementAnalysis20210308>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBankingStatementAnalysis_20210308");

                entity.Property(e => e.AccHolderName).IsUnicode(false);

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AccountType).HasColumnName("Account_Type");

                entity.Property(e => e.Analysis).IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BankName).IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Doc_ID");

                entity.Property(e => e.FileData).IsUnicode(false);

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_Code");

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.PeriodEnd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Period_End");

                entity.Property(e => e.PeriodStart)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Period_Start");

                entity.Property(e => e.RelatedAccounts).IsUnicode(false);

                entity.Property(e => e.RelatedPartyKeywords).IsUnicode(false);

                entity.Property(e => e.RequestId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Request_ID");

                entity.Property(e => e.ServiceStatus)
                    .IsUnicode(false)
                    .HasColumnName("Service_Status");

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblBanksMaster>(entity =>
            {
                entity.HasKey(e => e.BnkId);

                entity.ToTable("tblBanksMaster");

                entity.Property(e => e.BnkId).HasColumnName("BNK_ID");

                entity.Property(e => e.BankName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblBaselEntityType>(entity =>
            {
                entity.HasKey(e => e.Bslid)
                    .HasName("PK_tblBaseEntityType");

                entity.ToTable("tblBaselEntityType");

                entity.Property(e => e.Bslid).HasColumnName("BSLID");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblBifr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBIFR");

                entity.Property(e => e.CaseNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Case No");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Company Name");

                entity.Property(e => e.Year)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("year");
            });

            modelBuilder.Entity<TblBlockedIpDetail>(entity =>
            {
                entity.HasKey(e => e.Bipid);

                entity.ToTable("tblBlockedIpDetails");

                entity.Property(e => e.Bipid).HasColumnName("BIPID");

                entity.Property(e => e.BlockedDate).HasColumnType("datetime");

                entity.Property(e => e.IpAddress).HasMaxLength(50);

                entity.Property(e => e.UnBlockedBy).HasMaxLength(500);

                entity.Property(e => e.UnBlockedDate).HasColumnType("datetime");

                entity.Property(e => e.UserId).HasMaxLength(500);
            });

            modelBuilder.Entity<TblBranch>(entity =>
            {
                entity.HasKey(e => e.BrId);

                entity.ToTable("tblBranch");

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.BranchCity).HasMaxLength(25);

                entity.Property(e => e.BranchName).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblBsastatementUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBSAStatementUpload");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AccountType).HasColumnName("Account_Type");

                entity.Property(e => e.AggDelayInterestPaymentDays).HasColumnName("Agg_Delay_Interest_Payment_Days");

                entity.Property(e => e.AtmWithdrawalsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AverageEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("AverageEODBalance");

                entity.Property(e => e.AvgLimitUtilization)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Avg_Limit_Utilization");

                entity.Property(e => e.AvgLimitUtilizationPer)
                    .HasColumnType("decimal(38, 16)")
                    .HasColumnName("Avg_Limit_Utilization_Per")
                    .HasComputedColumnSql("(case when [Existing_Limit]>(0) then (isnull([Avg_Limit_Utilization],(0))*(100))/[Existing_Limit] else (0) end)", false);

                entity.Property(e => e.BalanceOn15th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BalanceOn25th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BalanceOn5th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CashDepositsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CashWithdrawalsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeBounceInwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeBounceOutwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeDepositsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeIssuedAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditSummationPer)
                    .HasColumnType("decimal(38, 16)")
                    .HasColumnName("Credit_Summation_Per")
                    .HasComputedColumnSql("(case when [Existing_Limit]>(0) then (isnull([NetCreditTransactionsAmount],(0))*(100))/[Existing_Limit] else (0) end)", false);

                entity.Property(e => e.CreditTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DebitTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ExistingLimit)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Existing_Limit");

                entity.Property(e => e.FuId).HasColumnName("FU_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_Code");

                entity.Property(e => e.InwardChequeReturnPer)
                    .HasColumnType("numeric(26, 12)")
                    .HasColumnName("Inward_Cheque_Return_Per")
                    .HasComputedColumnSql("(case when [NoOfChequeIssued]>(0) then (isnull([NoOfChequeBounceInward],(0))*(100.0))/[NoOfChequeIssued] else (0) end)", false);

                entity.Property(e => e.LatestFuId).HasColumnName("LatestFU_ID");

                entity.Property(e => e.LimitOverdrawnDays).HasColumnName("Limit_Overdrawn_Days");

                entity.Property(e => e.LoanDisbursalAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("MaximumEODBalance");

                entity.Property(e => e.MinimumEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("MinimumEODBalance");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MonthlySales)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Monthly_Sales");

                entity.Property(e => e.NetCreditTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NetDebitTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NoInwardChequeReturn).HasColumnName("No_Inward_Cheque_Return");

                entity.Property(e => e.NoOfAtmwithdrawals).HasColumnName("NoOfATMWithdrawals");

                entity.Property(e => e.OutwardChequeReturnPer)
                    .HasColumnName("Outward_Cheque_Return_Per")
                    .HasComputedColumnSql("(case when [NoOfChequeDeposits]>(0) then (isnull([NoOfChequeBounceOutward],(0))*(100))/[NoOfChequeDeposits] else (0) end)", false);

                entity.Property(e => e.PaymentBounceInwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PaymentBounceOutwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PeakOverdrawnAmount)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Peak_Overdrawn_Amount");

                entity.Property(e => e.SalaryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UpdateSource)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Update_Source");
            });

            modelBuilder.Entity<TblBsastatementUpload20210308>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBSAStatementUpload_20210308");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_No");

                entity.Property(e => e.AccountType).HasColumnName("Account_Type");

                entity.Property(e => e.AggDelayInterestPaymentDays).HasColumnName("Agg_Delay_Interest_Payment_Days");

                entity.Property(e => e.AtmWithdrawalsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.AverageEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("AverageEODBalance");

                entity.Property(e => e.AvgLimitUtilization)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Avg_Limit_Utilization");

                entity.Property(e => e.BalanceOn15th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BalanceOn25th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.BalanceOn5th).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CashDepositsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CashWithdrawalsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeBounceInwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeBounceOutwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeDepositsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ChequeIssuedAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditSummationPer)
                    .HasColumnType("decimal(38, 16)")
                    .HasColumnName("Credit_Summation_Per");

                entity.Property(e => e.CreditTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.DebitTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ExistingLimit)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Existing_Limit");

                entity.Property(e => e.FuId).HasColumnName("FU_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_Code");

                entity.Property(e => e.InwardChequeReturnPer).HasColumnName("Inward_Cheque_Return_Per");

                entity.Property(e => e.LatestFuId).HasColumnName("LatestFU_ID");

                entity.Property(e => e.LimitOverdrawnDays).HasColumnName("Limit_Overdrawn_Days");

                entity.Property(e => e.LoanDisbursalAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.MaximumEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("MaximumEODBalance");

                entity.Property(e => e.MinimumEodbalance)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("MinimumEODBalance");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MonthlySales)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Monthly_Sales");

                entity.Property(e => e.NetCreditTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NetDebitTransactionsAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.NoInwardChequeReturn).HasColumnName("No_Inward_Cheque_Return");

                entity.Property(e => e.NoOfAtmwithdrawals).HasColumnName("NoOfATMWithdrawals");

                entity.Property(e => e.OutwardChequeReturnPer).HasColumnName("Outward_Cheque_Return_Per");

                entity.Property(e => e.PaymentBounceInwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PaymentBounceOutwardAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.PeakOverdrawnAmount)
                    .HasColumnType("decimal(18, 5)")
                    .HasColumnName("Peak_Overdrawn_Amount");

                entity.Property(e => e.SalaryAmount).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.UpdateSource)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Update_Source");
            });

            modelBuilder.Entity<TblBusinessClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBusinessClass");

                entity.Property(e => e.BcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BC_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblBusinessClassRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBusinessClassRoles");

                entity.Property(e => e.BcId).HasColumnName("BC_ID");

                entity.Property(e => e.BrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BR_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");
            });

            modelBuilder.Entity<TblBusinessClassUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblBusinessClassUsers");

                entity.Property(e => e.BcId).HasColumnName("BC_ID");

                entity.Property(e => e.BuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BU_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblCalender>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCalender");

                entity.Property(e => e.CDate)
                    .HasColumnType("datetime")
                    .HasColumnName("cDate");

                entity.Property(e => e.CalId).HasColumnName("calID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsHoliday).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWeekend).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblCautionAdvice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCautionAdvice");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.CautionAdviceNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Caution Advice No");

                entity.Property(e => e.CreditFacility)
                    .IsUnicode(false)
                    .HasColumnName("Credit Facility");

                entity.Property(e => e.Irregularity)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.NameOfBorrower)
                    .IsUnicode(false)
                    .HasColumnName("Name of Borrower");
            });

            modelBuilder.Entity<TblCbeconomicSector>(entity =>
            {
                entity.HasKey(e => e.Cbesid);

                entity.ToTable("tblCBEconomicSector");

                entity.Property(e => e.Cbesid).HasColumnName("CBESID");

                entity.Property(e => e.CbeconomicSectorCode)
                    .HasMaxLength(50)
                    .HasColumnName("CBEconomicSectorCode");

                entity.Property(e => e.CbeconomicSectorName)
                    .IsUnicode(false)
                    .HasColumnName("CBEconomicSectorName");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.ShortDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCbrbclassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCBRBClassification");

                entity.Property(e => e.Cbrbid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CBRBID");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<TblCbsexposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCBSExposures");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AvailableBalance)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CredProId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerFullName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerRelationship)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisbAmount)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DlodFlag)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DLOD_flag");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InstallamentFrequency)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentsOverDue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InstallmentsReceivedAdv)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LimitAmt)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LineEndDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LineId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Line_id");

                entity.Property(e => e.LineStartDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.LoanTerm)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MainlineId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MainlineID");

                entity.Property(e => e.Mainlinedesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NextInstallmentDue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrincipalBalance)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProdCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCategory)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SanctionedAmount)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceSource)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SERVICE_SOURCE");

                entity.Property(e => e.TotalNoOfInstallmentsReceived)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOutstandings)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCcbgMisapplicationTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISApplicationTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalysts).HasMaxLength(400);

                entity.Property(e => e.CreditFirstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_First_Date");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustTrackIdout).HasColumnName("CustTrackIDOut");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday_or_Weekends");

                entity.Property(e => e.Indebtnessamount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OverRideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedRating)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.ReturnedToBusinessCount).HasColumnName("Returned_To_Business_Count");

                entity.Property(e => e.ScoreGrade)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.UnitHeadName)
                    .HasMaxLength(302)
                    .HasColumnName("UnitHead_Name");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.ZonalHeadName)
                    .HasMaxLength(302)
                    .HasColumnName("ZonalHead_Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCcbgMisapplicationTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISApplicationTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApplicationClosedDate)
                    .HasColumnType("date")
                    .HasColumnName("Application_Closed_Date");

                entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovingAuthority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalysts).HasMaxLength(400);

                entity.Property(e => e.CreditFirstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Credit_First_Date");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustTrackIdout).HasColumnName("CustTrackIDOut");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday_or_Weekends");

                entity.Property(e => e.Indebtnessamount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OverRideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedRating)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.ReturnedToBusinessCount).HasColumnName("Returned_To_Business_Count");

                entity.Property(e => e.ScoreGrade)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.UnitHeadName)
                    .HasMaxLength(302)
                    .HasColumnName("UnitHead_Name");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.ZonalHeadName)
                    .HasMaxLength(302)
                    .HasColumnName("ZonalHead_Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCcbgMiscounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISCounterparty");

                entity.Property(e => e.BsrActivity)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity");

                entity.Property(e => e.BuId).HasColumnName("BU_ID");

                entity.Property(e => e.BusinessType).HasColumnName("Business_Type");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CtptCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_City");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_STATE");

                entity.Property(e => e.CtptStateCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_STATE_CODE");

                entity.Property(e => e.ExternalRating)
                    .HasMaxLength(151)
                    .IsUnicode(false);

                entity.Property(e => e.FinacleCifId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FINACLE_CIF_ID");

                entity.Property(e => e.GrmId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GRM_ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Type");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PanNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN_NO");

                entity.Property(e => e.RegionalHead)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Regional_Head");

                entity.Property(e => e.Rm)
                    .HasMaxLength(50)
                    .HasColumnName("RM");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblCcbgMiscounterpartyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISCounterpartyHistory");

                entity.Property(e => e.BsrActivity)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity");

                entity.Property(e => e.BuId).HasColumnName("BU_ID");

                entity.Property(e => e.BusinessType).HasColumnName("Business_Type");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CtptCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_City");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_STATE");

                entity.Property(e => e.CtptStateCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_STATE_CODE");

                entity.Property(e => e.ExternalRating)
                    .HasMaxLength(151)
                    .IsUnicode(false);

                entity.Property(e => e.FinacleCifId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FINACLE_CIF_ID");

                entity.Property(e => e.GrmId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GRM_ID");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Type");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PanNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN_NO");

                entity.Property(e => e.RegionalHead)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Regional_Head");

                entity.Property(e => e.Rm)
                    .HasMaxLength(50)
                    .HasColumnName("RM");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblCcbgMisfacilityTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISFacilityTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApprovedLimitAmount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ApprovedLimitAmountInr)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ApprovedLimitAmount_INR");

                entity.Property(e => e.ApprovedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BtFlag).HasColumnName("BT_FLAG");

                entity.Property(e => e.BtbankId).HasColumnName("BTBankID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ProposedLimitAmount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ProposedLimitAmountInr)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ProposedLimitAmount_INR");

                entity.Property(e => e.ProposedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblCcbgMisfacilityTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCBG_MISFacilityTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApprovedLimitAmount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ApprovedLimitAmountInr)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ApprovedLimitAmount_INR");

                entity.Property(e => e.ApprovedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BtFlag).HasColumnName("BT_FLAG");

                entity.Property(e => e.BtbankId).HasColumnName("BTBankID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ProposedLimitAmount).HasColumnType("numeric(28, 4)");

                entity.Property(e => e.ProposedLimitAmountInr)
                    .HasColumnType("decimal(28, 8)")
                    .HasColumnName("ProposedLimitAmount_INR");

                entity.Property(e => e.ProposedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblCcfmatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCCFMatrix");

                entity.Property(e => e.Ccfmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CCFMID");

                entity.Property(e => e.CcfperYear)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCFPerYear");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.T24pid).HasColumnName("T24PID");
            });

            modelBuilder.Entity<TblCfr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCFR");

                entity.Property(e => e.AmountInvolvedRsInMn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Amount_Involved_(Rs_in_mn)");

                entity.Property(e => e.AreaOfOperation)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Area_of_Operation");

                entity.Property(e => e.BriefHistory)
                    .IsUnicode(false)
                    .HasColumnName("Brief_History");

                entity.Property(e => e.DateOfReporting)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Reporting");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FraudCaseNo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Fraud_Case_No");

                entity.Property(e => e.ModusOperandi)
                    .IsUnicode(false)
                    .HasColumnName("Modus_Operandi");

                entity.Property(e => e.NameOfBank)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Name_of_Bank");

                entity.Property(e => e.NameOfPerpetrator)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name_of_Perpetrator");

                entity.Property(e => e.NatureOfFraud)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Nature_of_Fraud");

                entity.Property(e => e.PanOfPerpetrator)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAN_of_Perpetrator");

                entity.Property(e => e.PartyAccountName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Party_Account_Name");

                entity.Property(e => e.PerpetratorAccountAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Perpetrator_Account_Address");

                entity.Property(e => e.ProprietorPartnerDirectorAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Proprietor_Partner_Director_Address");

                entity.Property(e => e.ProprietorPartnerDirectorName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Proprietor_Partner_Director_Name");

                entity.Property(e => e.TypeOfFraud)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Type_of_Fraud");
            });

            modelBuilder.Entity<TblChkListNsf25to1Cr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblChkListNSF25To1Cr");

                entity.Property(e => e.Bank)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfDissemination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DirectorNameAndDin)
                    .IsUnicode(false)
                    .HasColumnName("DirectorNameAndDIN");

                entity.Property(e => e.OutStandingAmount)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Quarter)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblChkListNsfabove1Cr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblChkListNSFAbove1Cr");

                entity.Property(e => e.Bank)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfDissemination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DirectorNameAndDin)
                    .IsUnicode(false)
                    .HasColumnName("DirectorNameAndDIN");

                entity.Property(e => e.OutStandingAmount)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Quarter)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblChkListSf25to1Cr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblChkListSF25To1Cr");

                entity.Property(e => e.Bank)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DirectorNameAndDin)
                    .IsUnicode(false)
                    .HasColumnName("DirectorNameAndDIN");

                entity.Property(e => e.OutStandingAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quarter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAddress).IsUnicode(false);
            });

            modelBuilder.Entity<TblChkListSfabove1Cr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblChkListSFAbove1Cr");

                entity.Property(e => e.Bank)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DirectorNameAndDin)
                    .IsUnicode(false)
                    .HasColumnName("DirectorNameAndDIN");

                entity.Property(e => e.OutStandingAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quarter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RegisteredAddress).IsUnicode(false);
            });

            modelBuilder.Entity<TblCity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCity");

                entity.Property(e => e.CityName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtId).HasColumnName("CT_ID");

                entity.Property(e => e.CyId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CY_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.StId).HasColumnName("ST_ID");
            });

            modelBuilder.Entity<TblCndmowfactionStatusConditionsItemsTracker>(entity =>
            {
                entity.HasKey(e => e.WfstcmoiId);

                entity.ToTable("tblCNDMOWFActionStatusConditionsItemsTracker");

                entity.Property(e => e.WfstcmoiId).HasColumnName("WFSTCMOI_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CndmoiId)
                    .HasMaxLength(1000)
                    .HasColumnName("CNDMOI_ID");

                entity.Property(e => e.ConditionId)
                    .HasMaxLength(1000)
                    .HasColumnName("Condition_ID");

                entity.Property(e => e.ConditionType).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SchId).HasColumnName("SCH_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblCndmowfactionStatusConditionsItemsTrackerHistory>(entity =>
            {
                entity.ToTable("tblCNDMOWFActionStatusConditionsItemsTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CndmoiId)
                    .HasMaxLength(1000)
                    .HasColumnName("CNDMOI_ID");

                entity.Property(e => e.ConditionId)
                    .HasMaxLength(1000)
                    .HasColumnName("Condition_ID");

                entity.Property(e => e.ConditionType).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SchId).HasColumnName("SCH_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstcmoiId).HasColumnName("WFSTCMOI_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblCndmowfactionStatusConditionsTracker>(entity =>
            {
                entity.HasKey(e => e.WfstcmoId);

                entity.ToTable("tblCNDMOWFActionStatusConditionsTracker");

                entity.Property(e => e.WfstcmoId).HasColumnName("WFSTCMO_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CndmoId)
                    .HasMaxLength(1000)
                    .HasColumnName("CNDMO_ID");

                entity.Property(e => e.ConditionType).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblCndmowfactionStatusConditionsTrackerHistory>(entity =>
            {
                entity.ToTable("tblCNDMOWFActionStatusConditionsTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CndmoId)
                    .HasMaxLength(1000)
                    .HasColumnName("CNDMO_ID");

                entity.Property(e => e.ConditionType).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstcmoId).HasColumnName("WFSTCMO_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblCollateralUploadStatus>(entity =>
            {
                entity.HasKey(e => e.SId);

                entity.ToTable("tblCollateralUploadStatus");

                entity.Property(e => e.SId).HasColumnName("S_ID");

                entity.Property(e => e.FileStatus)
                    .HasMaxLength(20)
                    .HasColumnName("File_Status");

                entity.Property(e => e.FileType)
                    .HasMaxLength(100)
                    .HasColumnName("File_Type");

                entity.Property(e => e.Record).HasMaxLength(1000);

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Transfer_Date");
            });

            modelBuilder.Entity<TblCommitteeMeetingScheduler>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCommitteeMeetingScheduler");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasPrecision(3);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MeetingDetails).HasColumnType("xml");

                entity.Property(e => e.MeetingId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MeetingID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasPrecision(3);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCommitteeMeetingSchedulerParent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCommitteeMeetingSchedulerParent");

                entity.Property(e => e.CommitteeSet)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MeetingDetails).HasColumnType("xml");

                entity.Property(e => e.MeetingId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MeetingID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCompGroupId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCompGroupID");

                entity.Property(e => e.CompgrpId).HasColumnName("COMPGRP_ID");

                entity.Property(e => e.CompgrpValue)
                    .HasMaxLength(20)
                    .HasColumnName("COMPGRP_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblCompositeGroupConstitution>(entity =>
            {
                entity.HasKey(e => e.CgcId);

                entity.ToTable("tblCompositeGroupConstitution");

                entity.Property(e => e.CgcId).HasColumnName("CGC_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.GroupCtptId).HasColumnName("GroupCTPT_ID");

                entity.Property(e => e.GroupCtptName)
                    .HasMaxLength(500)
                    .HasColumnName("GroupCTPT_Name");

                entity.Property(e => e.MemberCtptId).HasColumnName("MemberCTPT_ID");
            });

            modelBuilder.Entity<TblConditionItemsStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConditionItemsStatusRpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CndHeader)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CND_HEADER");

                entity.Property(e => e.CndText)
                    .IsUnicode(false)
                    .HasColumnName("CND_TEXT");

                entity.Property(e => e.CndUniqueId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CND_UniqueID");

                entity.Property(e => e.ComplianceStatus)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeferralType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DeferralsDueDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ItemGenerationDate).HasColumnType("datetime");

                entity.Property(e => e.ItemSubType).HasColumnName("Item_SubType");

                entity.Property(e => e.ItemUniqueId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Item_UniqueID");

                entity.Property(e => e.SchId).HasColumnName("SCH_ID");

                entity.Property(e => e.SchItem)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCH_Item");

                entity.Property(e => e.ScheduleBeginningDate).HasColumnType("datetime");

                entity.Property(e => e.SiXmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("SI_XML_Details");

                entity.Property(e => e.StText)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ST_Text");

                entity.Property(e => e.TraitmsDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TRAITMS_Desc");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblConditionRootStatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConditionRootStatusRpt");

                entity.Property(e => e.Applicability)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CmMonitoringFrequency)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CM_MonitoringFrequency");

                entity.Property(e => e.CmPrePost)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CM_PrePost");

                entity.Property(e => e.ConditionCategory)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DefermentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DeferralType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsCommunicated)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsComplied)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MonitoringFrequency)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrePost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StdheaderText)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("STDHeaderText");

                entity.Property(e => e.Text).IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblConditionType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConditionType");

                entity.Property(e => e.ConditionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConditionID");

                entity.Property(e => e.ConditionType).HasMaxLength(50);
            });

            modelBuilder.Entity<TblConditionsItemsUniqueId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConditionsItemsUniqueID");

                entity.Property(e => e.CndiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CNDI_ID");

                entity.Property(e => e.CndiValue)
                    .HasMaxLength(20)
                    .HasColumnName("CNDI_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblConditionsUniqueId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConditionsUniqueID");

                entity.Property(e => e.CndId).HasColumnName("CND_ID");

                entity.Property(e => e.CndValue)
                    .HasMaxLength(20)
                    .HasColumnName("CND_Value")
                    .IsFixedLength();

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");
            });

            modelBuilder.Entity<TblConfigurationsChangeLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblConfigurationsChangeLogs");

                entity.Property(e => e.ChangeDetails)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("Change_Details");

                entity.Property(e => e.ChangeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Change_Type");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LogCreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Log_CreatedBy");

                entity.Property(e => e.LogCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_CreatedOn");

                entity.Property(e => e.LogModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Log_ModifiedBy");

                entity.Property(e => e.LogModifiedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("Log_ModifiedOn");

                entity.Property(e => e.NewValue)
                    .IsUnicode(false)
                    .HasColumnName("NEW_VALUE");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.OldValue)
                    .IsUnicode(false)
                    .HasColumnName("OLD_VALUE");
            });

            modelBuilder.Entity<TblCounterparty>(entity =>
            {
                entity.HasKey(e => e.CtptId);

                entity.ToTable("tblCounterparty");

                entity.HasIndex(e => e.CtptId, "NCIndex_tblCounterparty_CTPT_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.AsId).HasColumnName("AS_ID");

                entity.Property(e => e.Astarclassification).HasColumnName("ASTARClassification");

                entity.Property(e => e.AuthCapital).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Banks).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BookingUnit).HasMaxLength(100);

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.BuId).HasColumnName("BU_ID");

                entity.Property(e => e.BusinessUnit).HasMaxLength(20);

                entity.Property(e => e.CbeconomicSectorCode).HasColumnName("CBEconomicSectorCode");

                entity.Property(e => e.CbrbclassificationId).HasColumnName("CBRBClassificationID");

                entity.Property(e => e.ConfidentialIndicator).HasColumnName("Confidential_Indicator");

                entity.Property(e => e.ControlState).HasMaxLength(25);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptXml)
                    .HasColumnType("xml")
                    .HasColumnName("CTPT_XML");

                entity.Property(e => e.CustomerCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerSince).HasColumnType("datetime");

                entity.Property(e => e.CustomerSize).HasMaxLength(100);

                entity.Property(e => e.CustomerStyle).HasColumnName("Customer_Style");

                entity.Property(e => e.DateOfChargesFetch).HasColumnType("datetime");

                entity.Property(e => e.DateOfCompanyFetch).HasColumnType("datetime");

                entity.Property(e => e.DateOfDirectorsFetch).HasColumnType("datetime");

                entity.Property(e => e.DcId).HasColumnName("DC_ID");

                entity.Property(e => e.EfilingStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseSector).HasMaxLength(100);

                entity.Property(e => e.ExemptQcr).HasColumnName("ExemptQCR");

                entity.Property(e => e.ExistingRiskRate).HasMaxLength(100);

                entity.Property(e => e.FaxNumber).HasMaxLength(50);

                entity.Property(e => e.ForeignBodiesCorporate).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.IncCountryId).HasColumnName("INC_CountryID");

                entity.Property(e => e.IncorpInAstar)
                    .HasColumnType("datetime")
                    .HasColumnName("IncorpInASTAR");

                entity.Property(e => e.InvestmentEquipment).HasMaxLength(100);

                entity.Property(e => e.Iracstatus).HasColumnName("IRACStatus");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ListingStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.MarketCap).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.McaClassification)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_Classification");

                entity.Property(e => e.McaCompanyCategory)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Company_Category");

                entity.Property(e => e.McaCompanySubCategory)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Company_Sub_Category");

                entity.Property(e => e.McaDateOfBalanceSheet).HasColumnName("MCA_Date_of_Balance_Sheet");

                entity.Property(e => e.McaEmailId)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Email_Id");

                entity.Property(e => e.McaIndustry)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Industry");

                entity.Property(e => e.McaLastAgmDate).HasColumnName("MCA_last_agm_date");

                entity.Property(e => e.McaNumberOfMembers)
                    .HasMaxLength(10)
                    .HasColumnName("MCA_Number_of_Members");

                entity.Property(e => e.McaOldName)
                    .HasMaxLength(100)
                    .HasColumnName("MCA_Old_Name");

                entity.Property(e => e.McaPan)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_PAN");

                entity.Property(e => e.McaRoCCode)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_RoC_Code");

                entity.Property(e => e.McaSector)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Sector");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MraratingGrade)
                    .HasMaxLength(50)
                    .HasColumnName("MRARatingGrade");

                entity.Property(e => e.Mrascore)
                    .HasMaxLength(50)
                    .HasColumnName("MRAScore");

                entity.Property(e => e.PaidupCapital).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PrimaryAliasID");

                entity.Property(e => e.Promoters).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ReasonForStress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SalesTurnOver).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserDefinedFields).HasColumnType("xml");

                entity.Property(e => e.UwsdeviationsSecurityNetWorth).HasColumnName("UWSDeviationsSecurityNetWorth");

                entity.Property(e => e.WebsiteAddress).HasMaxLength(500);
            });

            modelBuilder.Entity<TblCounterpartyAlias>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyAlias");

                entity.Property(e => e.CounterpartyAlias).HasMaxLength(250);

                entity.Property(e => e.CtCaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CT_CA_ID");

                entity.Property(e => e.CtSaId).HasColumnName("CT_SA_ID");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.SystemName).HasMaxLength(250);
            });

            modelBuilder.Entity<TblCounterpartyCreditCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyCreditCheck");

                entity.Property(e => e.Checks).HasColumnType("xml");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblCounterpartyEwsstatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyEWSStatus");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlEws)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWS");
            });

            modelBuilder.Entity<TblCounterpartyEwsstatusImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyEWSStatusImport");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlEws)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWS");
            });

            modelBuilder.Entity<TblCounterpartyJvinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyJVInfo");

                entity.Property(e => e.CtJvId).HasColumnName("CT_JV_ID");

                entity.Property(e => e.CtJvName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("CT_JV_Name");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.JvId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("JV_ID");

                entity.Property(e => e.Percentage).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblCounterpartyLegal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyLegal");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyLegalDeclined>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyLegalDeclined");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyMarketCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyMarketCheck");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MarketChecks).HasColumnType("xml");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblCounterpartyMeetingRecorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyMeetingRecorder");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MeetingDetails).HasColumnType("xml");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblCounterpartyPlantVisit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyPlantVisit");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyPostDisbursalConditionReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyPostDisbursalConditionReport");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyRcu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyRCU");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyRcudeclined>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyRCUDeclined");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyRpt>(entity =>
            {
                entity.HasKey(e => e.CtptId);

                entity.ToTable("tblCounterparty_Rpt");

                entity.Property(e => e.CtptId)
                    .ValueGeneratedNever()
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.AdId).HasColumnName("AD_ID");

                entity.Property(e => e.AsId).HasColumnName("AS_ID");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BloombergId)
                    .HasMaxLength(25)
                    .HasColumnName("Bloomberg_ID");

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.BusinessUnit).HasMaxLength(20);

                entity.Property(e => e.CbeconomicSectorCode).HasColumnName("CBEconomicSectorCode");

                entity.Property(e => e.CbrbclassificationId).HasColumnName("CBRBClassificationID");

                entity.Property(e => e.ConfidentialIndicator).HasColumnName("Confidential_Indicator");

                entity.Property(e => e.ContactPerson).HasMaxLength(50);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CounterpartyAlias)
                    .HasMaxLength(100)
                    .HasColumnName("Counterparty_Alias");

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptidentificationId)
                    .HasMaxLength(100)
                    .HasColumnName("CTPTIdentificationId");

                entity.Property(e => e.CustomerCif).HasColumnName("CustomerCIF");

                entity.Property(e => e.CustomerSince).HasColumnType("datetime");

                entity.Property(e => e.DaobussinessLine)
                    .HasMaxLength(100)
                    .HasColumnName("DAOBussinessLine");

                entity.Property(e => e.Daocode)
                    .HasMaxLength(100)
                    .HasColumnName("DAOCode");

                entity.Property(e => e.Daoid).HasColumnName("DAOID");

                entity.Property(e => e.DcId).HasColumnName("DC_ID");

                entity.Property(e => e.DirectEmailId)
                    .HasMaxLength(100)
                    .HasColumnName("DirectEmailID");

                entity.Property(e => e.DunNumber)
                    .HasMaxLength(25)
                    .HasColumnName("DUN_Number");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .HasColumnName("EmailID");

                entity.Property(e => e.ExistingRiskRate).HasMaxLength(100);

                entity.Property(e => e.FaxNumber).HasMaxLength(50);

                entity.Property(e => e.GroupCif).HasColumnName("GroupCIF");

                entity.Property(e => e.GroupDaobussinessLine)
                    .HasMaxLength(100)
                    .HasColumnName("GroupDAOBussinessLine");

                entity.Property(e => e.GroupDaocode)
                    .HasMaxLength(100)
                    .HasColumnName("GroupDAOCode");

                entity.Property(e => e.GroupDaoid).HasColumnName("GroupDAOID");

                entity.Property(e => e.GroupName).HasMaxLength(100);

                entity.Property(e => e.GroupRmid).HasColumnName("GroupRMID");

                entity.Property(e => e.IncoporationDate).HasColumnType("datetime");

                entity.Property(e => e.IsListed).HasColumnName("Is_Listed");

                entity.Property(e => e.LiId).HasColumnName("LI_ID");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MraratingGrade)
                    .HasMaxLength(50)
                    .HasColumnName("MRARatingGrade");

                entity.Property(e => e.Mrascore)
                    .HasMaxLength(50)
                    .HasColumnName("MRAScore");

                entity.Property(e => e.OtherRm)
                    .HasMaxLength(20)
                    .HasColumnName("OtherRM");

                entity.Property(e => e.ParentCtptuniqueId).HasColumnName("ParentCTPTUniqueID");

                entity.Property(e => e.PassportNo).HasMaxLength(200);

                entity.Property(e => e.PrimaryRiskAnalyst)
                    .HasMaxLength(100)
                    .HasColumnName("Primary_Risk_Analyst");

                entity.Property(e => e.Rating).HasMaxLength(20);

                entity.Property(e => e.RatingDate).HasMaxLength(3000);

                entity.Property(e => e.RegistrationNumber).HasMaxLength(50);

                entity.Property(e => e.ReutersId)
                    .HasMaxLength(25)
                    .HasColumnName("Reuters_ID");

                entity.Property(e => e.SalesTurnOver).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Swiftcode)
                    .HasMaxLength(20)
                    .HasColumnName("SWIFTCode");

                entity.Property(e => e.TelephoneNumber).HasMaxLength(50);

                entity.Property(e => e.TradeLicenseNo).HasMaxLength(100);

                entity.Property(e => e.TradelicenseExpirydate).HasMaxLength(500);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserDefinedFields).HasColumnType("xml");

                entity.Property(e => e.WebsiteAddress).HasMaxLength(500);

                entity.Property(e => e.WfGuid)
                    .HasMaxLength(50)
                    .HasColumnName("WF_GUID");

                entity.Property(e => e.WfStatus)
                    .HasMaxLength(50)
                    .HasColumnName("WF_Status");
            });

            modelBuilder.Entity<TblCounterpartyStockAudit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyStockAudit");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyTechnical>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyTechnical");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyTechnicalDeclined>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyTechnicalDeclined");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Files).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCounterpartyType>(entity =>
            {
                entity.HasKey(e => e.CptId);

                entity.ToTable("tblCounterpartyType");

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CounterpartyType).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblCounterpartyUhfcreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCounterpartyUHFCReport");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Report).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCountry>(entity =>
            {
                entity.HasKey(e => e.CtId);

                entity.ToTable("tblCountry");

                entity.Property(e => e.CtId).HasColumnName("CT_ID");

                entity.Property(e => e.Code).HasMaxLength(3);

                entity.Property(e => e.Country).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblCountryHeirarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCountryHeirarchy");

                entity.Property(e => e.CtId).HasColumnName("CT_ID");

                entity.Property(e => e.HId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("H_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parent).HasColumnName("PARENT");
            });

            modelBuilder.Entity<TblCovenantsUniqueId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCovenantsUniqueID");

                entity.Property(e => e.CovId).HasColumnName("COV_ID");

                entity.Property(e => e.CovValue)
                    .HasMaxLength(20)
                    .HasColumnName("COV_Value")
                    .IsFixedLength();

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");
            });

            modelBuilder.Entity<TblCreditCheckServiceMonitor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCreditCheckServiceMonitor");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FinalStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PrimaryStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseRequestId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ResponseRequestID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<TblCreditEnhancer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCreditEnhancer");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrRatingYear)
                    .HasColumnType("numeric(4, 0)")
                    .HasColumnName("BORR_RATING_YEAR");

                entity.Property(e => e.Datafeeddate)
                    .HasColumnType("date")
                    .HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.GuarMdlid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_MDLID");

                entity.Property(e => e.GuarMstBusSegmentId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_MST_BUS_SEGMENT_ID");

                entity.Property(e => e.GuarRatingYear)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_RATING_YEAR");

                entity.Property(e => e.GuarantorId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_ID");

                entity.Property(e => e.GuarantorName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_NAME");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.MstGuarIntRating)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MST_GUAR_INT_RATING");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCrifhighmark>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCRIFHighmark");

                entity.Property(e => e.AssetClassification)
                    .IsUnicode(false)
                    .HasColumnName("ASSET CLASSIFICATION");

                entity.Property(e => e.CreditGrantor)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT GRANTOR");

                entity.Property(e => e.CreditGrantorBranch)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT GRANTOR BRANCH");

                entity.Property(e => e.DateOfClassification)
                    .IsUnicode(false)
                    .HasColumnName("DATE OF CLASSIFICATION");

                entity.Property(e => e.DinForDirector1)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 1");

                entity.Property(e => e.DinForDirector10)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 10");

                entity.Property(e => e.DinForDirector11)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 11");

                entity.Property(e => e.DinForDirector12)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 12");

                entity.Property(e => e.DinForDirector13)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 13");

                entity.Property(e => e.DinForDirector14)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 14");

                entity.Property(e => e.DinForDirector2)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 2");

                entity.Property(e => e.DinForDirector3)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 3");

                entity.Property(e => e.DinForDirector4)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 4");

                entity.Property(e => e.DinForDirector5)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 5");

                entity.Property(e => e.DinForDirector6)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 6");

                entity.Property(e => e.DinForDirector7)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 7");

                entity.Property(e => e.DinForDirector8)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 8");

                entity.Property(e => e.DinForDirector9)
                    .IsUnicode(false)
                    .HasColumnName("DIN FOR DIRECTOR 9");

                entity.Property(e => e.Director1)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 1");

                entity.Property(e => e.Director10)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 10");

                entity.Property(e => e.Director11)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 11");

                entity.Property(e => e.Director12)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 12");

                entity.Property(e => e.Director13)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 13");

                entity.Property(e => e.Director14)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 14");

                entity.Property(e => e.Director2)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 2");

                entity.Property(e => e.Director3)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 3");

                entity.Property(e => e.Director4)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 4");

                entity.Property(e => e.Director5)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 5");

                entity.Property(e => e.Director6)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 6");

                entity.Property(e => e.Director7)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 7");

                entity.Property(e => e.Director8)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 8");

                entity.Property(e => e.Director9)
                    .IsUnicode(false)
                    .HasColumnName("DIRECTOR 9");

                entity.Property(e => e.OtherBank)
                    .IsUnicode(false)
                    .HasColumnName("OTHER BANK");

                entity.Property(e => e.OutstandingAmountInLacs)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING AMOUNT IN LACS");

                entity.Property(e => e.Party)
                    .IsUnicode(false)
                    .HasColumnName("PARTY");

                entity.Property(e => e.RegisteredAddress)
                    .IsUnicode(false)
                    .HasColumnName("REGISTERED ADDRESS");

                entity.Property(e => e.Srno)
                    .IsUnicode(false)
                    .HasColumnName("SRNO");

                entity.Property(e => e.State)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.SuitStatus)
                    .IsUnicode(false)
                    .HasColumnName("SUIT STATUS");
            });

            modelBuilder.Entity<TblCrilictopBorrower>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCRILICTopBorrower");

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Borrower Name");

                entity.Property(e => e.BorrowerPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Borrower PAN");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Group Code");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Group Name");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Industry Code");

                entity.Property(e => e.IndustryDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Industry Description");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Sr. No.");
            });

            modelBuilder.Entity<TblCrilictopBorrowerFlat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCRILICTopBorrowerFlat");

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Borrower Name");

                entity.Property(e => e.BorrowerPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Borrower PAN");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Group Code");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Group Name");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Industry Code");

                entity.Property(e => e.IndustryDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Industry Description");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Sr. No.");
            });

            modelBuilder.Entity<TblCropCostAndIncomeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCropCostAndIncomeMaster");

                entity.Property(e => e.CoCperAcre)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("CoCPerAcre");

                entity.Property(e => e.CpStId).HasColumnName("CP_ST_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MarketPricePerQuintal).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PinDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PIN_District");

                entity.Property(e => e.YieldPerAcre).HasColumnType("decimal(22, 4)");
            });

            modelBuilder.Entity<TblCrossCollateralLinkage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCrossCollateralLinkage");

                entity.Property(e => e.ColId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrossColId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CROSS_COL_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<TblCtptAppCreated>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_AppCreated");

                entity.Property(e => e.CtptCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("CTPT_CreatedOn");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblCtptDirector>(entity =>
            {
                entity.HasKey(e => e.DrId);

                entity.ToTable("tblCTPT_Directors");

                entity.Property(e => e.DrId).HasColumnName("DR_ID");

                entity.Property(e => e.AddressLine1)
                    .HasMaxLength(300)
                    .HasColumnName("Address_Line1");

                entity.Property(e => e.AddressLine2)
                    .HasMaxLength(300)
                    .HasColumnName("Address_Line2");

                entity.Property(e => e.Age).HasColumnName("AGE");

                entity.Property(e => e.Cbsnumber)
                    .HasColumnType("xml")
                    .HasColumnName("CBSNumber");

                entity.Property(e => e.Cibilscore)
                    .HasMaxLength(10)
                    .HasColumnName("CIBILScore");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentDesgAppointmentDate).HasColumnName("CurrentDesg_AppointmentDate");

                entity.Property(e => e.Designation).HasMaxLength(200);

                entity.Property(e => e.Din)
                    .HasMaxLength(100)
                    .HasColumnName("DIN");

                entity.Property(e => e.DirectorName).HasMaxLength(200);

                entity.Property(e => e.Dob).HasColumnName("DOB");

                entity.Property(e => e.DscExpiryDate).HasColumnName("DSC_Expiry_Date");

                entity.Property(e => e.DscStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DSC_Status");

                entity.Property(e => e.FathersName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Kmptype).HasColumnName("KMPType");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MothersName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NegativeList).HasMaxLength(50);

                entity.Property(e => e.OnBoardOfAnyOtherBank).HasMaxLength(10);

                entity.Property(e => e.OtherDirectorShipInfo).IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode).HasMaxLength(100);

                entity.Property(e => e.Qualification).HasMaxLength(250);

                entity.Property(e => e.RbiwilfulDefaulter)
                    .HasMaxLength(50)
                    .HasColumnName("RBIWilfulDefaulter");

                entity.Property(e => e.RelationshipDetails)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(100);

                entity.Property(e => e.UserComments)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCtptHierarchy>(entity =>
            {
                entity.HasKey(e => e.HrId);

                entity.ToTable("tblCTPT_Hierarchy");

                entity.Property(e => e.HrId).HasColumnName("HR_ID");

                entity.Property(e => e.ChildCtptId).HasColumnName("Child_CTPT_ID");

                entity.Property(e => e.CtptLevel).HasColumnName("CTPT_Level");

                entity.Property(e => e.CtptPath)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_Path");

                entity.Property(e => e.ParentCtptId).HasColumnName("Parent_CTPT_ID");

                entity.Property(e => e.RootCtptId).HasColumnName("Root_CTPT_ID");
            });

            modelBuilder.Entity<TblCtptHierarchyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_Hierarchy_History");

                entity.Property(e => e.BkpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Bkp_Date");

                entity.Property(e => e.ChildCtptId).HasColumnName("Child_CTPT_ID");

                entity.Property(e => e.HrId).HasColumnName("HR_ID");

                entity.Property(e => e.ParentCtptId).HasColumnName("Parent_CTPT_ID");
            });

            modelBuilder.Entity<TblCtptHierarchyRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_Hierarchy_Rpt");

                entity.Property(e => e.ChildCtptId).HasColumnName("Child_CTPT_ID");

                entity.Property(e => e.HrId).HasColumnName("HR_ID");

                entity.Property(e => e.ParentCtptId).HasColumnName("Parent_CTPT_ID");
            });

            modelBuilder.Entity<TblCtptJointUtilization>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_JointUtilization");

                entity.Property(e => e.ChildCtptjuId).HasColumnName("ChildCTPTJU_Id");

                entity.Property(e => e.CtptjuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPTJU_ID");

                entity.Property(e => e.ParentCtptjuId).HasColumnName("ParentCTPTJU_Id");
            });

            modelBuilder.Entity<TblCtptLtMapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_Lt_Mapper");

                entity.Property(e => e.CpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CP_ID");

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");
            });

            modelBuilder.Entity<TblCtptUdf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPT_UDF");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.FieldDataType).HasMaxLength(50);

                entity.Property(e => e.FieldName).HasMaxLength(200);

                entity.Property(e => e.Format).HasMaxLength(50);

                entity.Property(e => e.UdfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UDF_ID");
            });

            modelBuilder.Entity<TblCtptaddress>(entity =>
            {
                entity.HasKey(e => e.AdId);

                entity.ToTable("tblCTPTAddress");

                entity.Property(e => e.AdId).HasColumnName("AD_ID");

                entity.Property(e => e.Address1).HasMaxLength(250);

                entity.Property(e => e.AtId).HasColumnName("AT_ID");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.IncludeInFl).HasColumnName("IncludeInFL");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.ZipCode).HasMaxLength(50);
            });

            modelBuilder.Entity<TblCtptauditor>(entity =>
            {
                entity.HasKey(e => e.CadId)
                    .HasName("PK_tblAuditor");

                entity.ToTable("tblCTPTAuditor");

                entity.Property(e => e.CadId).HasColumnName("CAD_ID");

                entity.Property(e => e.AdId)
                    .HasMaxLength(15)
                    .HasColumnName("AD_ID");

                entity.Property(e => e.AuditorGrade).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.IsBankApproved).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.RegistrationNumber).HasMaxLength(300);

                entity.Property(e => e.SigningPartner).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCtptborrRaroc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTBorrRAROC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrPd)
                    .HasColumnType("numeric(12, 6)")
                    .HasColumnName("BORR_PD");

                entity.Property(e => e.BorrRaroc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("BORR_RAROC");

                entity.Property(e => e.BorrRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BORR_RATING");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.OtherIncome01)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_01");

                entity.Property(e => e.OtherIncome02)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_02");

                entity.Property(e => e.OtherIncome03)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_03");

                entity.Property(e => e.OtherIncome04)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_04");

                entity.Property(e => e.OtherIncome05)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME_05");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROCESSING_FEE");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedExp)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PROPOSED_EXP");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.TotalCommitmentFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("TOTAL_COMMITMENT_FEE");

                entity.Property(e => e.TotalIncomeCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("TOTAL_INCOME_CAPITAL");

                entity.Property(e => e.UfceImpact)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("UFCE_IMPACT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptchargeDtl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTChargeDtls");

                entity.Property(e => e.BankDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BANK_DESC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.ChargeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CHARGE_DESC");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.SecSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_SR_NO");

                entity.Property(e => e.SecurityAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("SECURITY_AMT");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptcontactDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTContactDetails");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Designation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DirectContact).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TelephoneNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCtptcreditManager>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTCreditManager");

                entity.Property(e => e.CmId).HasColumnName("CM_ID");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsGcm).HasColumnName("IsGCM");
            });

            modelBuilder.Entity<TblCtptdefaulterList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTDefaulterList");

                entity.Property(e => e.Comment).HasMaxLength(1000);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<TblCtptfacRaroc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTFacRAROC");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.CcfAvgUtilisation)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_AVG_UTILISATION");

                entity.Property(e => e.CcfDrawnFac)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_DRAWN_FAC");

                entity.Property(e => e.CcfUndrawnExp)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("CCF_UNDRAWN_EXP");

                entity.Property(e => e.CommitmentFee)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("COMMITMENT_FEE");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.EconomicCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ECONOMIC_CAPITAL");

                entity.Property(e => e.EconomicProfit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ECONOMIC_PROFIT");

                entity.Property(e => e.EfficiencyRatio)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EFFICIENCY_RATIO");

                entity.Property(e => e.El)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("EL");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.FacilityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_DESC");

                entity.Property(e => e.FundingCost)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("FUNDING_COST");

                entity.Property(e => e.HurdleRate)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("HURDLE_RATE");

                entity.Property(e => e.IncomeFromCapital)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("INCOME_FROM_CAPITAL");

                entity.Property(e => e.Lgd)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("LGD");

                entity.Property(e => e.OtherIncome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OTHER_INCOME");

                entity.Property(e => e.Pd)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("PD");

                entity.Property(e => e.PostTaxnetincome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("POST_TAXNETINCOME");

                entity.Property(e => e.PreTaxnetincome)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PRE_TAXNETINCOME");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedInterestFee)
                    .HasColumnType("numeric(10, 2)")
                    .HasColumnName("PROPOSED_INTEREST_FEE");

                entity.Property(e => e.ProposedLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROPOSED_LIMIT");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Raroc)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("RAROC");

                entity.Property(e => e.RealisedRaroc)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("REALISED_RAROC");

                entity.Property(e => e.Revenue)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("REVENUE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptfacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTFacility");

                entity.Property(e => e.ActualExpectedDdCcf1)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("ACTUAL_EXPECTED_DD_CCF1");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.ClaimType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLAIM_TYPE");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ElRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EL_RATING");

                entity.Property(e => e.ExistingLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("EXISTING_LIMIT");

                entity.Property(e => e.ExpectedDdCcf1)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("EXPECTED_DD_CCF1");

                entity.Property(e => e.ExpectedDevCcf2)
                    .HasColumnType("numeric(5, 2)")
                    .HasColumnName("EXPECTED_DEV_CCF2");

                entity.Property(e => e.FacEndDate).HasColumnName("FAC_END_DATE");

                entity.Property(e => e.FacGrpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAC_GRP_NAME");

                entity.Property(e => e.FacParentSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_PARENT_SR_NO");

                entity.Property(e => e.FacRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_RATING");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.FacStartDate).HasColumnName("FAC_START_DATE");

                entity.Property(e => e.FacilityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FACILITY_DESC");

                entity.Property(e => e.Lgd)
                    .HasColumnType("numeric(12, 6)")
                    .HasColumnName("LGD");

                entity.Property(e => e.ObligorRating)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OBLIGOR_RATING");

                entity.Property(e => e.OutstandingAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OUTSTANDING_AMT");

                entity.Property(e => e.OverallCap)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("OVERALL_CAP");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedLimit)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PROPOSED_LIMIT");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.UcfFlag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("UCF_FLAG");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptguarantee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTGuarantee");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FacSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FAC_SR_NO");

                entity.Property(e => e.GuaranteeAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("GUARANTEE_AMT");

                entity.Property(e => e.GuaranteeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_DESC");

                entity.Property(e => e.GuaranteeSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTEE_SR_NO");

                entity.Property(e => e.GuarantorBorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_BORR_ID");

                entity.Property(e => e.GuarantorRatingGrade)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_RATING_GRADE");

                entity.Property(e => e.GuarantorValidity).HasColumnName("GUARANTOR_VALIDITY");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptidentificationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTIdentificationMaster");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Identification).HasMaxLength(100);

                entity.Property(e => e.RegEx).HasMaxLength(100);
            });

            modelBuilder.Entity<TblCtptidentifiersDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTIdentifiersDetails");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentifierExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.IdentifierId).HasColumnName("IdentifierID");

                entity.Property(e => e.IdentifierValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCtptincomeAndObligation>(entity =>
            {
                entity.ToTable("tblCTPTIncomeAndObligations");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlData)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Data");
            });

            modelBuilder.Entity<TblCtptinternalRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTInternalRatings");

                entity.Property(e => e.AuditMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Audit_Method");

                entity.Property(e => e.AuditYear).HasColumnName("Audit_Year");

                entity.Property(e => e.CalculatedRtId).HasColumnName("Calculated_RT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProbabilityDefault).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ProposedRtId).HasColumnName("Proposed_RT_ID");

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.RatingDate).HasColumnType("datetime");

                entity.Property(e => e.RatingExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.ReasonForOverride).IsUnicode(false);

                entity.Property(e => e.SsScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SS_Score");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<TblCtptinternalRatingsExtended>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTInternalRatingsExtended");

                entity.Property(e => e.AssessmentType).HasMaxLength(50);

                entity.Property(e => e.AuditMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Audit_Method");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(100)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IndustryName).HasMaxLength(500);

                entity.Property(e => e.IntRatingOfSupportingEntity).HasMaxLength(100);

                entity.Property(e => e.ModelName).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NameOfSupportingEntity).HasMaxLength(500);

                entity.Property(e => e.NoOfGradesAfterOverride)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<TblCtptlegalCase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTLegalCases");

                entity.Property(e => e.Comment).HasMaxLength(1000);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<TblCtptloanEligibility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTLoanEligibility");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.QualifyCond).HasColumnType("xml");
            });

            modelBuilder.Entity<TblCtptmcaCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTMcaCharges");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(22, 8)")
                    .HasColumnName("amount");

                entity.Property(e => e.AssetsUnderCharge)
                    .HasMaxLength(500)
                    .HasColumnName("assets_under_charge");

                entity.Property(e => e.ChargeId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("charge_id");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Date).HasColumnName("date");

                entity.Property(e => e.DateOfModification).HasColumnName("date_of_modification");

                entity.Property(e => e.DateOfSatisfaction).HasColumnName("date_of_satisfaction");

                entity.Property(e => e.HolderName)
                    .HasMaxLength(300)
                    .HasColumnName("holder_name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(300)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<TblCtptowner>(entity =>
            {
                entity.HasKey(e => e.CtOwId);

                entity.ToTable("tblCTPTOwner");

                entity.Property(e => e.CtOwId).HasColumnName("CT_OW_ID");

                entity.Property(e => e.Address).HasMaxLength(600);

                entity.Property(e => e.Category).HasMaxLength(300);

                entity.Property(e => e.Cbsnumber)
                    .HasColumnType("xml")
                    .HasColumnName("CBSNumber");

                entity.Property(e => e.Cibilscore)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CIBILScore");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Nationality).HasMaxLength(200);

                entity.Property(e => e.OwnerName).HasMaxLength(250);

                entity.Property(e => e.OwnershipBranch)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OwnershipPercent).HasMaxLength(5);

                entity.Property(e => e.OwnershipRegion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode).HasMaxLength(10);

                entity.Property(e => e.PledgeShare).HasMaxLength(200);

                entity.Property(e => e.State).HasMaxLength(200);
            });

            modelBuilder.Entity<TblCtptpassport>(entity =>
            {
                entity.HasKey(e => e.CtPpId);

                entity.ToTable("tblCTPTPassport");

                entity.Property(e => e.CtPpId).HasColumnName("CT_PP_ID");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.NameOnPassport).HasMaxLength(250);

                entity.Property(e => e.PassportExpiryDate).HasMaxLength(50);

                entity.Property(e => e.PassportNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TblCtptrating>(entity =>
            {
                entity.HasKey(e => e.CtRtId);

                entity.ToTable("tblCTPTRating");

                entity.Property(e => e.CtRtId).HasColumnName("CT_RT_ID");

                entity.Property(e => e.Amount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Instrument).HasMaxLength(500);

                entity.Property(e => e.Outlook).HasMaxLength(300);

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.Rating).HasMaxLength(10);

                entity.Property(e => e.RatingAgency).HasMaxLength(250);

                entity.Property(e => e.RatingDate).HasColumnType("datetime");

                entity.Property(e => e.RatingScale).HasMaxLength(50);

                entity.Property(e => e.RtId).HasColumnName("RT_ID");
            });

            modelBuilder.Entity<TblCtptratingHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTRating_History");

                entity.Property(e => e.Amount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.CtRtId).HasColumnName("CT_RT_ID");

                entity.Property(e => e.CthRtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTH_RT_ID");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Instrument).HasMaxLength(500);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Outlook).HasMaxLength(300);

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.Rating).HasMaxLength(10);

                entity.Property(e => e.RatingAgency).HasMaxLength(250);

                entity.Property(e => e.RatingDate).HasColumnType("datetime");

                entity.Property(e => e.RatingScale).HasMaxLength(50);

                entity.Property(e => e.RtId).HasColumnName("RT_ID");
            });

            modelBuilder.Entity<TblCtptriskSensitivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTRiskSensitivities");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RiskSensitivity)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblCtptrmdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTRMDetails");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsGrm).HasColumnName("IsGRM");

                entity.Property(e => e.RmId).HasColumnName("RM_ID");
            });

            modelBuilder.Entity<TblCtptrmdetailsDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTRMDetails_Deleted");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.DeleteDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Delete_Date");

                entity.Property(e => e.Did)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsGrm).HasColumnName("IsGRM");

                entity.Property(e => e.RmId).HasColumnName("RM_ID");
            });

            modelBuilder.Entity<TblCtptrmdetailsToBeDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTRMDetails_ToBeDeleted");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Did)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsGrm).HasColumnName("IsGRM");

                entity.Property(e => e.RmId).HasColumnName("RM_ID");

                entity.Property(e => e.ToBeDeletedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ToBeDeleted_Date");
            });

            modelBuilder.Entity<TblCtptsalesReject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTSalesReject");

                entity.Property(e => e.BusinessSegment).HasMaxLength(50);

                entity.Property(e => e.CounterpartyName).HasMaxLength(200);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Pan)
                    .HasMaxLength(50)
                    .HasColumnName("PAN");

                entity.Property(e => e.SalesRejectDate).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblCtptscoring>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTScoring");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrowerRating)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("BORROWER_RATING");

                entity.Property(e => e.CompType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("COMP_TYPE");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.IndustryBenchmark)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY_BENCHMARK");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Score)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCORE");

                entity.Property(e => e.ScoringDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SCORING_DESC");

                entity.Property(e => e.SectionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECTION_ID");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SR_NO");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Weightages)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHTAGES");

                entity.Property(e => e.WeightedScore)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WEIGHTED_SCORE");
            });

            modelBuilder.Entity<TblCtptsecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTSecurity");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datafeeddate).HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.ProposalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PROPOSAL_ID");

                entity.Property(e => e.ProposedEndDate).HasColumnName("PROPOSED_END_DATE");

                entity.Property(e => e.ProposedStartDate).HasColumnName("PROPOSED_START_DATE");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Rating)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("RATING");

                entity.Property(e => e.SecSrNo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SEC_SR_NO");

                entity.Property(e => e.SecurityAddrDet)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_ADDR_DET");

                entity.Property(e => e.SecurityCityId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CITY_ID");

                entity.Property(e => e.SecurityCreated)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_CREATED");

                entity.Property(e => e.SecurityDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_DESC");

                entity.Property(e => e.SecurityPinCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_PIN_CODE");

                entity.Property(e => e.SecurityStateId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_STATE_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.ValidDate).HasColumnName("VALID_DATE");

                entity.Property(e => e.ValidSource)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALID_SOURCE");

                entity.Property(e => e.ValuedAtAmt)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("VALUED_AT_AMT");
            });

            modelBuilder.Entity<TblCtptsubjectiveInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTSubjectiveInfo");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InfoType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Percentage).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<TblCtptsystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTSystems");

                entity.Property(e => e.CtSaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CT_SA_ID");

                entity.Property(e => e.SystemName).HasMaxLength(250);
            });

            modelBuilder.Entity<TblCtptuploadedFile>(entity =>
            {
                entity.HasKey(e => e.CtUfId)
                    .HasName("PK__tblCTPTU__C12A0CA531EE3A81");

                entity.ToTable("tblCTPTUploadedFiles");

                entity.Property(e => e.CtUfId).HasColumnName("CT_UF_ID");

                entity.Property(e => e.BrowserUrl).HasMaxLength(2000);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.FileName).HasMaxLength(2000);
            });

            modelBuilder.Entity<TblCtptwfdraftTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTWFDraftTracker");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptdrftId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPTDRFT_ID");

                entity.Property(e => e.Ctptname)
                    .HasMaxLength(500)
                    .HasColumnName("CTPTName");

                entity.Property(e => e.Draftxml)
                    .HasColumnType("xml")
                    .HasColumnName("DRAFTXML");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblCtptwfdraftTrackerForOutOfOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTWFDraftTrackerForOutOfOffice");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptdrftId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPTDRFT_ID");

                entity.Property(e => e.Ctptname)
                    .HasMaxLength(500)
                    .HasColumnName("CTPTName");

                entity.Property(e => e.Draftxml)
                    .HasColumnType("xml")
                    .HasColumnName("DRAFTXML");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblCtptwfdraftTrackerOutOfOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCTPTWFDraftTracker_OutOfOffice");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptdrftId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPTDRFT_ID");

                entity.Property(e => e.Ctptname)
                    .HasMaxLength(500)
                    .HasColumnName("CTPTName");

                entity.Property(e => e.Draftxml)
                    .HasColumnType("xml")
                    .HasColumnName("DRAFTXML");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblCurrency>(entity =>
            {
                entity.HasKey(e => e.CrId);

                entity.ToTable("tblCurrency");

                entity.Property(e => e.CrId).HasColumnName("CR_ID");

                entity.Property(e => e.AllowedLimitsCurrency).HasDefaultValueSql("((0))");

                entity.Property(e => e.AlphaCode).HasMaxLength(5);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(40);

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Decimals)
                    .HasColumnName("DECIMALS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.NumCode).HasMaxLength(5);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<TblCustomer>(entity =>
            {
                entity.HasKey(e => e.CId)
                    .HasName("PK__tblCusto__A9FDEC127EE0B9C6");

                entity.ToTable("tblCustomer");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.ContactPersonName)
                    .HasMaxLength(500)
                    .HasColumnName("Contact_Person_Name");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(250)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .HasColumnName("EMailID");

                entity.Property(e => e.Mobile1).HasMaxLength(35);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OfficeAddress1)
                    .HasMaxLength(250)
                    .HasColumnName("Office_Address1");

                entity.Property(e => e.OfficeAddress2)
                    .HasMaxLength(250)
                    .HasColumnName("Office_Address2");

                entity.Property(e => e.Phone1).HasMaxLength(40);
            });

            modelBuilder.Entity<TblCustomerLead>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCustomerLead");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).IsUnicode(false);

                entity.Property(e => e.LdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LD_ID");

                entity.Property(e => e.LeadId)
                    .IsUnicode(false)
                    .HasColumnName("LeadID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblCustomerProjectImport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCustomerProjectImport");

                entity.Property(e => e.AgreementValue)
                    .IsUnicode(false)
                    .HasColumnName("Agreement_Value");

                entity.Property(e => e.AmountReceived)
                    .IsUnicode(false)
                    .HasColumnName("Amount_Received");

                entity.Property(e => e.BalanceValue)
                    .IsUnicode(false)
                    .HasColumnName("Balance_Value");

                entity.Property(e => e.BankHl)
                    .IsUnicode(false)
                    .HasColumnName("Bank_HL");

                entity.Property(e => e.Barter).IsUnicode(false);

                entity.Property(e => e.BlockWing)
                    .IsUnicode(false)
                    .HasColumnName("Block_Wing");

                entity.Property(e => e.Bucket).IsUnicode(false);

                entity.Property(e => e.BuiltUpArea)
                    .IsUnicode(false)
                    .HasColumnName("Built_Up_Area");

                entity.Property(e => e.BuiltUpAreaType)
                    .IsUnicode(false)
                    .HasColumnName("Built_Up_Area_Type");

                entity.Property(e => e.Configuration).IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .IsUnicode(false)
                    .HasColumnName("Contact_No");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustomerName)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.DateOfBooking)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Booking");

                entity.Property(e => e.DateOfRegistration)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Registration");

                entity.Property(e => e.FlatNo)
                    .IsUnicode(false)
                    .HasColumnName("Flat_No");

                entity.Property(e => e.Floor).IsUnicode(false);

                entity.Property(e => e.FloorApproved)
                    .IsUnicode(false)
                    .HasColumnName("Floor_Approved");

                entity.Property(e => e.Month1).IsUnicode(false);

                entity.Property(e => e.Month2).IsUnicode(false);

                entity.Property(e => e.Ownership).IsUnicode(false);

                entity.Property(e => e.Quarter1).IsUnicode(false);

                entity.Property(e => e.Quarter2).IsUnicode(false);

                entity.Property(e => e.Rate).IsUnicode(false);

                entity.Property(e => e.RateType)
                    .IsUnicode(false)
                    .HasColumnName("Rate_Type");

                entity.Property(e => e.ReceivedOfAgreementValue)
                    .IsUnicode(false)
                    .HasColumnName("Received_of_Agreement_Value");

                entity.Property(e => e.RegistrationNo)
                    .IsUnicode(false)
                    .HasColumnName("Registration_No");

                entity.Property(e => e.ReraCarpetArea)
                    .IsUnicode(false)
                    .HasColumnName("RERA_Carpet_Area");

                entity.Property(e => e.ReraCarpetAreaType)
                    .IsUnicode(false)
                    .HasColumnName("RERA_Carpet_Area_Type");

                entity.Property(e => e.ResidentialCommercial)
                    .IsUnicode(false)
                    .HasColumnName("Residential_Commercial");

                entity.Property(e => e.SaleableArea)
                    .IsUnicode(false)
                    .HasColumnName("Saleable_Area");

                entity.Property(e => e.SaleableAreaType)
                    .IsUnicode(false)
                    .HasColumnName("Saleable_Area_Type");

                entity.Property(e => e.Sno)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SNO");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.UnitValueRange)
                    .IsUnicode(false)
                    .HasColumnName("Unit_Value_range");

                entity.Property(e => e.Year1).IsUnicode(false);

                entity.Property(e => e.Year2).IsUnicode(false);

                entity.Property(e => e.YearQuarter1)
                    .IsUnicode(false)
                    .HasColumnName("Year_Quarter1");

                entity.Property(e => e.YearQuarter2)
                    .IsUnicode(false)
                    .HasColumnName("Year_Quarter2");
            });

            modelBuilder.Entity<TblCustomerRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCustomerRequests");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblCustomerRequestId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCustomerRequestID");

                entity.Property(e => e.ReqId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("REQ_ID");

                entity.Property(e => e.ReqValue)
                    .HasMaxLength(20)
                    .HasColumnName("REQ_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblCustomerRequestsDraft>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblCustomerRequestsDrafts");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblDay0UploadPath>(entity =>
            {
                entity.HasKey(e => e.KeyValue);

                entity.ToTable("tblDay0_UploadPaths");

                entity.Property(e => e.KeyValue).HasMaxLength(20);

                entity.Property(e => e.PathId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PATH_ID");

                entity.Property(e => e.UploadPath).HasMaxLength(1000);
            });

            modelBuilder.Entity<TblDberrorLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDBErrorLogs");

                entity.Property(e => e.ErrorDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ERROR_DATE");

                entity.Property(e => e.ErrorDetails)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_DETAILS");

                entity.Property(e => e.ErrorMsg)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_MSG");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.SpName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SP_NAME");
            });

            modelBuilder.Entity<TblDbuploadServiceConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDBUploadServiceConfig");

                entity.Property(e => e.ArchivalStoredProcedure).HasMaxLength(100);

                entity.Property(e => e.CommandType).HasMaxLength(20);

                entity.Property(e => e.ConnectionString).HasMaxLength(500);

                entity.Property(e => e.ConnectionType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasPrecision(3);

                entity.Property(e => e.DestinationTable).HasMaxLength(100);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasPrecision(3);

                entity.Property(e => e.PostUploadCsfunction)
                    .HasMaxLength(100)
                    .HasColumnName("PostUploadCSFunction");

                entity.Property(e => e.ServiceKey).HasMaxLength(100);
            });

            modelBuilder.Entity<TblDcwfactionStatusConstTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDCWFActionStatusConstTracker");

                entity.Property(e => e.AcknowledgeUserRoleRid).HasColumnName("AcknowledgeUserRoleRID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConstGuid).HasColumnName("Const_GUID");

                entity.Property(e => e.ConstId)
                    .HasMaxLength(50)
                    .HasColumnName("Const_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocConstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DocConst_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.SubmitterRId).HasColumnName("SubmitterR_ID");

                entity.Property(e => e.SubmitterUid).HasColumnName("SubmitterUID");

                entity.Property(e => e.UserAcknowledgeUid).HasColumnName("UserAcknowledgeUID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDcwfactionStatusConstTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDCWFActionStatusConstTracker_History");

                entity.Property(e => e.AcknowledgeUserRoleRid).HasColumnName("AcknowledgeUserRoleRID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConstGuid).HasColumnName("Const_GUID");

                entity.Property(e => e.ConstId)
                    .HasMaxLength(50)
                    .HasColumnName("Const_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocConstId).HasColumnName("DocConst_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.SubmitterRId).HasColumnName("SubmitterR_ID");

                entity.Property(e => e.SubmitterUid).HasColumnName("SubmitterUID");

                entity.Property(e => e.UserAcknowledgeUid).HasColumnName("UserAcknowledgeUID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDealTeamApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDealTeamApplication");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Dtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DTID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblDealTeamApplicationHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDealTeamApplication_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Dtid).HasColumnName("DTID");

                entity.Property(e => e.Histdtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HISTDTID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblDealTeamComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDealTeamComments");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Dtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DTID");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblDealTeamCommentsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDealTeamComments_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Dtid).HasColumnName("DTID");

                entity.Property(e => e.Histdtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HISTDTID");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblDealTeamCounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDealTeamCounterparty");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Dtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DTID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblDedupeBbg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupeBBG");

                entity.Property(e => e.AmountApplied)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Amount Applied");

                entity.Property(e => e.ApplicationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Application Date");

                entity.Property(e => e.Branch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Company PAN");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DecisionRejectWithdrawnSanctioned)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Decision (Reject/Withdrawn/Sanctioned)");

                entity.Property(e => e.Id)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.NameOfTheCompany)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Company");

                entity.Property(e => e.PromoterName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter Name");

                entity.Property(e => e.PromoterPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter PAN");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDedupeBbg20180413>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupeBBG20180413");

                entity.Property(e => e.AmountApplied)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Amount Applied");

                entity.Property(e => e.ApplicationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Application Date");

                entity.Property(e => e.Branch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Company PAN");

                entity.Property(e => e.DecisionRejectWithdrawnSanctioned)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Decision (Reject/Withdrawn/Sanctioned)");

                entity.Property(e => e.NameOfTheCompany)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Company");

                entity.Property(e => e.PromoterName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter Name");

                entity.Property(e => e.PromoterPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter PAN");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDedupeBbginternal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupeBBGInternal");

                entity.Property(e => e.AmountApplied)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Amount Applied");

                entity.Property(e => e.ApplicationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Application Date");

                entity.Property(e => e.Branch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Company PAN");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DecisionRejectWithdrawnSanctioned)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Decision (Reject/Withdrawn/Sanctioned)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NameOfTheCompany)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Company");

                entity.Property(e => e.PromoterName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter Name");

                entity.Property(e => e.PromoterPan)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Promoter PAN");

                entity.Property(e => e.Region)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Segment)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDedupeId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupeID");

                entity.Property(e => e.DedupeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DedupeID");
            });

            modelBuilder.Entity<TblDedupetablesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupetablesDetail");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Duid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DUID");

                entity.Property(e => e.FilterCondition)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdField)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_Field");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsXmlcolumn).HasColumnName("IsXMLColumn");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentTableName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParentTableRefColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceKeyColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.XmlField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XML_Field");
            });

            modelBuilder.Entity<TblDedupetablesFieldMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDedupetablesFieldMap");

                entity.Property(e => e.Dufmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DUFMID");

                entity.Property(e => e.Duid).HasColumnName("DUID");

                entity.Property(e => e.FieldDataType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsXmlfield).HasColumnName("IsXMLField");

                entity.Property(e => e.ParameterName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableFieldName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Xpath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDefaultCreditOfficer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDefaultCreditOfficer");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_ID");

                entity.Property(e => e.CreditName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_NAME");

                entity.Property(e => e.DcoId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DCO_ID");

                entity.Property(e => e.FileId).HasColumnName("File_ID");

                entity.Property(e => e.RmId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RM_ID");

                entity.Property(e => e.RmName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RM_NAME");
            });

            modelBuilder.Entity<TblDefaultCreditOfficerFileUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDefaultCreditOfficerFileUpload");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FileId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("File_ID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("File_NAME");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("File_PATH");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.ValidateStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValidateStatusMsg)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDefaultCreditOfficerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDefaultCreditOfficerHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_ID");

                entity.Property(e => e.CreditName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CREDIT_NAME");

                entity.Property(e => e.DcoId).HasColumnName("DCO_ID");

                entity.Property(e => e.FileId).HasColumnName("File_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RmId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RM_ID");

                entity.Property(e => e.RmName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("RM_NAME");
            });

            modelBuilder.Entity<TblDefaultLimitMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDefaultLimitMaster");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LimitReference).HasMaxLength(20);

                entity.Property(e => e.LimitReferenceDescription).HasMaxLength(500);
            });

            modelBuilder.Entity<TblDeficiency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDeficiency");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefwrapperId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEFWrapper_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlDeficiency)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Deficiency");
            });

            modelBuilder.Entity<TblDelinquency>(entity =>
            {
                entity.HasKey(e => e.DqId);

                entity.ToTable("tblDelinquency");

                entity.Property(e => e.DqId).HasColumnName("DQ_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Delinquency).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDeliquenyClass>(entity =>
            {
                entity.HasKey(e => e.DcId);

                entity.ToTable("tblDeliquenyClass");

                entity.Property(e => e.DcId).HasColumnName("DC_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Values).HasMaxLength(200);
            });

            modelBuilder.Entity<TblDepartment>(entity =>
            {
                entity.ToTable("tblDepartment");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DepartmentCode).HasMaxLength(50);

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeptType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.OperationalCostIncome).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<TblDeptAssignedPortfolio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDeptAssignedPortfolios");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DapId).HasColumnName("DAP_ID");

                entity.Property(e => e.DptId).HasColumnName("DPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDesignation>(entity =>
            {
                entity.HasKey(e => e.DgId);

                entity.ToTable("tblDesignations");

                entity.Property(e => e.DgId).HasColumnName("DG_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Designation)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblDeviationsId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDeviationsID");

                entity.Property(e => e.DvnId).HasColumnName("DVN_ID");

                entity.Property(e => e.DvnValue)
                    .HasMaxLength(20)
                    .HasColumnName("DVN_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDeviationsModel>(entity =>
            {
                entity.HasKey(e => e.Dmmid);

                entity.ToTable("tblDeviationsModels");

                entity.Property(e => e.Dmmid).HasColumnName("DMMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDisplaySectionConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDisplaySectionConfig20180517>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig20180517");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDisplaySectionConfig20180518>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig20180518");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDisplaySectionConfig20180719>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig20180719");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDisplaySectionConfig20180726>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig20180726");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDisplaySectionConfig20190912>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDisplaySectionConfig20190912");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<TblDmbrokingEntityLetter>(entity =>
            {
                entity.HasKey(e => e.DmBelId)
                    .HasName("PK__tblDMBro__D08E58884E3DE618");

                entity.ToTable("tblDMBrokingEntityLetter");

                entity.Property(e => e.DmBelId).HasColumnName("DM_BEL_ID");

                entity.Property(e => e.BrokingEntity).HasMaxLength(100);

                entity.Property(e => e.BrokingEntityAccountNumber).HasMaxLength(1000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDmcancelSldocument>(entity =>
            {
                entity.HasKey(e => e.DmcslId);

                entity.ToTable("tblDMCancelSLDocuments");

                entity.Property(e => e.DmcslId).HasColumnName("DMCSL_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmconstitutional>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMConstitutional");

                entity.Property(e => e.ConstDesc).HasMaxLength(500);

                entity.Property(e => e.ConstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConstID");

                entity.Property(e => e.ConstName).HasMaxLength(200);
            });

            modelBuilder.Entity<TblDmconstitutionalMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMConstitutionalMaster");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ConstitutionId)
                    .HasMaxLength(50)
                    .HasColumnName("ConstitutionID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.IsCommunicated).HasMaxLength(20);

                entity.Property(e => e.IsStandard).HasMaxLength(20);

                entity.Property(e => e.QueId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Que_ID");

                entity.Property(e => e.Text).HasMaxLength(2000);
            });

            modelBuilder.Entity<TblDmdefermentDocument>(entity =>
            {
                entity.HasKey(e => e.DmdId);

                entity.ToTable("tblDMDefermentDocuments");

                entity.Property(e => e.DmdId).HasColumnName("DMD_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmdeletedDocument>(entity =>
            {
                entity.HasKey(e => e.DmDelId);

                entity.ToTable("tblDMDeletedDocuments");

                entity.Property(e => e.DmDelId).HasColumnName("DM_DEL_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmdocEntityMapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMDocEntityMapper");

                entity.Property(e => e.DmDemId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DM_DEM_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.EntityType).HasMaxLength(100);

                entity.Property(e => e.EntityTypeId).HasColumnName("EntityTypeID");
            });

            modelBuilder.Entity<TblDmdocsToBeSubmitted>(entity =>
            {
                entity.HasKey(e => e.DmDsId);

                entity.ToTable("tblDMDocsToBeSubmitted");

                entity.Property(e => e.DmDsId).HasColumnName("DM_DS_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmdocumentAttachmentLevelLinkingMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMDocumentAttachmentLevelLinkingMaster");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SlId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");
            });

            modelBuilder.Entity<TblDmdocumentMaster>(entity =>
            {
                entity.HasKey(e => e.DmId)
                    .HasName("PK__tblDMDocumentMas__76D69450");

                entity.ToTable("tblDMDocumentMaster");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.CollateralId)
                    .HasMaxLength(50)
                    .HasColumnName("CollateralID");

                entity.Property(e => e.CounterPartyId)
                    .HasMaxLength(50)
                    .HasColumnName("CounterPartyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefermentDate).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.Dmslink)
                    .HasMaxLength(500)
                    .HasColumnName("DMSLink");

                entity.Property(e => e.DocId)
                    .HasMaxLength(100)
                    .HasColumnName("Doc_ID");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentStatus).HasMaxLength(50);

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(50)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LodgementDate).HasColumnType("datetime");

                entity.Property(e => e.LodgementId)
                    .HasMaxLength(50)
                    .HasColumnName("LodgementID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ReleaseDate).HasColumnType("date");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(50)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SanctionIssueDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDmdocumentType>(entity =>
            {
                entity.HasKey(e => e.DmDtypid)
                    .HasName("PK__tblDMDocumentTyp__3449B6E4");

                entity.ToTable("tblDMDocumentType");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.ApplicableFor)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DocumentPdfurl)
                    .HasMaxLength(100)
                    .HasColumnName("DocumentPDFURL");

                entity.Property(e => e.DocumentTypeDesc).HasMaxLength(200);

                entity.Property(e => e.DtIsActive)
                    .IsRequired()
                    .HasColumnName("DT_IsActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.EntityName).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PanelClass).HasMaxLength(500);
            });

            modelBuilder.Entity<TblDmdocumentTypeBkp0108>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMDocumentType_bkp0108");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocumentPdfurl)
                    .HasMaxLength(100)
                    .HasColumnName("DocumentPDFURL");

                entity.Property(e => e.DocumentTypeDesc).HasMaxLength(200);

                entity.Property(e => e.DtIsActive).HasColumnName("DT_IsActive");

                entity.Property(e => e.EntityName).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDmguarantorMaster>(entity =>
            {
                entity.HasKey(e => e.DmGrntId)
                    .HasName("PK__tblDMGua__566F5E2FC4A7FC68");

                entity.ToTable("tblDMGuarantorMaster");

                entity.Property(e => e.DmGrntId).HasColumnName("DM_GRNT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.Guarantor).HasMaxLength(500);

                entity.Property(e => e.GuarantorRating).HasMaxLength(100);

                entity.Property(e => e.GuarantorType).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Relationship).HasMaxLength(100);

                entity.Property(e => e.ValidityDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblDminsuranceCertificate>(entity =>
            {
                entity.HasKey(e => e.DmInscertId)
                    .HasName("PK__tblDMIns__50D9EB326CD0EAC8");

                entity.ToTable("tblDMInsuranceCertificate");

                entity.Property(e => e.DmInscertId).HasColumnName("DM_INSCERT_ID");

                entity.Property(e => e.Beneficiary).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.ExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.InsuranceDate).HasColumnType("datetime");

                entity.Property(e => e.InsurancePolicyNumber).HasMaxLength(50);

                entity.Property(e => e.InsuranceType).HasMaxLength(100);

                entity.Property(e => e.Insurer).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SumInsured).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblDmlodgedDocument>(entity =>
            {
                entity.HasKey(e => e.DmlId);

                entity.ToTable("tblDMLodgedDocuments");

                entity.Property(e => e.DmlId).HasColumnName("DML_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmmortgageDeedMaster>(entity =>
            {
                entity.HasKey(e => e.DmMrtdId)
                    .HasName("PK__tblDMMor__4ABFF68CCC5B64E2");

                entity.ToTable("tblDMMortgageDeedMaster");

                entity.Property(e => e.DmMrtdId).HasColumnName("DM_MRTD_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateOfMortgage).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ValuationDate).HasColumnType("datetime");

                entity.Property(e => e.Valuer).HasMaxLength(200);
            });

            modelBuilder.Entity<TblDmnotRequiredDocument>(entity =>
            {
                entity.HasKey(e => e.DmnrId);

                entity.ToTable("tblDMNotRequiredDocuments");

                entity.Property(e => e.DmnrId).HasColumnName("DMNR_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmreleasedDocument>(entity =>
            {
                entity.HasKey(e => e.DmrId);

                entity.ToTable("tblDMReleasedDocuments");

                entity.Property(e => e.DmrId).HasColumnName("DMR_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmsWfdraftTracker>(entity =>
            {
                entity.HasKey(e => e.DmdrftId)
                    .HasName("PK__tblDMS_W__5DCB79A1901AC61E");

                entity.ToTable("tblDMS_WFDraftTracker");

                entity.HasIndex(e => e.DocId, "UQ__tblDMS_W__C41D45C35D16B7DC")
                    .IsUnique();

                entity.Property(e => e.DmdrftId).HasColumnName("DMDRFT_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DmDsId).HasColumnName("DM_DS_ID");

                entity.Property(e => e.DocGuid).HasColumnName("DOC_GUID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(50)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlDraft)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Draft");
            });

            modelBuilder.Entity<TblDmsconstitutionId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSConstitutionID");

                entity.Property(e => e.ConstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONST_ID");

                entity.Property(e => e.ConstValue)
                    .HasMaxLength(20)
                    .HasColumnName("CONST_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmsdocumentId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSDocumentID");

                entity.Property(e => e.DocId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocValue)
                    .HasMaxLength(20)
                    .HasColumnName("DOC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmslopsid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSLOPSID");

                entity.Property(e => e.LopsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LOPS_ID");

                entity.Property(e => e.LopsValue)
                    .HasMaxLength(20)
                    .HasColumnName("LOPS_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmslsmid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSLSMID");

                entity.Property(e => e.LsmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LSM_ID");

                entity.Property(e => e.LsmValue)
                    .HasMaxLength(20)
                    .HasColumnName("LSM_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmspacketid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSPACKETID");

                entity.Property(e => e.PacketId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PACKET_ID");

                entity.Property(e => e.PacketValue)
                    .HasMaxLength(20)
                    .HasColumnName("PACKET_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmsslid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSSLID");

                entity.Property(e => e.SlId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SL_ID");

                entity.Property(e => e.SlValue)
                    .HasMaxLength(20)
                    .HasColumnName("SL_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmsslreferenceId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSSLReferenceID");

                entity.Property(e => e.SlrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SLR_ID");

                entity.Property(e => e.SlrValue)
                    .HasMaxLength(20)
                    .HasColumnName("SLR_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblDmsslreferenceNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMSSLReferenceNumbers");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentReferenceNumber)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Current_Reference_Number");

                entity.Property(e => e.CurrentReferenceNumberM)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Current_Reference_Number_M");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LastReferenceNumber)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Last_Reference_Number");

                entity.Property(e => e.LastReferenceNumberM)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Last_Reference_Number_M");
            });

            modelBuilder.Entity<TblDmtitleDeed>(entity =>
            {
                entity.HasKey(e => e.DmTdId)
                    .HasName("PK__tblDMTit__912ED8FA18543AD8");

                entity.ToTable("tblDMTitleDeed");

                entity.Property(e => e.DmTdId).HasColumnName("DM_TD_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(500);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DmId).HasColumnName("DM_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(500);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OwnerName).HasMaxLength(500);

                entity.Property(e => e.PropertyAddress).HasMaxLength(1000);

                entity.Property(e => e.PropertyType).HasMaxLength(100);
            });

            modelBuilder.Entity<TblDmwaviedDocument>(entity =>
            {
                entity.HasKey(e => e.DmwId)
                    .HasName("PK_tblDMWaivedDocuments");

                entity.ToTable("tblDMWaviedDocuments");

                entity.Property(e => e.DmwId).HasColumnName("DMW_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.Docgentype)
                    .HasMaxLength(100)
                    .HasColumnName("DOCGENTYPE");

                entity.Property(e => e.EntityId)
                    .IsUnicode(false)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(300)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusComplianceCheckListTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMWFActionStatusComplianceCheckListTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstchkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.WfstslId).HasColumnName("WFSTSL_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblDmwfactionStatusComplianceCheckListTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDMWFActionStatusComplianceCheckListTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstchkId).HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.WfstslId).HasColumnName("WFSTSL_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblDmwfactionStatusDoclodgementTracker>(entity =>
            {
                entity.HasKey(e => e.WfstdocId);

                entity.ToTable("tblDMWFActionStatusDOCLodgementTracker");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocrefId).HasColumnName("DOCRef_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(300)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDoc)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Doc");
            });

            modelBuilder.Entity<TblDmwfactionStatusDoclodgementTrackerHistory>(entity =>
            {
                entity.ToTable("tblDMWFActionStatusDOCLodgementTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocrefId).HasColumnName("DOCRef_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(300)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlDoc)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Doc");
            });

            modelBuilder.Entity<TblDmwfactionStatusDocrequestTracker>(entity =>
            {
                entity.HasKey(e => e.WfstdocId);

                entity.ToTable("tblDMWFActionStatusDOCRequestTracker");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocrefId).HasColumnName("DOCRef_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(300)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDoc)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Doc");
            });

            modelBuilder.Entity<TblDmwfactionStatusDocrequestTrackerHistory>(entity =>
            {
                entity.ToTable("tblDMWFActionStatusDOCRequestTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DmDtypid).HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(200)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocrefId).HasColumnName("DOCRef_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(300)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlDoc)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Doc");
            });

            modelBuilder.Entity<TblDmwfactionStatusFacilityPostApprovalTracker>(entity =>
            {
                entity.HasKey(e => e.WfstpafacId);

                entity.ToTable("tblDMWFActionStatusFacilityPostApprovalTracker");

                entity.Property(e => e.WfstpafacId).HasColumnName("WFSTPAFAC_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(200)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFac)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FAC");
            });

            modelBuilder.Entity<TblDmwfactionStatusFacilityPostApprovalTrackerHistory>(entity =>
            {
                entity.ToTable("tblDMWFActionStatusFacilityPostApprovalTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(200)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstpafacId).HasColumnName("WFSTPAFAC_ID");

                entity.Property(e => e.XmlFac)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FAC");
            });

            modelBuilder.Entity<TblDmwfactionStatusLopstracker>(entity =>
            {
                entity.HasKey(e => e.WfstlopsId);

                entity.ToTable("tblDMWFActionStatusLOPSTracker");

                entity.Property(e => e.WfstlopsId).HasColumnName("WFSTLOPS_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.LopsId)
                    .HasMaxLength(200)
                    .HasColumnName("LOPS_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusLopstrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstlopsId);

                entity.ToTable("tblDMWFActionStatusLOPSTracker_History");

                entity.Property(e => e.WfstlopsId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTLOPS_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LopsId)
                    .HasMaxLength(200)
                    .HasColumnName("LOPS_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusLsmtracker>(entity =>
            {
                entity.HasKey(e => e.WfstlsmId);

                entity.ToTable("tblDMWFActionStatusLSMTracker");

                entity.Property(e => e.WfstlsmId).HasColumnName("WFSTLSM_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.LsmId)
                    .HasMaxLength(200)
                    .HasColumnName("LSM_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusLsmtrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstlsmId);

                entity.ToTable("tblDMWFActionStatusLSMTracker_History");

                entity.Property(e => e.WfstlsmId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTLSM_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LsmId)
                    .HasMaxLength(200)
                    .HasColumnName("LSM_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusPackettracker>(entity =>
            {
                entity.HasKey(e => e.WfstpacketId);

                entity.ToTable("tblDMWFActionStatusPACKETTracker");

                entity.Property(e => e.WfstpacketId).HasColumnName("WFSTPACKET_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PacketId)
                    .HasMaxLength(200)
                    .HasColumnName("PACKET_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusPackettrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstpacketId);

                entity.ToTable("tblDMWFActionStatusPACKETTracker_History");

                entity.Property(e => e.WfstpacketId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTPACKET_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PacketId)
                    .HasMaxLength(200)
                    .HasColumnName("PACKET_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblDmwfactionStatusSltracker>(entity =>
            {
                entity.HasKey(e => e.WfstslId);

                entity.ToTable("tblDMWFActionStatusSLTracker");

                entity.Property(e => e.WfstslId).HasColumnName("WFSTSL_ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlSl)
                    .HasColumnType("xml")
                    .HasColumnName("XML_SL");
            });

            modelBuilder.Entity<TblDmwfactionStatusSltrackerHistory>(entity =>
            {
                entity.ToTable("tblDMWFActionStatusSLTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AcknowledgeDate).HasColumnType("datetime");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(200)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(300);

                entity.Property(e => e.SlId)
                    .HasMaxLength(200)
                    .HasColumnName("SL_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstslId).HasColumnName("WFSTSL_ID");

                entity.Property(e => e.XmlSl)
                    .HasColumnType("xml")
                    .HasColumnName("XML_SL");
            });

            modelBuilder.Entity<TblDmwfactionStatusTracker>(entity =>
            {
                entity.HasKey(e => e.WfstdocId)
                    .HasName("PK__tblDMWFA__30E5FDC79EE66850");

                entity.ToTable("tblDMWFActionStatusTracker");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DmDsId).HasColumnName("DM_DS_ID");

                entity.Property(e => e.DocGuid).HasColumnName("DOC_GUID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(50)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.EnvelopId).HasColumnName("ENVELOP_ID");

                entity.Property(e => e.EnvelopStatus).HasColumnName("Envelop_Status");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDmwfactionStatusTrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstdochistId)
                    .HasName("PK__tblDMWFA__35AD2C2A1B3A8BA5");

                entity.ToTable("tblDMWFActionStatusTracker_History");

                entity.Property(e => e.WfstdochistId).HasColumnName("WFSTDOCHIST_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DmDsId).HasColumnName("DM_DS_ID");

                entity.Property(e => e.DocGuid).HasColumnName("DOC_GUID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(50)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .HasColumnName("EntityID");

                entity.Property(e => e.EntityType).HasMaxLength(50);

                entity.Property(e => e.EnvelopId).HasColumnName("ENVELOP_ID");

                entity.Property(e => e.EnvelopStatus).HasColumnName("Envelop_Status");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDoAmatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDoAMatrix");

                entity.Property(e => e.A1doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAName");

                entity.Property(e => e.A1doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAType");

                entity.Property(e => e.A2doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAName");

                entity.Property(e => e.A2doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAType");

                entity.Property(e => e.DoAid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DoAID");

                entity.Property(e => e.DoAname)
                    .HasMaxLength(50)
                    .HasColumnName("DoAName");

                entity.Property(e => e.DoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("DoAType");

                entity.Property(e => e.LRatingOrder).HasColumnName("L_RatingOrder");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.NewDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Operator).HasMaxLength(10);

                entity.Property(e => e.RRatingOrder).HasColumnName("R_RatingOrder");

                entity.Property(e => e.RdoAname)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAName");

                entity.Property(e => e.RdoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAType");
            });

            modelBuilder.Entity<TblDoAmatrixDeviation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDoAMatrix_Deviation");

                entity.Property(e => e.A1doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAName");

                entity.Property(e => e.A1doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAType");

                entity.Property(e => e.A2doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAName");

                entity.Property(e => e.A2doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAType");

                entity.Property(e => e.DoAdid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DoADID");

                entity.Property(e => e.DoAname)
                    .HasMaxLength(50)
                    .HasColumnName("DoAName");

                entity.Property(e => e.DoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("DoAType");

                entity.Property(e => e.DoaRuleId).HasColumnName("DOA_Rule_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.NewDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Operator).HasMaxLength(10);

                entity.Property(e => e.RdoAname)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAName");

                entity.Property(e => e.RdoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAType");
            });

            modelBuilder.Entity<TblDoAmatrixSortOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDoAMatrix_SortOrder");

                entity.Property(e => e.DoAname)
                    .HasMaxLength(50)
                    .HasColumnName("DoAName");

                entity.Property(e => e.DoAsid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DoASID");

                entity.Property(e => e.DoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("DoAType");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");
            });

            modelBuilder.Entity<TblDoaRuleHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDoaRule_History");

                entity.Property(e => e.Drid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DRID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RuleDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RuleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RuleNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDoarule>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDOARules");

                entity.Property(e => e.Drid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DRID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RuleDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RuleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RuleNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblDocsLopsOtcpddstatusRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDocsLopsOTCPDDStatusRpt");

                entity.Property(e => e.ApplicableFor)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("applicableFor");

                entity.Property(e => e.Col1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COL1");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DefermentDueDate).HasColumnType("datetime");

                entity.Property(e => e.DmDtypid)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DM_DTYPID");

                entity.Property(e => e.DocId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DOC_ID");

                entity.Property(e => e.DocumentSystemStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentTypeDesc)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.TypeOfDeferral)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Type of Deferral");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblDocumentationReportHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDocumentationReportHistory_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocmntId)
                    .HasMaxLength(50)
                    .HasColumnName("DOCMNT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(50)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");
            });

            modelBuilder.Entity<TblDocumentationReportRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDocumentationReport_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocmntId)
                    .HasMaxLength(50)
                    .HasColumnName("DOCMNT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(50)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");
            });

            modelBuilder.Entity<TblDpwfactionStatusFoltracker>(entity =>
            {
                entity.HasKey(e => e.DocPrepId);

                entity.ToTable("tblDPWFActionStatusFOLTracker");

                entity.Property(e => e.DocPrepId).HasColumnName("DocPrep_ID");

                entity.Property(e => e.AcknowledgeUserRoleRid).HasColumnName("AcknowledgeUserRoleRID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Comment).HasColumnType("text");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FolGuid).HasColumnName("FOL_GUID");

                entity.Property(e => e.FolId)
                    .HasMaxLength(50)
                    .HasColumnName("FOL_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(100);

                entity.Property(e => e.SubmitterRId).HasColumnName("SubmitterR_ID");

                entity.Property(e => e.SubmitterUid)
                    .HasColumnName("SubmitterUID")
                    .HasComment("Fk to tblUsers");

                entity.Property(e => e.UserAcknowledgeUid)
                    .HasColumnName("UserAcknowledgeUID")
                    .HasComment("FK to tblUsers");

                entity.Property(e => e.WfaId)
                    .HasColumnName("WFA_ID")
                    .HasComment("FK to tblWorkFlowActions");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDpwfactionStatusFoltrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDPWFActionStatusFOLTracker_History");

                entity.Property(e => e.AcknowledgeUserRoleRid).HasColumnName("AcknowledgeUserRoleRID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DocPrepId).HasColumnName("DocPrep_ID");

                entity.Property(e => e.FolGuid).HasColumnName("FOL_GUID");

                entity.Property(e => e.FolId)
                    .HasMaxLength(50)
                    .HasColumnName("FOL_ID");

                entity.Property(e => e.SanctionId).HasMaxLength(100);

                entity.Property(e => e.SubmitterRId).HasColumnName("SubmitterR_ID");

                entity.Property(e => e.SubmitterUid).HasColumnName("SubmitterUID");

                entity.Property(e => e.UserAcknowledgeUid).HasColumnName("UserAcknowledgeUID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblDwfactionStatusCommunicatedFacilityTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDWFActionStatusCommunicatedFacilityTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Appid)
                    .HasMaxLength(20)
                    .HasColumnName("APPID");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DFId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("D_F_ID");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlCommunicatedFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CommunicatedFacility");
            });

            modelBuilder.Entity<TblDwfactionStatusCommunicatedFacilityTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblDWFActionStatusCommunicatedFacilityTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Appid)
                    .HasMaxLength(20)
                    .HasColumnName("APPID");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DFHId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("D_F_H_ID");

                entity.Property(e => e.DFId).HasColumnName("D_F_ID");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlCommunicatedFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CommunicatedFacility");
            });

            modelBuilder.Entity<TblEmailDrincremental>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEmail_DRIncremental");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("email_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<TblEmailRestrictedDomain>(entity =>
            {
                entity.ToTable("tblEmailRestrictedDomain");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.ResEmailId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Res_EmailID");
            });

            modelBuilder.Entity<TblEmailingLogger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEmailingLogger");

                entity.Property(e => e.Bccusers)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BCCUsers");

                entity.Property(e => e.Ccusers)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CCUsers");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ElId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EL_ID");

                entity.Property(e => e.EmailBody).HasMaxLength(2000);

                entity.Property(e => e.EmailSubject).HasMaxLength(500);

                entity.Property(e => e.ToUsers)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblEnvironmentConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEnvironmentConfiguration");

                entity.Property(e => e.CDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("C_Description");

                entity.Property(e => e.CKey)
                    .HasMaxLength(100)
                    .HasColumnName("C_Key");

                entity.Property(e => e.CValue).HasColumnName("C_Value");

                entity.Property(e => e.ConfigType).HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("CreatedBY");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Sno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SNO");

                entity.Property(e => e.Status).HasMaxLength(50);
            });

            modelBuilder.Entity<TblEodautoWithdrawnTaskList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEODAutoWithdrawnTaskList");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CcemailId)
                    .HasMaxLength(1000)
                    .HasColumnName("CCEmailID");

                entity.Property(e => e.CreditCentre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(500);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Region)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SanctioningAuthority)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WorkflowName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblEodautoWithdrawnTaskListHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEODAutoWithdrawnTaskList_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CcemailId)
                    .HasMaxLength(1000)
                    .HasColumnName("CCEmailID");

                entity.Property(e => e.CreditCentre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentUser)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(500);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Region)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SanctioningAuthority)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WorkflowName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblEodtaskListInUserQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEODTaskListInUserQueue");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CcemailId)
                    .HasMaxLength(1000)
                    .HasColumnName("CCEmailID");

                entity.Property(e => e.CreditCentre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(500);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WorkflowName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblEodtaskListInUserQueueHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEODTaskListInUserQueue_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CcemailId)
                    .HasMaxLength(1000)
                    .HasColumnName("CCEmailID");

                entity.Property(e => e.CreditCentre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName).HasMaxLength(500);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .HasColumnName("EmailID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WorkflowName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblEodtaskListManual>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEODTaskListManual");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<TblEscalationDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEscalationDetail");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasColumnName("Role_ID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TblEscalationRoleUserMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEscalationRoleUserMapping");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RoleId).HasColumnName("Role_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblEventsConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblEventsConfiguration");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Ueid)
                    .HasMaxLength(150)
                    .HasColumnName("UEID");
            });

            modelBuilder.Entity<TblExchange>(entity =>
            {
                entity.HasKey(e => e.ExId);

                entity.ToTable("tblExchange");

                entity.Property(e => e.ExId).HasColumnName("EX_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExchangeName).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblExpertsNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExpertsNotes");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Enid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ENID");

                entity.Property(e => e.NwfrId).HasColumnName("NWFR_ID");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblExpertsNotesHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExpertsNotes_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Enid).HasColumnName("ENID");

                entity.Property(e => e.Histenid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HISTENID");

                entity.Property(e => e.NwfrId).HasColumnName("NWFR_ID");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblExposuresBatchDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresBatchDetails");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("datetime")
                    .HasColumnName("PROCESS_DATE");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("REPORT_DATE");

                entity.Property(e => e.RunDate)
                    .HasColumnType("datetime")
                    .HasColumnName("RUN_DATE");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem");

                entity.Property(e => e.Ageing)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing");

                entity.Property(e => e.AgeingCrncy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing_crncy");

                entity.Property(e => e.BgFinancialOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_financial_os");

                entity.Property(e => e.BgPerformanceOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_performance_os");

                entity.Property(e => e.BorrowerCodes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_codes");

                entity.Property(e => e.BorrowerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_description");

                entity.Property(e => e.BorrowerStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_status");

                entity.Property(e => e.BorrowerStatusFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_status_filter");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment");

                entity.Property(e => e.BusinessSegmentDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment_desc");

                entity.Property(e => e.CashCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd");

                entity.Property(e => e.CashCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd_bucket");

                entity.Property(e => e.CashCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dues");

                entity.Property(e => e.CashCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_os");

                entity.Property(e => e.CifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cif_id");

                entity.Property(e => e.CurrencyExtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency_ext_date");

                entity.Property(e => e.CurrentExpiry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Current_Expiry");

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status");

                entity.Property(e => e.CurrentStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status_start_date");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_code");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("entity_id");

                entity.Property(e => e.ExportBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd");

                entity.Property(e => e.ExportBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd_bucket");

                entity.Property(e => e.ExportBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dues");

                entity.Property(e => e.ExportBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_os");

                entity.Property(e => e.ExposureCifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_cif_id");

                entity.Property(e => e.ExposureFbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_fb_os");

                entity.Property(e => e.ExposureNfbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_nfb_os");

                entity.Property(e => e.FbLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_linked_to_facility");

                entity.Property(e => e.FbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd");

                entity.Property(e => e.FbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd_bucket");

                entity.Property(e => e.FbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dues");

                entity.Property(e => e.FbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_os");

                entity.Property(e => e.FbNotLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_not_linked_to_facility");

                entity.Property(e => e.GrossExposureFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Gross_Exposure_Filter");

                entity.Property(e => e.GrossFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_fb_exposure");

                entity.Property(e => e.GrossNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_nfb_exposure");

                entity.Property(e => e.GrossTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_total_exposure");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_code");

                entity.Property(e => e.IndustryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_desc");

                entity.Property(e => e.InlandBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd");

                entity.Property(e => e.InlandBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd_bucket");

                entity.Property(e => e.InlandBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dues");

                entity.Property(e => e.InlandBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_os");

                entity.Property(e => e.InvoiceDiscountingDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd");

                entity.Property(e => e.InvoiceDiscountingDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd_bucket");

                entity.Property(e => e.InvoiceDiscountingDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dues");

                entity.Property(e => e.InvoiceDiscountingOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_os");

                entity.Property(e => e.LcAcceptedOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_accepted_os");

                entity.Property(e => e.LcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_os");

                entity.Property(e => e.LcbdDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd");

                entity.Property(e => e.LcbdDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd_bucket");

                entity.Property(e => e.LcbdDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dues");

                entity.Property(e => e.LcbdOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_os");

                entity.Property(e => e.LimExpDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lim_exp_date");

                entity.Property(e => e.MasterRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("master_rating");

                entity.Property(e => e.ModelRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("model_rating");

                entity.Property(e => e.NetFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_fb_exposure");

                entity.Property(e => e.NetNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_nfb_exposure");

                entity.Property(e => e.NetTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_total_exposure");

                entity.Property(e => e.Nfb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb");

                entity.Property(e => e.NfbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd");

                entity.Property(e => e.NfbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd_bucket");

                entity.Property(e => e.NfbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dues");

                entity.Property(e => e.NfbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_os");

                entity.Property(e => e.OthDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd");

                entity.Property(e => e.OthDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd_bucket");

                entity.Property(e => e.OthDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dues");

                entity.Property(e => e.OthOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_os");

                entity.Property(e => e.PackingCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd");

                entity.Property(e => e.PackingCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd_bucket");

                entity.Property(e => e.PackingCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dues");

                entity.Property(e => e.PackingCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_os");

                entity.Property(e => e.PreviousStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status");

                entity.Property(e => e.PreviousStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status_start_date");

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("report_date");

                entity.Property(e => e.RmFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RM_Filter");

                entity.Property(e => e.RmName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rm_name");

                entity.Property(e => e.SblcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sblc_os");

                entity.Property(e => e.Sma)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sma");

                entity.Property(e => e.SmaFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_Filter");

                entity.Property(e => e.TlwctlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd");

                entity.Property(e => e.TlwctlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd_bucket");

                entity.Property(e => e.TlwctlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dues");

                entity.Property(e => e.TlwctlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_os");

                entity.Property(e => e.TotalFb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_fb");

                entity.Property(e => e.TotalOsInCrores)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_os_in_crores");

                entity.Property(e => e.UserLiab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_liab");

                entity.Property(e => e.WcdlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd");

                entity.Property(e => e.WcdlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd_bucket");

                entity.Property(e => e.WcdlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dues");

                entity.Property(e => e.WcdlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_os");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemBb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_BB");

                entity.Property(e => e.AcctCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_CCY");

                entity.Property(e => e.AcctName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_NAME");

                entity.Property(e => e.AvgUtil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_UTIL");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.ConvRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONV_RATE");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.DrwngPower)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DRWNG_POWER");

                entity.Property(e => e.ExpoEffectiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_EFFECTIVE_DATE");

                entity.Property(e => e.ExpoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_END_DATE");

                entity.Property(e => e.ExpoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_START_DATE");

                entity.Property(e => e.FixedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_INT_RATE");

                entity.Property(e => e.Foracid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORACID");

                entity.Property(e => e.FutureInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FUTURE_INT");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.LienAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIEN_AMT");

                entity.Property(e => e.LimitPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_PREFIX");

                entity.Property(e => e.LimitSuffix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_SUFFIX");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MarginAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_AMT");

                entity.Property(e => e.MarginCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_CCY");

                entity.Property(e => e.NpaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPA_STATUS");

                entity.Property(e => e.OutstandingAcctCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_ACCT_CCY");

                entity.Property(e => e.OutstandingHomeCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_HOME_CCY");

                entity.Property(e => e.PricingRefRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICING_REF_RATE");

                entity.Property(e => e.SanctLim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SANCT_LIM");

                entity.Property(e => e.SchmCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_CODE");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.SmaStat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_STAT");

                entity.Property(e => e.Spread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPREAD");

                entity.Property(e => e.UnutilAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNUTIL_AMT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemBond>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_Bond");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BuyCCY");

                entity.Property(e => e.BuyOrSell)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Clsparty)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLSparty");

                entity.Property(e => e.CoreCusId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CoreCusID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IssuerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IssuerID");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SwiftID");

                entity.Property(e => e.TradeCurency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TraderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TraderID");

                entity.Property(e => e.TreasuryCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TreasuryCustomerID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemBondBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_Bond_BKP");

                entity.Property(e => e.Accrual)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL");

                entity.Property(e => e.AccrualBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_BASE");

                entity.Property(e => e.AvgPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE");

                entity.Property(e => e.AvgPriceBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE_BASE");

                entity.Property(e => e.AvgPriceClean)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE_CLEAN");

                entity.Property(e => e.AvgPriceCleanBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE_CLEAN_BASE");

                entity.Property(e => e.Book)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK");

                entity.Property(e => e.BookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK_VALUE");

                entity.Property(e => e.BookValueBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK_VALUE_BASE");

                entity.Property(e => e.BuySell)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUY_SELL");

                entity.Property(e => e.CleanBookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLEAN_BOOK_VALUE");

                entity.Property(e => e.CleanBookValueBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLEAN_BOOK_VALUE_BASE");

                entity.Property(e => e.Convexity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONVEXITY");

                entity.Property(e => e.ConvexityBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONVEXITY_BASE");

                entity.Property(e => e.CounterpartyAttributeCifId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_ATTRIBUTE_CIF_ID");

                entity.Property(e => e.CounterpartyShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_SHORT_NAME");

                entity.Property(e => e.Coupon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUPON");

                entity.Property(e => e.CouponFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUPON_FREQUENCY");

                entity.Property(e => e.DirtyPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRTY_PRICE");

                entity.Property(e => e.DirtyPriceBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DIRTY_PRICE_BASE");

                entity.Property(e => e.Duration)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DURATION");

                entity.Property(e => e.DurationBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_BASE");

                entity.Property(e => e.ErrorCountPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.ErrorCountPricinganalysisFi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_FI");

                entity.Property(e => e.IssueCreditratingCollateral)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_COLLATERAL");

                entity.Property(e => e.IssueCreditratingDuffPhelps)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_DUFF_PHELPS");

                entity.Property(e => e.IssueCreditratingExternal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_EXTERNAL");

                entity.Property(e => e.IssueCreditratingFimmda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_FIMMDA");

                entity.Property(e => e.IssueCreditratingFitch)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_FITCH");

                entity.Property(e => e.IssueCreditratingInternal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_INTERNAL");

                entity.Property(e => e.IssueCreditratingMarkit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_MARKIT");

                entity.Property(e => e.IssueCreditratingMccarthyCrisantiMaffei)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_MCCARTHY_CRISANTI_MAFFEI");

                entity.Property(e => e.IssueCreditratingMoody)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_MOODY");

                entity.Property(e => e.IssueCreditratingSnp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISSUE_CREDITRATING_SNP");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MarketPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_PRICE");

                entity.Property(e => e.MarketPriceBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_PRICE_BASE");

                entity.Property(e => e.MarketValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_VALUE");

                entity.Property(e => e.MarketValueBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_VALUE_BASE");

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MATURITY_DATE");

                entity.Property(e => e.ModifiedDuration)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIED_DURATION");

                entity.Property(e => e.ModifiedDurationBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODIFIED_DURATION_BASE");

                entity.Property(e => e.NextCallDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_CALL_DATE");

                entity.Property(e => e.NextCouponDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_COUPON_DATE");

                entity.Property(e => e.NextPutDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_PUT_DATE");

                entity.Property(e => e.Nominal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMINAL");

                entity.Property(e => e.Notional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL");

                entity.Property(e => e.NotionalBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_BASE");

                entity.Property(e => e.NotionalPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NotionalPricinganalysisFi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_FI");

                entity.Property(e => e.NpvBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_BASE");

                entity.Property(e => e.NpvNet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_NET");

                entity.Property(e => e.NpvNetBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_NET_BASE");

                entity.Property(e => e.NpvPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NpvPricinganalysisFi)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_FI");

                entity.Property(e => e.PremDisc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PREM_DISC");

                entity.Property(e => e.PremDiscBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PREM_DISC_BASE");

                entity.Property(e => e.PremDiscYield)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PREM_DISC_YIELD");

                entity.Property(e => e.PremDiscYieldBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PREM_DISC_YIELD_BASE");

                entity.Property(e => e.Price)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICE");

                entity.Property(e => e.PriceBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICE_BASE");

                entity.Property(e => e.ProductCodeIsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE_ISIN");

                entity.Property(e => e.ProductCodeProductCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE_PRODUCT_CATEGORY_CODE");

                entity.Property(e => e.ProductCodeProductSubCategoryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE_PRODUCT_SUB_CATEGORY_CODE");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_DESCRIPTION");

                entity.Property(e => e.ProductSubtype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_SUBTYPE");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE");

                entity.Property(e => e.Pv01)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PV01");

                entity.Property(e => e.Pv01Base)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PV01_BASE");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.RemainMaturity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REMAIN_MATURITY");

                entity.Property(e => e.SecurityName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_NAME");

                entity.Property(e => e.SubType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUB_TYPE");

                entity.Property(e => e.TimeToMaturity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TIME_TO_MATURITY");

                entity.Property(e => e.TradeBundle)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_BUNDLE");

                entity.Property(e => e.TradeCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_CURRENCY");

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_DATE");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_ID");

                entity.Property(e => e.Yield)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YIELD");

                entity.Property(e => e.YieldBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YIELD_BASE");

                entity.Property(e => e.YieldSettleDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YIELD_SETTLE_DATE");

                entity.Property(e => e.YieldSettleDateBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("YIELD_SETTLE_DATE_BASE");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemCfd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_CFD");

                entity.Property(e => e.AcctCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_CCY");

                entity.Property(e => e.AcctName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_NAME");

                entity.Property(e => e.AvgUtil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_UTIL");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.ConvRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONV_RATE");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.DrwngPower)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DRWNG_POWER");

                entity.Property(e => e.ExpoEffectiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_EFFECTIVE_DATE");

                entity.Property(e => e.ExpoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_END_DATE");

                entity.Property(e => e.ExpoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_START_DATE");

                entity.Property(e => e.FixedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_INT_RATE");

                entity.Property(e => e.Foracid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORACID");

                entity.Property(e => e.FutureInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FUTURE_INT");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.LienAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIEN_AMT");

                entity.Property(e => e.LimitPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_PREFIX");

                entity.Property(e => e.LimitSuffix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_SUFFIX");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MarginAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_AMT");

                entity.Property(e => e.MarginCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_CCY");

                entity.Property(e => e.NpaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPA_STATUS");

                entity.Property(e => e.OutstandingAcctCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_ACCT_CCY");

                entity.Property(e => e.OutstandingHomeCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_HOME_CCY");

                entity.Property(e => e.PricingRefRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICING_REF_RATE");

                entity.Property(e => e.SanctLim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SANCT_LIM");

                entity.Property(e => e.SchmCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_CODE");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.SmaStat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_STAT");

                entity.Property(e => e.Spread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPREAD");

                entity.Property(e => e.UnutilAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNUTIL_AMT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemEquity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_Equity");

                entity.Property(e => e.ActiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_DATE");

                entity.Property(e => e.AvgPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE");

                entity.Property(e => e.Book)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK");

                entity.Property(e => e.BookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK_VALUE");

                entity.Property(e => e.Corporate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CORPORATE");

                entity.Property(e => e.Counterparty)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.ErrorCountPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.ErrorCountPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.Exchange)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EXCHANGE");

                entity.Property(e => e.InactiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INACTIVE_DATE");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER");

                entity.Property(e => e.LastExDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_EX_DATE");

                entity.Property(e => e.LastPayDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_PAY_DATE");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MarketPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_PRICE");

                entity.Property(e => e.MarketValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_VALUE");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NextDividendDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_DIVIDEND_DATE");

                entity.Property(e => e.NextDividendDateRecordDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_DIVIDEND_DATE_RECORD_DATE");

                entity.Property(e => e.NominalDecimal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMINAL_DECIMAL");

                entity.Property(e => e.NotionalPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NotionalPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.NpvNet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_NET");

                entity.Property(e => e.NpvPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NpvPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.PayDividend)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_DIVIDEND");

                entity.Property(e => e.Price)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICE");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_DESCRIPTION");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Quantity1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.QuoteType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE");

                entity.Property(e => e.Realized)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REALIZED");

                entity.Property(e => e.SettlementAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_AMOUNT");

                entity.Property(e => e.SettlementValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_VALUE");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TotalIssued)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOTAL_ISSUED");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_ID");

                entity.Property(e => e.TradePrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_PRICE");

                entity.Property(e => e.TradeSettleDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_SETTLE_DATE");

                entity.Property(e => e.Tradestatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADESTATUS");

                entity.Property(e => e.TradingSize)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADING_SIZE");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemFxd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_FXD");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BuyCCY");

                entity.Property(e => e.BuyOrSell)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Clsparty)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLSparty");

                entity.Property(e => e.CoreCusId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CoreCusID");

                entity.Property(e => e.FarLeg)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mtmamount)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("MTMAmount");

                entity.Property(e => e.Mtmcurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMCurrency");

                entity.Property(e => e.NearLeg)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceEntity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SellCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SellCCY");

                entity.Property(e => e.SettlementDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SwiftID");

                entity.Property(e => e.TradeCurency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TraderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TraderID");

                entity.Property(e => e.TreasuryCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TreasuryCustomerID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemFxdBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_FXD_BKP");

                entity.Property(e => e.Accrual)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL");

                entity.Property(e => e.AccrualBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_BASE");

                entity.Property(e => e.AccrualPayleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_PAYLEG");

                entity.Property(e => e.AccrualPaylegBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_PAYLEG_BASE");

                entity.Property(e => e.AccrualRecleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_RECLEG");

                entity.Property(e => e.AccrualReclegBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCRUAL_RECLEG_BASE");

                entity.Property(e => e.Amort)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AMORT");

                entity.Property(e => e.Book)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK");

                entity.Property(e => e.BundleName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUNDLE_NAME");

                entity.Property(e => e.BuySell)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUY_SELL");

                entity.Property(e => e.CaNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CA_NOTIONAL");

                entity.Property(e => e.CaNotionalBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CA_NOTIONAL_BASE");

                entity.Property(e => e.Counterparty)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY");

                entity.Property(e => e.CounterpartyAttributeCifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_ATTRIBUTE_CIF_ID");

                entity.Property(e => e.CounterpartyCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_COUNTRY");

                entity.Property(e => e.CounterpartyFinancial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_FINANCIAL");

                entity.Property(e => e.CounterpartyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY_ID");

                entity.Property(e => e.CurNotionalPay)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUR_NOTIONAL_PAY");

                entity.Property(e => e.CurNotionalPayBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUR_NOTIONAL_PAY_BASE");

                entity.Property(e => e.CurNotionalRec)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUR_NOTIONAL_REC");

                entity.Property(e => e.CurNotionalRecBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUR_NOTIONAL_REC_BASE");

                entity.Property(e => e.CurrentNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_NOTIONAL");

                entity.Property(e => e.CurrentNotionalBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_NOTIONAL_BASE");

                entity.Property(e => e.Delta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELTA");

                entity.Property(e => e.Delta01)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELTA_01");

                entity.Property(e => e.Delta01Base)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELTA_01_BASE");

                entity.Property(e => e.DeltaBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DELTA_BASE");

                entity.Property(e => e.DetailedDataBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DETAILED_DATA_BASE");

                entity.Property(e => e.DurationBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DURATION_BASE");

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPIRY_DATE");

                entity.Property(e => e.ExternalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("EXTERNAL_REFERENCE");

                entity.Property(e => e.FinalPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FINAL_PRICE");

                entity.Property(e => e.FixedRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_RATE");

                entity.Property(e => e.FxFarAllinRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FX_FAR_ALLIN_RATE");

                entity.Property(e => e.FxFarPrimAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FX_FAR_PRIM_AMOUNT");

                entity.Property(e => e.FxFarSecAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FX_FAR_SEC_AMOUNT");

                entity.Property(e => e.FxNearAllinRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FX_NEAR_ALLIN_RATE");

                entity.Property(e => e.FxSpotRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FX_SPOT_RATE");

                entity.Property(e => e.Gamma)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GAMMA");

                entity.Property(e => e.GammaBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GAMMA_BASE");

                entity.Property(e => e.InternalDeal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_DEAL");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MATURITY_DATE");

                entity.Property(e => e.Notional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL");

                entity.Property(e => e.NotionalBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_BASE");

                entity.Property(e => e.NpvBasePricinganalysisCadFxoMtm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_BASE_PRICINGANALYSIS_CAD_FXO_MTM");

                entity.Property(e => e.NpvBasePricinganalysisPricingSummary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_BASE_PRICINGANALYSIS_PRICING_SUMMARY");

                entity.Property(e => e.NpvPayleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PAYLEG");

                entity.Property(e => e.NpvPaylegBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PAYLEG_BASE");

                entity.Property(e => e.NpvPricinganalysisCadFxoMtm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_CAD_FXO_MTM");

                entity.Property(e => e.NpvPricinganalysisPricingSummary)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_PRICING_SUMMARY");

                entity.Property(e => e.NpvRecleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_RECLEG");

                entity.Property(e => e.NpvReclegBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_RECLEG_BASE");

                entity.Property(e => e.OutstandingNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_NOTIONAL");

                entity.Property(e => e.Pay)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY");

                entity.Property(e => e.PayLegFixedRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_FIXED_RATE");

                entity.Property(e => e.PayLegFloatingRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_FLOATING_RATE");

                entity.Property(e => e.PayLegIndexFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_INDEX_FREQUENCY");

                entity.Property(e => e.PayLegOutstandingCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_OUTSTANDING_CCY");

                entity.Property(e => e.PayLegOutstandingNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_OUTSTANDING_NOTIONAL");

                entity.Property(e => e.PayLegPaymentFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_PAYMENT_FREQUENCY");

                entity.Property(e => e.PayLegPrincipal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_PRINCIPAL");

                entity.Property(e => e.PayLegRateIndexSpread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_RATE_INDEX_SPREAD");

                entity.Property(e => e.PayLegResetFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_LEG_RESET_FREQUENCY");

                entity.Property(e => e.PrimAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRIM_AMT");

                entity.Property(e => e.PrimCur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRIM_CUR");

                entity.Property(e => e.PrimaryOutstanding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRIMARY_OUTSTANDING");

                entity.Property(e => e.PrincipalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRINCIPAL_AMOUNT");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_DESCRIPTION");

                entity.Property(e => e.ProductFamily)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FAMILY");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE");

                entity.Property(e => e.PutCall)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PUT_CALL");

                entity.Property(e => e.Pv01)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PV01");

                entity.Property(e => e.Pv01Base)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PV01_BASE");

                entity.Property(e => e.RateIndex)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RATE_INDEX");

                entity.Property(e => e.RcvLegFixedRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_FIXED_RATE");

                entity.Property(e => e.RcvLegFloatingRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_FLOATING_RATE");

                entity.Property(e => e.RcvLegIndexFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_INDEX_FREQUENCY");

                entity.Property(e => e.RcvLegOutstandingCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_OUTSTANDING_CCY");

                entity.Property(e => e.RcvLegOutstandingNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_OUTSTANDING_NOTIONAL");

                entity.Property(e => e.RcvLegPaymentFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_PAYMENT_FREQUENCY");

                entity.Property(e => e.RcvLegPrincipal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_PRINCIPAL");

                entity.Property(e => e.RcvLegRateIndexSpread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_RATE_INDEX_SPREAD");

                entity.Property(e => e.RcvLegResetFrequency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RCV_LEG_RESET_FREQUENCY");

                entity.Property(e => e.Receive)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RECEIVE");

                entity.Property(e => e.Rho)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RHO");

                entity.Property(e => e.Rho2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RHO2");

                entity.Property(e => e.Rho2Base)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RHO2_BASE");

                entity.Property(e => e.RhoBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RHO_BASE");

                entity.Property(e => e.SecAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEC_AMT");

                entity.Property(e => e.SecCur)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEC_CUR");

                entity.Property(e => e.SecondaryOutstanding)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SECONDARY_OUTSTANDING");

                entity.Property(e => e.Strike)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STRIKE");

                entity.Property(e => e.Theta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THETA");

                entity.Property(e => e.ThetaBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("THETA_BASE");

                entity.Property(e => e.TradeCurrency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_CURRENCY");

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_DATE");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_ID");

                entity.Property(e => e.TradeKeyword2FxProductcodes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_FX_PRODUCTCODES");

                entity.Property(e => e.TradeKeyword2FxTradetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_FX_TRADETYPE");

                entity.Property(e => e.TradeKeyword2Fxswapfarleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_FXSWAPFARLEG");

                entity.Property(e => e.TradeKeyword2Fxswapnearleg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_FXSWAPNEARLEG");

                entity.Property(e => e.TradeKeyword2MerchantProductcodes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_MERCHANT_PRODUCTCODES");

                entity.Property(e => e.TradeKeyword2Tradetype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_2_TRADETYPE");

                entity.Property(e => e.TradeKeyword3Externalreferenceid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_3_EXTERNALREFERENCEID");

                entity.Property(e => e.TradeKeyword4Opicsid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD_4_OPICSID");

                entity.Property(e => e.TradePrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_PRICE");

                entity.Property(e => e.Trader)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADER");

                entity.Property(e => e.Tradestatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADESTATUS");

                entity.Property(e => e.Vega)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEGA");

                entity.Property(e => e.VegaBase)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VEGA_BASE");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_History");

                entity.Property(e => e.Ageing)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing");

                entity.Property(e => e.AgeingCrncy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing_crncy");

                entity.Property(e => e.BgFinancialOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_financial_os");

                entity.Property(e => e.BgPerformanceOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_performance_os");

                entity.Property(e => e.BkpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bkp_date");

                entity.Property(e => e.BorrowerCodes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_codes");

                entity.Property(e => e.BorrowerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_description");

                entity.Property(e => e.BorrowerStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_status");

                entity.Property(e => e.BorrowerStatusFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_status_filter");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment");

                entity.Property(e => e.BusinessSegmentDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment_desc");

                entity.Property(e => e.CashCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd");

                entity.Property(e => e.CashCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd_bucket");

                entity.Property(e => e.CashCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dues");

                entity.Property(e => e.CashCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_os");

                entity.Property(e => e.CifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cif_id");

                entity.Property(e => e.CurrencyExtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency_ext_date");

                entity.Property(e => e.CurrentExpiry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Current_Expiry");

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status");

                entity.Property(e => e.CurrentStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status_start_date");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_code");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("entity_id");

                entity.Property(e => e.ExportBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd");

                entity.Property(e => e.ExportBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd_bucket");

                entity.Property(e => e.ExportBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dues");

                entity.Property(e => e.ExportBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_os");

                entity.Property(e => e.ExposureCifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_cif_id");

                entity.Property(e => e.ExposureFbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_fb_os");

                entity.Property(e => e.ExposureNfbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_nfb_os");

                entity.Property(e => e.FbLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_linked_to_facility");

                entity.Property(e => e.FbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd");

                entity.Property(e => e.FbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd_bucket");

                entity.Property(e => e.FbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dues");

                entity.Property(e => e.FbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_os");

                entity.Property(e => e.FbNotLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_not_linked_to_facility");

                entity.Property(e => e.GrossExposureFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Gross_Exposure_Filter");

                entity.Property(e => e.GrossFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_fb_exposure");

                entity.Property(e => e.GrossNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_nfb_exposure");

                entity.Property(e => e.GrossTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_total_exposure");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_code");

                entity.Property(e => e.IndustryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_desc");

                entity.Property(e => e.InlandBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd");

                entity.Property(e => e.InlandBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd_bucket");

                entity.Property(e => e.InlandBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dues");

                entity.Property(e => e.InlandBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_os");

                entity.Property(e => e.InvoiceDiscountingDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd");

                entity.Property(e => e.InvoiceDiscountingDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd_bucket");

                entity.Property(e => e.InvoiceDiscountingDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dues");

                entity.Property(e => e.InvoiceDiscountingOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_os");

                entity.Property(e => e.LcAcceptedOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_accepted_os");

                entity.Property(e => e.LcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_os");

                entity.Property(e => e.LcbdDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd");

                entity.Property(e => e.LcbdDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd_bucket");

                entity.Property(e => e.LcbdDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dues");

                entity.Property(e => e.LcbdOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_os");

                entity.Property(e => e.LimExpDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lim_exp_date");

                entity.Property(e => e.MasterRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("master_rating");

                entity.Property(e => e.ModelRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("model_rating");

                entity.Property(e => e.NetFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_fb_exposure");

                entity.Property(e => e.NetNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_nfb_exposure");

                entity.Property(e => e.NetTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_total_exposure");

                entity.Property(e => e.Nfb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb");

                entity.Property(e => e.NfbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd");

                entity.Property(e => e.NfbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd_bucket");

                entity.Property(e => e.NfbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dues");

                entity.Property(e => e.NfbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_os");

                entity.Property(e => e.OthDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd");

                entity.Property(e => e.OthDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd_bucket");

                entity.Property(e => e.OthDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dues");

                entity.Property(e => e.OthOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_os");

                entity.Property(e => e.PackingCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd");

                entity.Property(e => e.PackingCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd_bucket");

                entity.Property(e => e.PackingCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dues");

                entity.Property(e => e.PackingCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_os");

                entity.Property(e => e.PreviousStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status");

                entity.Property(e => e.PreviousStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status_start_date");

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("report_date");

                entity.Property(e => e.RmFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RM_Filter");

                entity.Property(e => e.RmName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rm_name");

                entity.Property(e => e.SblcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sblc_os");

                entity.Property(e => e.Sma)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sma");

                entity.Property(e => e.SmaFilter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_Filter");

                entity.Property(e => e.TlwctlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd");

                entity.Property(e => e.TlwctlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd_bucket");

                entity.Property(e => e.TlwctlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dues");

                entity.Property(e => e.TlwctlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_os");

                entity.Property(e => e.TotalFb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_fb");

                entity.Property(e => e.TotalOsInCrores)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_os_in_crores");

                entity.Property(e => e.UserLiab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_liab");

                entity.Property(e => e.WcdlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd");

                entity.Property(e => e.WcdlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd_bucket");

                entity.Property(e => e.WcdlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dues");

                entity.Property(e => e.WcdlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_os");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemHistoryBb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_History_BB");

                entity.Property(e => e.AcctCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_CCY");

                entity.Property(e => e.AcctName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_NAME");

                entity.Property(e => e.AvgUtil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_UTIL");

                entity.Property(e => e.BkpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("bkp_date");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.ConvRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONV_RATE");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.DrwngPower)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DRWNG_POWER");

                entity.Property(e => e.ExpoEffectiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_EFFECTIVE_DATE");

                entity.Property(e => e.ExpoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_END_DATE");

                entity.Property(e => e.ExpoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_START_DATE");

                entity.Property(e => e.FixedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_INT_RATE");

                entity.Property(e => e.Foracid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORACID");

                entity.Property(e => e.FutureInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FUTURE_INT");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.LienAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIEN_AMT");

                entity.Property(e => e.LimitPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_PREFIX");

                entity.Property(e => e.LimitSuffix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_SUFFIX");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MarginAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_AMT");

                entity.Property(e => e.MarginCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_CCY");

                entity.Property(e => e.NpaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPA_STATUS");

                entity.Property(e => e.OutstandingAcctCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_ACCT_CCY");

                entity.Property(e => e.OutstandingHomeCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_HOME_CCY");

                entity.Property(e => e.PricingRefRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICING_REF_RATE");

                entity.Property(e => e.SanctLim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SANCT_LIM");

                entity.Property(e => e.SchmCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_CODE");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.SmaStat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_STAT");

                entity.Property(e => e.Spread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPREAD");

                entity.Property(e => e.UnutilAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNUTIL_AMT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<TblExposuresuploadSourceSystemRepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExposuresuploadSourceSystem_Repo");

                entity.Property(e => e.BookAttrDesk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Book_Attr_Desk");

                entity.Property(e => e.BookId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Book_Id");

                entity.Property(e => e.CounterPartyAttributeCifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CounterParty_Attribute_CIF_Id");

                entity.Property(e => e.CounterPartyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CounterParty_ID");

                entity.Property(e => e.CurrentNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Current_Notional");

                entity.Property(e => e.DateRoll)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Date_Roll");

                entity.Property(e => e.GlNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GL_Number");

                entity.Property(e => e.Holidays)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.PricerAccrual)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Pricer_ACCRUAL");

                entity.Property(e => e.PricerCleanBookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Pricer_CLEAN_BOOK_VALUE");

                entity.Property(e => e.PrincipalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Principal_Amount");

                entity.Property(e => e.ProcessingOrgId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Processing_Org_ID");

                entity.Property(e => e.ProcessingOrgShortName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Processing_Org_Short_Name");

                entity.Property(e => e.ProductCodeIsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE_ISIN");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Product_Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product_Id");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product_Type");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_End_Date");

                entity.Property(e => e.RepoFixedRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Fixed_Rate");

                entity.Property(e => e.RepoPriceAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPO_PRICE_AMT");

                entity.Property(e => e.RepoReverse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Reverse");

                entity.Property(e => e.RepoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Start_Date");

                entity.Property(e => e.TradeComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Comment");

                entity.Property(e => e.TradeCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Currency");

                entity.Property(e => e.TradeDayCount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Day_Count");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Id");

                entity.Property(e => e.TradeKeyword2FitradeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD2_FITradeType");

                entity.Property(e => e.TradeStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Trader)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingProductCodeIsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Underlying_Product_Code_ISIN");

                entity.Property(e => e.UnderlyingSecurityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Underlying_Security_Id");

                entity.Property(e => e.XBookValueAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_BOOK_VALUE_AMT");

                entity.Property(e => e.XDealPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_DEAL_PRICE");
            });

            modelBuilder.Entity<TblExtBorrowerInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExtBorrowerInfo");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModelId).HasColumnName("MODEL_ID");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(300)
                    .HasColumnName("SERVICE_STATUS");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<TblExtBorrowerInfoHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExtBorrowerInfo_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Mid).HasColumnName("MID");

                entity.Property(e => e.ModelId).HasColumnName("MODEL_ID");

                entity.Property(e => e.ServiceStatus)
                    .HasMaxLength(300)
                    .HasColumnName("SERVICE_STATUS");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");
            });

            modelBuilder.Entity<TblExternalCustomerUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalCustomerUpload");

                entity.Property(e => e.AverageAnnualIncome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AVERAGE_ANNUAL_INCOME");

                entity.Property(e => e.CorpKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CORP_KEY");

                entity.Property(e => e.CountryOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_OF_INCORPORATION");

                entity.Property(e => e.CustName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SINCE");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_TYPE");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.DateOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_INCORPORATION");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.Industry)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY");

                entity.Property(e => e.InternalRating)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_RATING");

                entity.Property(e => e.InternalRatingDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_RATING_DESCRIPTION");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_CONSTITUTION_TYPE");

                entity.Property(e => e.LegalConstitutionTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_CONSTITUTION_TYPE_DESCRIPTION");

                entity.Property(e => e.MailingAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS");

                entity.Property(e => e.MailingAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_CITY");

                entity.Property(e => e.MailingAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_COUNTRY");

                entity.Property(e => e.MailingAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_STATE");

                entity.Property(e => e.Manager)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MANAGER");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MOBILE");

                entity.Property(e => e.OrganizationCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_CODE");

                entity.Property(e => e.OrganizationDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_DESCRIPTION");

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.RegOffcAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS");

                entity.Property(e => e.RegOffcAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_CITY");

                entity.Property(e => e.RegOffcAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_COUNTRY");

                entity.Property(e => e.RegOffcAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_STATE");

                entity.Property(e => e.SectorCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECTOR_CODE");

                entity.Property(e => e.SectorDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECTOR_DESCRIPTION");

                entity.Property(e => e.Segment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT");

                entity.Property(e => e.Subsector)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSECTOR");

                entity.Property(e => e.SubsectorDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBSECTOR_DESCRIPTION");

                entity.Property(e => e.Subsegment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSEGMENT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<TblExternalCustomerUploadHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalCustomerUpload_History");

                entity.Property(e => e.CorpKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CORP_KEY");

                entity.Property(e => e.CountryOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_OF_INCORPORATION");

                entity.Property(e => e.CustName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SINCE");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_TYPE");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.DateOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_INCORPORATION");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.Industry)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY");

                entity.Property(e => e.InternalRating)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_RATING");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_CONSTITUTION_TYPE");

                entity.Property(e => e.MailingAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS");

                entity.Property(e => e.MailingAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_CITY");

                entity.Property(e => e.MailingAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_COUNTRY");

                entity.Property(e => e.MailingAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_STATE");

                entity.Property(e => e.Manager)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MANAGER");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MOBILE");

                entity.Property(e => e.OrganizationCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_CODE");

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.RegOffcAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS");

                entity.Property(e => e.RegOffcAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_CITY");

                entity.Property(e => e.RegOffcAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_COUNTRY");

                entity.Property(e => e.RegOffcAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_STATE");

                entity.Property(e => e.Segment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT");

                entity.Property(e => e.Subsector)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSECTOR");

                entity.Property(e => e.Subsegment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSEGMENT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<TblExternalFileUploadTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalFileUploadTracker");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasPrecision(3);

                entity.Property(e => e.ExternalDocRef)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Fid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FID");

                entity.Property(e => e.FileMasterObject)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MasterObjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MasterObjectID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UploadOn).HasPrecision(3);
            });

            modelBuilder.Entity<TblExternalFileUploadTrackerAutoUploadLog>(entity =>
            {
                entity.ToTable("tblExternalFileUploadTrackerAutoUploadLogs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttemptDateTime).HasColumnType("datetime");

                entity.Property(e => e.AttemptStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fid).HasColumnName("FID");
            });

            modelBuilder.Entity<TblExternalFileUploadTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalFileUploadTrackerHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasPrecision(3);

                entity.Property(e => e.ExternalDocRef)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Fid).HasColumnName("FID");

                entity.Property(e => e.FileMasterObject)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.FilePath)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MasterObjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MasterObjectID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UploadOn).HasPrecision(3);
            });

            modelBuilder.Entity<TblExternalMasterMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalMasterMapping");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Key)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KEY");

                entity.Property(e => e.Keytype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("KEYTYPE");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MstId)
                    .IsUnicode(false)
                    .HasColumnName("MST_ID");

                entity.Property(e => e.MstSourceId)
                    .IsUnicode(false)
                    .HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblExternalUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblExternalUsers");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .HasColumnName("MName");

                entity.Property(e => e.Mobile).HasMaxLength(35);

                entity.Property(e => e.MobileOtp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MobileOTP");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OtherDetails).IsUnicode(false);

                entity.Property(e => e.Password).HasMaxLength(25);

                entity.Property(e => e.UId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("U_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");

                entity.Property(e => e.UserToken).HasMaxLength(200);

                entity.Property(e => e.WebOtp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("WebOTP");
            });

            modelBuilder.Entity<TblFacaggregateType1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl_FACAggregateType1");

                entity.Property(e => e.AggrTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AggrTypeID");

                entity.Property(e => e.AggrTypeName).HasMaxLength(100);
            });

            modelBuilder.Entity<TblFacilityAccountMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFacilityAccountMapping");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MasterObjectId).HasColumnName("MasterObjectID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OtherDetails).IsUnicode(false);
            });

            modelBuilder.Entity<TblFacilityDailyUploadDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFacility_DailyUploadData");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(20)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.ExistingCbslimitAmount)
                    .HasMaxLength(100)
                    .HasColumnName("ExistingCBSLimitAmount");

                entity.Property(e => e.ExistingCbslimitCurrencyDesc)
                    .HasMaxLength(10)
                    .HasColumnName("ExistingCBSLimitCurrencyDesc");

                entity.Property(e => e.ExposureEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExposureStartDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(40)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LimitReferenceCode).HasMaxLength(50);

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product_Type");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.UtilizationAmount).HasMaxLength(100);

                entity.Property(e => e.UtilizationCurrencyDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<TblFacilitySubtypePpsmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFacilitySubtypePPSMapper");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.Fstpmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTPMID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId).HasColumnName("PP_ID");
            });

            modelBuilder.Entity<TblFacilitySubtypePpsmapperBkp0501>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFacilitySubtypePPSMapper_bkp0501");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.Fstpmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTPMID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId).HasColumnName("PP_ID");
            });

            modelBuilder.Entity<TblFacilitySubtypePpsmapperBkp20501>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFacilitySubtypePPSMapper_bkp20501");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.Fstpmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTPMID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId).HasColumnName("PP_ID");
            });

            modelBuilder.Entity<TblFalmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFALMapper");

                entity.Property(e => e.FieldName).HasMaxLength(200);

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.Xmlmapping).HasColumnName("XMLMapping");
            });

            modelBuilder.Entity<TblFavCounterparty>(entity =>
            {
                entity.ToTable("tblFavCounterparty");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblFieldsConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFieldsConfigurations");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FieldsConfig).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PageName).HasMaxLength(200);
            });

            modelBuilder.Entity<TblFileMovement>(entity =>
            {
                entity.HasKey(e => e.SId);

                entity.ToTable("tblFileMovement");

                entity.Property(e => e.SId).HasColumnName("S_ID");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileStatus)
                    .HasMaxLength(20)
                    .HasColumnName("File_Status");

                entity.Property(e => e.FileType)
                    .HasMaxLength(100)
                    .HasColumnName("File_Type");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Transfer_Date");
            });

            modelBuilder.Entity<TblFileMovementHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFileMovement_history");

                entity.Property(e => e.FileName)
                    .HasMaxLength(1000)
                    .HasColumnName("File_Name");

                entity.Property(e => e.FileStatus)
                    .HasMaxLength(20)
                    .HasColumnName("File_Status");

                entity.Property(e => e.FileType)
                    .HasMaxLength(100)
                    .HasColumnName("File_Type");

                entity.Property(e => e.SId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("S_ID");

                entity.Property(e => e.TransferDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Transfer_Date");
            });

            modelBuilder.Entity<TblFileUploadServiceConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFileUploadServiceConfig");

                entity.Property(e => e.ArchivalStoredProcedure).HasMaxLength(100);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasPrecision(3);

                entity.Property(e => e.DestinationTable).HasMaxLength(100);

                entity.Property(e => e.FailedPath).HasMaxLength(500);

                entity.Property(e => e.FileDelimiter).HasMaxLength(5);

                entity.Property(e => e.FileExtension).HasMaxLength(10);

                entity.Property(e => e.FilePath).HasMaxLength(500);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasPrecision(3);

                entity.Property(e => e.PostUploadCsfunction)
                    .HasMaxLength(100)
                    .HasColumnName("PostUploadCSFunction");

                entity.Property(e => e.ProcessedPath).HasMaxLength(500);

                entity.Property(e => e.ServiceKey).HasMaxLength(100);

                entity.Property(e => e.UploadFileName).HasMaxLength(200);

                entity.Property(e => e.WorkingFolderPath).HasMaxLength(500);

                entity.Property(e => e.ZipFileName).HasMaxLength(200);
            });

            modelBuilder.Entity<TblFinCompMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("tblFin_comp_master");

                entity.Property(e => e.CompName)
                    .HasMaxLength(200)
                    .HasColumnName("comp_name");

                entity.Property(e => e.CompSubType).HasColumnName("comp_sub_type");

                entity.Property(e => e.CompType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("comp_type");

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.DisplaySeq).HasColumnName("display_seq");

                entity.Property(e => e.FinCompId).HasColumnName("Fin_comp_id");

                entity.Property(e => e.PrintName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Print_name");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinCovenantTextMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinCovenantTextMaster");

                entity.Property(e => e.FinCovenantText).HasMaxLength(500);

                entity.Property(e => e.FinCovenantTextId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FinCovenantTextID");
            });

            modelBuilder.Entity<TblFinFinalFormula>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFin_final_formula");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinFinalFormulaSen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFin_final_formula_Sen");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasColumnName("formula");

                entity.Property(e => e.Seq).HasColumnName("seq");

                entity.Property(e => e.Sno).HasColumnName("sno");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinFormula>(entity =>
            {
                entity.HasKey(e => e.FinCompId);

                entity.ToTable("tblFin_Formulas");

                entity.Property(e => e.FinCompId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Fin_comp_id");

                entity.Property(e => e.EffectiveFrom)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("EFFECTIVE_FROM");

                entity.Property(e => e.Formula)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("FORMULA");

                entity.Property(e => e.LastFormula)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("LAST_FORMULA");

                entity.Property(e => e.LastUpdateValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_UPDATE_VALUE");

                entity.Property(e => e.SeqNo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("SEQ_NO");

                entity.Property(e => e.TemplateId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TEMPLATE_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinHistory>(entity =>
            {
                entity.HasKey(e => new { e.CtptId, e.FinYear, e.FinMonth, e.FinCompId, e.StmtId, e.TmpId })
                    .HasName("PKEY_PAY_HISTORY");

                entity.ToTable("tblFin_history");

                entity.Property(e => e.CtptId).HasColumnName("ctpt_id");

                entity.Property(e => e.FinYear).HasColumnName("Fin_year");

                entity.Property(e => e.FinMonth).HasColumnName("Fin_month");

                entity.Property(e => e.FinCompId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Fin_comp_id");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.AdId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ad_id");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(24, 6)")
                    .HasColumnName("amount");

                entity.Property(e => e.FinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Fin_date");
            });

            modelBuilder.Entity<TblFinHistorySen>(entity =>
            {
                entity.HasKey(e => new { e.CtptId, e.FinYear, e.FinMonth, e.FinCompId, e.StmtId, e.TmpId })
                    .HasName("PKEY_PAY_HISTORY_Sen");

                entity.ToTable("tblFin_history_Sen");

                entity.Property(e => e.CtptId).HasColumnName("ctpt_id");

                entity.Property(e => e.FinYear).HasColumnName("Fin_year");

                entity.Property(e => e.FinMonth).HasColumnName("Fin_month");

                entity.Property(e => e.FinCompId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Fin_comp_id");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.AdId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ad_id");

                entity.Property(e => e.Amount)
                    .HasColumnType("numeric(24, 6)")
                    .HasColumnName("amount");

                entity.Property(e => e.FinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Fin_date");
            });

            modelBuilder.Entity<TblFinancialModelTempMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancial_MODEL_TEMP_Map");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MtId).HasColumnName("MT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinancialSensitivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancial_sensitivity");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.PercentChange)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("PERCENT_CHANGE");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinancialsAdj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancials_adj");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CtptId).HasColumnName("ctpt_id");

                entity.Property(e => e.FinCompId).HasColumnName("Fin_comp_id");

                entity.Property(e => e.FinMonth).HasColumnName("Fin_month");

                entity.Property(e => e.FinYear).HasColumnName("Fin_year");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remarks");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinancialsAdjSen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancials_adj_Sen");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CtptId).HasColumnName("ctpt_id");

                entity.Property(e => e.FinCompId).HasColumnName("Fin_comp_id");

                entity.Property(e => e.FinMonth).HasColumnName("Fin_month");

                entity.Property(e => e.FinYear).HasColumnName("Fin_year");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("remarks");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblFinancialsUploadExcel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancialsUploadExcel");

                entity.Property(e => e.Col1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col16)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col17)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col18)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col19)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col20)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col21)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col22)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col23)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col24)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col25)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col26)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col27)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col28)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col29)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col30)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col31)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col32)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col33)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblFinancialsUploadSourceSystem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFinancialsUploadSourceSystem");

                entity.Property(e => e.AuditMethodId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("AUDIT_METHOD_ID");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.Coarow)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("COAROW");

                entity.Property(e => e.Datafeeddate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.FinType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FIN_TYPE");

                entity.Property(e => e.ItemName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_NAME");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.Period)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("PERIOD");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.SectionName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SECTION_NAME");

                entity.Property(e => e.Stmtdt)
                    .HasColumnType("datetime")
                    .HasColumnName("STMTDT");

                entity.Property(e => e.Stmtid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("STMTID");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Value)
                    .HasColumnType("numeric(15, 2)")
                    .HasColumnName("VALUE");
            });

            modelBuilder.Entity<TblFraudulent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFraudulent");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.CausativeFactors)
                    .IsUnicode(false)
                    .HasColumnName("Causative factors");

                entity.Property(e => e.ModusOperandi)
                    .IsUnicode(false)
                    .HasColumnName("Modus operandi");

                entity.Property(e => e.NameOfThePartyInWhoseAccountTheFraudOccurred)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Party in whose account the Fraud occurred");

                entity.Property(e => e.NatureOfFraud)
                    .IsUnicode(false)
                    .HasColumnName("Nature of Fraud");

                entity.Property(e => e.SeriousIrregularitiesObserved)
                    .IsUnicode(false)
                    .HasColumnName("Serious irregularities observed");

                entity.Property(e => e.SrNo)
                    .IsUnicode(false)
                    .HasColumnName("Sr No");
            });

            modelBuilder.Entity<TblFxRateIntegration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFxRateIntegration");

                entity.Property(e => e.ConvUnits)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONV_UNITS");

                entity.Property(e => e.ForeignCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FOREIGN_CCY");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.Ratecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RATECODE");
            });

            modelBuilder.Entity<TblFxRateIntegrationHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblFxRateIntegrationHistory");

                entity.Property(e => e.ConvUnits)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONV_UNITS");

                entity.Property(e => e.ForeignCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FOREIGN_CCY");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.Ratecode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RATECODE");
            });

            modelBuilder.Entity<TblGeoTaggingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGeoTaggingDetails");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.GeoDetails)
                    .HasColumnType("text")
                    .HasColumnName("Geo_Details");

                entity.Property(e => e.GeoId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GEO_ID");

                entity.Property(e => e.GtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GT_ID");

                entity.Property(e => e.LocationImage).HasColumnName("Location_Image");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblGeoTaggingId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGeoTaggingID");

                entity.Property(e => e.GtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("GT_ID");

                entity.Property(e => e.GtValue)
                    .HasMaxLength(20)
                    .HasColumnName("GT_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblGlobalCreditCheckByEntity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalCreditCheckByEntity");

                entity.Property(e => e.CheckType).HasMaxLength(100);

                entity.Property(e => e.Checks).HasColumnType("xml");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EntityName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<TblGlobalCreditCheckByEntityWithoutIdentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalCreditCheckByEntityWithoutIdentifier");

                entity.Property(e => e.CheckType).HasMaxLength(100);

                entity.Property(e => e.Checks).HasColumnType("xml");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.EntityIdWi).HasColumnName("EntityID_WI");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            });

            modelBuilder.Entity<TblGlobalEntityCustomerRelationshipMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalEntityCustomerRelationshipMaster");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptUniqueId)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_UniqueID");

                entity.Property(e => e.EntityId).HasColumnName("EntityID");

                entity.Property(e => e.EntityIdWi).HasColumnName("EntityID_WI");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Relationship)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblGlobalEntityDetailsMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalEntityDetailsMaster");

                entity.Property(e => e.Aadhaar)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Entity_Type");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MobileNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OtherEntityDetails).HasColumnType("xml");

                entity.Property(e => e.Pan)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAN");
            });

            modelBuilder.Entity<TblGlobalEntityDetailsMasterWithoutIdentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalEntityDetailsMasterWithoutIdentifier");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CtptUniqueId)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_UniqueID");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Entity_Type");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MobileNumber).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblGlobalIdentifiersDetailsMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalIdentifiersDetailsMaster");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.Data).HasColumnType("xml");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdentifierId).HasColumnName("IdentifierID");

                entity.Property(e => e.IdentifierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdentifierValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblGlobalMcaorder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGlobalMCAOrder");

                entity.Property(e => e.Cin)
                    .HasMaxLength(100)
                    .HasColumnName("CIN");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.OrderReference).HasMaxLength(100);

                entity.Property(e => e.OrderStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<TblGstanalysisDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGSTAnalysisDetails");

                entity.Property(e => e.AvgInvoiceValueSalesNoOfInvoices)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Avg_Invoice_Value_Sales_No_of_Invoices");

                entity.Property(e => e.AvgInvoiceValueSalesValueOfInvoice)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Avg_Invoice_Value_Sales_Value_Of_invoice");

                entity.Property(e => e.AvgOfInvoicesPurchasesNoOfInvoices)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Avg_of_Invoices_Purchases_No_of_Invoices");

                entity.Property(e => e.AvgOfInvoicesPurchasesValueOfInvoice)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Avg_of_Invoices_Purchases_Value_Of_invoice");

                entity.Property(e => e.Constitution)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContOfTop5BuyersPerOfTotalSales)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Cont_of_Top_5_Buyers_Per_of_Total_Sales");

                entity.Property(e => e.ContOfTop5BuyersValue)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Cont_of_Top_5_Buyers_Value");

                entity.Property(e => e.ContOfTop5VendorsPerOfTotalSales)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Cont_of_Top_5_Vendors_Per_of_Total_Sales");

                entity.Property(e => e.ContOfTop5VendorsValue)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Cont_of_Top_5_Vendors_Value");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DomesticSales)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Domestic_Sales");

                entity.Property(e => e.ExportSales)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Export_Sales");

                entity.Property(e => e.Fforder)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FFOrder");

                entity.Property(e => e.GeneralSuppliesPurchases)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("General_Supplies_Purchases");

                entity.Property(e => e.GstNumber)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("GST_Number");

                entity.Property(e => e.GstPaid)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("GST_Paid");

                entity.Property(e => e.Gstin)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GSTIN");

                entity.Property(e => e.Gstr1FilingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GSTR1_Filing_Date");

                entity.Property(e => e.Gstr3bFilingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GSTR3B_Filing_Date");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.InwardSuppliesLiableToReverseCharge)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("inward_supplies_liable_to_reverse_charge");

                entity.Property(e => e.LatestFforder)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Latest_FFOrder");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Name");

                entity.Property(e => e.LenderBranch)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LenderDivision)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LenderReferenceNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NonGstOutwardSupplies)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("non_gst_outward_supplies");

                entity.Property(e => e.OtherOutwardSuppliesNilRatedExempted)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("other_outward_supplies_nil_rated_exempted");

                entity.Property(e => e.OutwardTaxableSupplies)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("outward_taxable_supplies");

                entity.Property(e => e.OutwardTaxableSuppliesZeroRated)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("outward_taxable_supplies_zero_rated");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Registration_Date");

                entity.Property(e => e.State)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPaid3bReportInterestFeePaidInCash)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("TaxPaid3bReport_Interest_Fee_Paid_in_Cash");

                entity.Property(e => e.TaxPaid3bReportLateFeePaidInCash)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("TaxPaid3bReport_Late_Fee_Paid_in_Cash");

                entity.Property(e => e.TaxPaid3bReportTaxPaidInCash)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("TaxPaid3bReport_Tax_paid_in_Cash");

                entity.Property(e => e.TaxPaid3bReportTaxPaidThroughItc)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("TaxPaid3bReport_Tax_paid_through_ITC");

                entity.Property(e => e.TaxPaid3bReportTotalTaxPayable)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("TaxPaid3bReport_Total_Tax_payable");

                entity.Property(e => e.TaxPaidThroughItcCentralTax)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Tax_paid_through_ITC_Central_Tax");

                entity.Property(e => e.TaxPaidThroughItcCess)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Tax_paid_through_ITC_Cess");

                entity.Property(e => e.TaxPaidThroughItcIntegratedTax)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Tax_paid_through_ITC_Integrated_Tax");

                entity.Property(e => e.TaxPaidThroughItcStateTax)
                    .HasColumnType("decimal(18, 9)")
                    .HasColumnName("Tax_paid_through_ITC_State_Tax");

                entity.Property(e => e.TaxpayerType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Taxpayer_Type");

                entity.Property(e => e.UpdateSource)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Update_Source");
            });

            modelBuilder.Entity<TblGststatusDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGSTStatusDetails");

                entity.Property(e => e.AnalysisDataIncomingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisDataOutgoingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisDataProcessedOn).HasColumnType("datetime");

                entity.Property(e => e.AnalysisDataReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EmailId1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID1");

                entity.Property(e => e.EmailId2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID2");

                entity.Property(e => e.FileProcessedOn).HasColumnType("datetime");

                entity.Property(e => e.FileReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.FilesIncomingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilesOutgoingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GstNumber)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("GST_Number");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.OrderClosedOn).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.OrderRequestStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderResponseStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSendOn).HasColumnType("datetime");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblGststatusDetailsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblGSTStatusDetails_History");

                entity.Property(e => e.AnalysisDataIncomingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisDataOutgoingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AnalysisDataProcessedOn).HasColumnType("datetime");

                entity.Property(e => e.AnalysisDataReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EmailId1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID1");

                entity.Property(e => e.EmailId2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EmailID2");

                entity.Property(e => e.FileProcessedOn).HasColumnType("datetime");

                entity.Property(e => e.FileReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.FilesIncomingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FilesOutgoingStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GstNumber)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("GST_Number");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrderClosedOn).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderReceivedOn).HasColumnType("datetime");

                entity.Property(e => e.OrderRequestStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderResponseStatus)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OrderSendOn).HasColumnType("datetime");

                entity.Property(e => e.Phone1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Phone2)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblHandlerUnitValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblHandlerUnitValue");

                entity.Property(e => e.Huid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HUID");

                entity.Property(e => e.Unit)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UnitDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblHelp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblHelp");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.FileName).HasMaxLength(50);

                entity.Property(e => e.FilePath).HasMaxLength(200);

                entity.Property(e => e.HelpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Help_ID");

                entity.Property(e => e.HelpText).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentHelpId).HasColumnName("Parent_Help_ID");
            });

            modelBuilder.Entity<TblIbareported>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIBAReported");

                entity.Property(e => e.AmountInvolvedInLacs)
                    .IsUnicode(false)
                    .HasColumnName("Amount Involved In Lacs");

                entity.Property(e => e.AreaOfOperation)
                    .IsUnicode(false)
                    .HasColumnName("Area Of Operation");

                entity.Property(e => e.BriefHistoryAndModusOperandi)
                    .IsUnicode(false)
                    .HasColumnName("Brief History and Modus Operandi");

                entity.Property(e => e.CircularDate)
                    .IsUnicode(false)
                    .HasColumnName("Circular Date");

                entity.Property(e => e.CircularNo)
                    .IsUnicode(false)
                    .HasColumnName("Circular No");

                entity.Property(e => e.DateOfDetection)
                    .IsUnicode(false)
                    .HasColumnName("Date of Detection");

                entity.Property(e => e.DateOfOccurrence)
                    .IsUnicode(false)
                    .HasColumnName("Date of Occurrence");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.NatureOfFraud)
                    .IsUnicode(false)
                    .HasColumnName("Nature Of Fraud");

                entity.Property(e => e.PlaceOfOccurance)
                    .IsUnicode(false)
                    .HasColumnName("Place Of Occurance");

                entity.Property(e => e.RelationshipToBank)
                    .IsUnicode(false)
                    .HasColumnName("Relationship to Bank");

                entity.Property(e => e.RelationshipToIncident)
                    .IsUnicode(false)
                    .HasColumnName("Relationship to Incident");

                entity.Property(e => e.ReportedBankName)
                    .IsUnicode(false)
                    .HasColumnName("Reported Bank Name");

                entity.Property(e => e.SNo)
                    .IsUnicode(false)
                    .HasColumnName("S.No");

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.VendorType)
                    .IsUnicode(false)
                    .HasColumnName("Vendor Type");
            });

            modelBuilder.Entity<TblIexternalSystemXmlUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIExternalSystemXmlUpload");

                entity.Property(e => e.Entity).HasMaxLength(20);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.SystemName).HasMaxLength(200);

                entity.Property(e => e.XmlFileName).HasMaxLength(500);

                entity.Property(e => e.XmlFilePath).HasMaxLength(500);

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("Xml_In");

                entity.Property(e => e.XuId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XU_ID");
            });

            modelBuilder.Entity<TblIinterfaceXmlMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIInterfaceXmlMapping");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Entity).HasMaxLength(50);

                entity.Property(e => e.ExternalSystemXmlNode).HasMaxLength(200);

                entity.Property(e => e.InternalSystemXmlNode).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectFieldName).HasMaxLength(50);

                entity.Property(e => e.XmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XM_ID");

                entity.Property(e => e.XuId).HasColumnName("XU_ID");
            });

            modelBuilder.Entity<TblIndustry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIndustry");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IndId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IND_ID");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.IndustryCode).HasMaxLength(30);

                entity.Property(e => e.IsCaution).HasDefaultValueSql("(N'0')");

                entity.Property(e => e.IsNegative).HasDefaultValueSql("(N'0')");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.Sector).HasMaxLength(200);

                entity.Property(e => e.SectorCode).HasMaxLength(30);

                entity.Property(e => e.SubSector).HasMaxLength(200);

                entity.Property(e => e.SubSectorCode).HasMaxLength(30);
            });

            modelBuilder.Entity<TblIndustryBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIndustry_bkp");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IndId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IND_ID");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.IndustryCode).HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.Sector).HasMaxLength(200);

                entity.Property(e => e.SectorCode).HasMaxLength(30);

                entity.Property(e => e.SubSector).HasMaxLength(200);

                entity.Property(e => e.SubSectorCode).HasMaxLength(30);
            });

            modelBuilder.Entity<TblIndustryExposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIndustryExposure");

                entity.Property(e => e.DerivativeMtm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DerivativeMTM");

                entity.Property(e => e.Fbadvances)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FBAdvances");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IndustryName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Investments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nfbadvances)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NFBAdvances");

                entity.Property(e => e.PercentageTotalInGrossGl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PercentageTotalInGrossGL");

                entity.Property(e => e.Total)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblIndustryExposureUpoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIndustryExposureUpoad");

                entity.Property(e => e.DerivativeMtm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DerivativeMTM");

                entity.Property(e => e.Fbadvances)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FBAdvances");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IndustryName)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Investments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nfbadvances)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NFBAdvances");

                entity.Property(e => e.PercentageTotalInGrossGl)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PercentageTotalInGrossGL");

                entity.Property(e => e.Total)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblIndustryHeirarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblIndustryHeirarchy");

                entity.Property(e => e.HId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("H_ID");

                entity.Property(e => e.IndCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IND_CODE");

                entity.Property(e => e.IndId).HasColumnName("IND_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parent).HasColumnName("PARENT");
            });

            modelBuilder.Entity<TblInterfaceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblInterfaceDetails");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IdField)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_Field");

                entity.Property(e => e.Ifid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IFID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.XmlField)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("XML_Field");
            });

            modelBuilder.Entity<TblInterfacetablesCol>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblInterfacetablesCols");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Icid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ICID");

                entity.Property(e => e.Ifid).HasColumnName("IFID");

                entity.Property(e => e.IsExt).HasDefaultValueSql("((1))");

                entity.Property(e => e.Itid).HasColumnName("ITID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SourceFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblInterfacetablesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblInterfacetablesDetails");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Ifid).HasColumnName("IFID");

                entity.Property(e => e.Itid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ITID");

                entity.Property(e => e.KeyField)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SourceKeyField)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TableDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.XmlNode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("XML_Node");
            });

            modelBuilder.Entity<TblLeftMenu>(entity =>
            {
                entity.ToTable("tbl_LeftMenu");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CacheKey)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.LinkName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LinkUrl).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentLinkId).HasColumnName("ParentLinkID");

                entity.Property(e => e.RelevantClassName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RelevantTblName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RoleId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RoleID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblLegaItemsId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLegaItemsID");

                entity.Property(e => e.LiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LI_ID");

                entity.Property(e => e.LiValue)
                    .HasMaxLength(20)
                    .HasColumnName("LI_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblLegalType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLegalType");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution_Type");

                entity.Property(e => e.LtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblListingInfo>(entity =>
            {
                entity.HasKey(e => e.LiId);

                entity.ToTable("tblListingInfo");

                entity.Property(e => e.LiId).HasColumnName("LI_ID");

                entity.Property(e => e.CrId).HasColumnName("CR_ID");

                entity.Property(e => e.CtptId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.ExId).HasColumnName("EX_ID");

                entity.Property(e => e.FaceValue)
                    .HasMaxLength(10)
                    .HasColumnName("Face_Value");

                entity.Property(e => e.Isin)
                    .HasMaxLength(50)
                    .HasColumnName("ISIN");

                entity.Property(e => e.ListingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Listing_Date");

                entity.Property(e => e.Ticker).HasMaxLength(50);
            });

            modelBuilder.Entity<TblLocationMaster>(entity =>
            {
                entity.HasKey(e => e.LocId)
                    .HasName("PK__tblLocat__F67DD863DAEE53FC");

                entity.ToTable("tblLocationMaster");

                entity.Property(e => e.LocId).HasColumnName("LOC_ID");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(100)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationId)
                    .HasMaxLength(100)
                    .HasColumnName("LOCATION_ID");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(150)
                    .HasColumnName("LOCATION_NAME");
            });

            modelBuilder.Entity<TblLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLog");

                entity.Property(e => e.ActionTime).HasColumnType("datetime");

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblLsmcheckListId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLSMCheckListID");

                entity.Property(e => e.ChkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.ChkValue)
                    .HasMaxLength(20)
                    .HasColumnName("CHK_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblLsmwfactionStatusComplianceCheckListTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLSMWFActionStatusComplianceCheckListTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstchkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.WfstlsmId).HasColumnName("WFSTLSM_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblLsmwfactionStatusComplianceCheckListTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLSMWFActionStatusComplianceCheckListTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstchkId).HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.WfstlsmId).HasColumnName("WFSTLSM_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblLtvmasterConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLTVMasterConfiguration");

                entity.Property(e => e.ApplicableLtv)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLICABLE_LTV");

                entity.Property(e => e.BankingType).HasColumnName("BANKING_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CstypId).HasColumnName("CSTYP_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DevelopArea).HasColumnName("DEVELOP_AREA");

                entity.Property(e => e.FstypId).HasColumnName("FSTYP_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Lessee).HasColumnName("LESSEE");

                entity.Property(e => e.LowerDevelopmentArea)
                    .HasColumnType("numeric(18, 8)")
                    .HasColumnName("Lower_DevelopmentArea");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OccStatus).HasColumnName("OCC_STATUS");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");

                entity.Property(e => e.UpperDevelopmentArea)
                    .HasColumnType("numeric(18, 8)")
                    .HasColumnName("Upper_DevelopmentArea");
            });

            modelBuilder.Entity<TblLtvmasterConfiguration081220>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblLTVMasterConfiguration_081220");

                entity.Property(e => e.ApplicableLtv)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLICABLE_LTV");

                entity.Property(e => e.BankingType).HasColumnName("BANKING_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CstypId).HasColumnName("CSTYP_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DevelopArea).HasColumnName("DEVELOP_AREA");

                entity.Property(e => e.FstypId).HasColumnName("FSTYP_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Lessee).HasColumnName("LESSEE");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OccStatus).HasColumnName("OCC_STATUS");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");
            });

            modelBuilder.Entity<TblMailDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMailData");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MailMessage).HasColumnType("text");

                entity.Property(e => e.RepliedMessage).HasColumnType("text");

                entity.Property(e => e.ReplyDate).HasColumnType("datetime");

                entity.Property(e => e.SendDate).HasColumnType("datetime");

                entity.Property(e => e.SendType).HasMaxLength(200);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.UserIdU).HasColumnName("UserID_U");

                entity.Property(e => e.UserName).HasMaxLength(500);
            });

            modelBuilder.Entity<TblMcaorderSectionStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMCAOrderSectionStatus");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.OrderReference).HasMaxLength(100);

                entity.Property(e => e.Section).HasMaxLength(100);

                entity.Property(e => e.SectionFetchedStatus).HasMaxLength(100);
            });

            modelBuilder.Entity<TblMessage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMessages");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MessageGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageString)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblMigCounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_Counterparty");

                entity.Property(e => e.Activity).IsUnicode(false);

                entity.Property(e => e.AnnualTurnover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Annual_Turnover");

                entity.Property(e => e.AssetClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Asset_Classification");

                entity.Property(e => e.BsDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BS_DATE");

                entity.Property(e => e.BsrActivityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Code");

                entity.Property(e => e.BsrActivityConcat)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Concat");

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Business_Unit");

                entity.Property(e => e.Cluster)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConcatIndustry)
                    .IsUnicode(false)
                    .HasColumnName("Concat_Industry");

                entity.Property(e => e.ControlStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Control_Status");

                entity.Property(e => e.CounterpartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CtpStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ctp_Status");

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Since");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Type");

                entity.Property(e => e.DateOfEstablishment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Establishment");

                entity.Property(e => e.EnterpriseSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Enterprise_Sector");

                entity.Property(e => e.HighlightedIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Highlighted_Industry");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Industry)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentinPandM)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Investmentin_PandM");

                entity.Property(e => e.IsBankDir)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Is_BankDir");

                entity.Property(e => e.IsLeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Lead_RM");

                entity.Property(e => e.IsMsmeApplicable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_MSME_Applicable");

                entity.Property(e => e.IsUrcAvailable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_URC_Available");

                entity.Property(e => e.IsWeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Weaker_Section");

                entity.Property(e => e.LegalConstitution)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution");

                entity.Property(e => e.LegalConstitutionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_ConstitutionID");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Name");

                entity.Property(e => e.MainIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Main_Industry");

                entity.Property(e => e.MinorityCommunity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Minority_Community");

                entity.Property(e => e.MsmeActivity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Activity");

                entity.Property(e => e.MsmeClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Classification");

                entity.Property(e => e.NegativeIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Negative_Industry");

                entity.Property(e => e.OpsLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ops_Location");

                entity.Property(e => e.OriginationBranch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Origination_Branch");

                entity.Property(e => e.OwnershipType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ownership_Type");

                entity.Property(e => e.Pep)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP");

                entity.Property(e => e.PepRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP_Remarks");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Primary_Alias_ID");

                entity.Property(e => e.PslCustomerCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Customer_Category");

                entity.Property(e => e.PslSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Sector");

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipManager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Relationship_Manager");

                entity.Property(e => e.ResidenceCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Residence_Country");

                entity.Property(e => e.SubIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sub_Industry");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");

                entity.Property(e => e.UdyamRegistrationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Udyam_Registration_number");

                entity.Property(e => e.UrcDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("URC_Date");

                entity.Property(e => e.WeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Weaker_Section");
            });

            modelBuilder.Entity<TblMigCounterpartyAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_CounterpartyAddress");

                entity.Property(e => e.CommAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_ADDRESS");

                entity.Property(e => e.CommCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_CITY");

                entity.Property(e => e.CommCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_COUNTRY");

                entity.Property(e => e.CommPincode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_PINCODE");

                entity.Property(e => e.CommState)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_STATE");

                entity.Property(e => e.CommunicationAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMMUNICATION_ADDRESS");

                entity.Property(e => e.IncludeinslcamComm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDEINSLCAM_COMM");

                entity.Property(e => e.IncludeinslcamReg)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("INCLUDEINSLCAM_REG");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Primary_Alias_ID");

                entity.Property(e => e.RegAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REG_ADDRESS");

                entity.Property(e => e.RegCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REG_CITY");

                entity.Property(e => e.RegCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REG_COUNTRY");

                entity.Property(e => e.RegPincode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REG_PINCODE");

                entity.Property(e => e.RegState)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REG_STATE");

                entity.Property(e => e.RegisteredAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("REGISTERED_ADDRESS");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<TblMigCounterpartyAssociate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_CounterpartyAssociates");

                entity.Property(e => e.AssociateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Associate_Name");

                entity.Property(e => e.CoBorrower)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Co_borrower");

                entity.Property(e => e.CodCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_CUST");

                entity.Property(e => e.CommAddress)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("COMM_ADDRESS");

                entity.Property(e => e.CommCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_CITY");

                entity.Property(e => e.CommCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_COUNTRY");

                entity.Property(e => e.CommPincode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_PINCODE");

                entity.Property(e => e.CommState)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COMM_STATE");

                entity.Property(e => e.DoeDob)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOE_DOB");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IndiNonIndi)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Indi_Non_Indi");

                entity.Property(e => e.MainCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_CUST");

                entity.Property(e => e.MatchWthCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Match_wth_Cust");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<TblMigCounterpartyBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_Counterparty_bkp");

                entity.Property(e => e.Activity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AnnualTurnover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Annual_Turnover");

                entity.Property(e => e.AssetClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Asset_Classification");

                entity.Property(e => e.BsDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BS_DATE");

                entity.Property(e => e.BsrActivityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Code");

                entity.Property(e => e.BsrActivityConcat)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Concat");

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Business_Unit");

                entity.Property(e => e.Cluster)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConcatIndustry)
                    .IsUnicode(false)
                    .HasColumnName("Concat_Industry");

                entity.Property(e => e.ControlStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Control_Status");

                entity.Property(e => e.CounterpartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CtpStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ctp_Status");

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Since");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Type");

                entity.Property(e => e.DateOfEstablishment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Establishment");

                entity.Property(e => e.EnterpriseSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Enterprise_Sector");

                entity.Property(e => e.HighlightedIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Highlighted_Industry");

                entity.Property(e => e.Industry)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentinPandM)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Investmentin_PandM");

                entity.Property(e => e.IsBankDir)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Is_BankDir");

                entity.Property(e => e.IsLeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Lead_RM");

                entity.Property(e => e.IsMsmeApplicable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_MSME_Applicable");

                entity.Property(e => e.IsUrcAvailable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_URC_Available");

                entity.Property(e => e.IsWeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Weaker_Section");

                entity.Property(e => e.LegalConstitution)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution");

                entity.Property(e => e.LegalConstitutionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_ConstitutionID");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Name");

                entity.Property(e => e.MainIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Main_Industry");

                entity.Property(e => e.MinorityCommunity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Minority_Community");

                entity.Property(e => e.MsmeActivity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Activity");

                entity.Property(e => e.MsmeClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Classification");

                entity.Property(e => e.NegativeIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Negative_Industry");

                entity.Property(e => e.OpsLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ops_Location");

                entity.Property(e => e.OriginationBranch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Origination_Branch");

                entity.Property(e => e.OwnershipType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ownership_Type");

                entity.Property(e => e.Pep)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP");

                entity.Property(e => e.PepRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP_Remarks");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Primary_Alias_ID");

                entity.Property(e => e.PslCustomerCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Customer_Category");

                entity.Property(e => e.PslSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Sector");

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipManager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Relationship_Manager");

                entity.Property(e => e.ResidenceCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Residence_Country");

                entity.Property(e => e.SubIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sub_Industry");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");

                entity.Property(e => e.UdyamRegistrationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Udyam_Registration_number");

                entity.Property(e => e.UrcDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("URC_Date");

                entity.Property(e => e.WeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Weaker_Section");
            });

            modelBuilder.Entity<TblMigCounterpartyDirector>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_CounterpartyDirectors");

                entity.Property(e => e.Address)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.AddressCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address_Country");

                entity.Property(e => e.Adhar)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CoBorrower)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Co_Borrower");

                entity.Property(e => e.CodCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("COD_CUST");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DOB");

                entity.Property(e => e.Gender)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IsAuthorizedSignatory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Authorized_Signatory");

                entity.Property(e => e.IsKmp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Kmp");

                entity.Property(e => e.MainCust)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MAIN_CUST");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Others)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.Pin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PIN");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StakeholerType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Stakeholer_type");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<TblMigCounterpartyIdentifier>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_CounterpartyIdentifier");

                entity.Property(e => e.Aadhar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("AADHAR");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Primary_Alias_ID");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");
            });

            modelBuilder.Entity<TblMigCounterpartyUniqueId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMIG_CounterpartyUniqueID");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblMisappDeltum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISAPP_Delta");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");
            });

            modelBuilder.Entity<TblMisapplicationSummaryTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISApplicationSummaryTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.FundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ApprovedLimit_INR");

                entity.Property(e => e.FundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ProposedLimit_INR");

                entity.Property(e => e.LastApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.LerApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("LER_ApprovedLimit_INR");

                entity.Property(e => e.LerProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("LER_ProposedLimit_INR");

                entity.Property(e => e.LoanApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Loan_ApprovedLimit_INR");

                entity.Property(e => e.LoanProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Loan_ProposedLimit_INR");

                entity.Property(e => e.NonFundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ApprovedLimit_INR");

                entity.Property(e => e.NonFundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ProposedLimit_INR");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(38, 4)");

                entity.Property(e => e.TotalApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ApprovedLimit_INR");

                entity.Property(e => e.TotalProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ProposedLimit_INR");
            });

            modelBuilder.Entity<TblMisapplicationSummaryTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISApplicationSummaryTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.FundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ApprovedLimit_INR");

                entity.Property(e => e.FundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Funded_ProposedLimit_INR");

                entity.Property(e => e.LerApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("LER_ApprovedLimit_INR");

                entity.Property(e => e.LerProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("LER_ProposedLimit_INR");

                entity.Property(e => e.LoanApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Loan_ApprovedLimit_INR");

                entity.Property(e => e.LoanProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Loan_ProposedLimit_INR");

                entity.Property(e => e.NonFundedApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ApprovedLimit_INR");

                entity.Property(e => e.NonFundedProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("NonFunded_ProposedLimit_INR");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.TotalApprovedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ApprovedLimit_INR");

                entity.Property(e => e.TotalProposedLimitInr)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_ProposedLimit_INR");
            });

            modelBuilder.Entity<TblMisapplicationTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISApplicationTracker");

                entity.Property(e => e.ActionType).HasMaxLength(50);

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.AppRegion).HasColumnName("App_Region");

                entity.Property(e => e.AppStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("App_Start_Date");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Approval_Date");

                entity.Property(e => e.ApproverTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("Approver_Tray");

                entity.Property(e => e.BusinessTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("Business_Tray");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustTrackIdout).HasColumnName("CustTrackIDOut");

                entity.Property(e => e.FirstSanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Sanction_Date");

                entity.Property(e => e.LastApprovedWfstappId).HasColumnName("LastApprovedWFSTAPP_ID");

                entity.Property(e => e.LoginAcceptanceBusinessTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("LoginAcceptance_BusinessTray");

                entity.Property(e => e.LoginAcceptanceCreditTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("LoginAcceptance_CreditTray");

                entity.Property(e => e.LoginAcceptedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Login_Accepted_Date");

                entity.Property(e => e.LoginAcceptedToApprovalDate).HasColumnName("Login_Accepted_to_Approval_Date");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.RecommendorTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("Recommendor_Tray");

                entity.Property(e => e.SanctionCount).HasColumnName("Sanction_Count");

                entity.Property(e => e.SanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sanction_Date");

                entity.Property(e => e.TotalTat)
                    .HasColumnType("numeric(24, 7)")
                    .HasColumnName("TOTAL_TAT");

                entity.Property(e => e.Tray)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UnderwritingTray)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("Underwriting_Tray");
            });

            modelBuilder.Entity<TblMisapplicationTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISApplicationTrackerHistory");

                entity.Property(e => e.ActionType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AppId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AppRegion).HasColumnName("APP_REGION");

                entity.Property(e => e.AppStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("App_Start_Date");

                entity.Property(e => e.ApprovalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("APPROVAL_DATE");

                entity.Property(e => e.ApproverTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("APPROVER_TRAY");

                entity.Property(e => e.BusinessTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("BUSINESS_TRAY");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustTrackIdout).HasColumnName("CustTrackIDOut");

                entity.Property(e => e.FirstSanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("First_Sanction_Date");

                entity.Property(e => e.LoginAcceptedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOGIN_ACCEPTED_DATE");

                entity.Property(e => e.LoginAcceptedToApprovalDate).HasColumnName("Login_Accepted_to_Approval_Date");

                entity.Property(e => e.LoginacceptanceBusinesstray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("LOGINACCEPTANCE_BUSINESSTRAY");

                entity.Property(e => e.LoginacceptanceCredittray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("LOGINACCEPTANCE_CREDITTRAY");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PurposeofCa)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.RecommendorTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("RECOMMENDOR_TRAY");

                entity.Property(e => e.SanctionCount).HasColumnName("Sanction_Count");

                entity.Property(e => e.SanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sanction_Date");

                entity.Property(e => e.TotalTat)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("TOTAL_TAT");

                entity.Property(e => e.UnderwritingTray)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("UNDERWRITING_TRAY");
            });

            modelBuilder.Entity<TblMiscounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISCounterparty");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LeadRm)
                    .HasMaxLength(302)
                    .HasColumnName("Lead_RM");

                entity.Property(e => e.LeadRmEmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("Lead_RM_EmployeeID");

                entity.Property(e => e.LeadRmId)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblMiscounterpartyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISCounterpartyHistory");

                entity.Property(e => e.CounterPartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM");

                entity.Property(e => e.LeadRmEmployeeId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Lead_RM_EmployeeID");

                entity.Property(e => e.LeadRmId).HasColumnName("Lead_RM_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblMisdeviationTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISDeviationTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Assessment)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BankingHistory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Banking_History");

                entity.Property(e => e.BorrowerProfile)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Borrower_profile");

                entity.Property(e => e.Collateral)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultHistory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Default_History");

                entity.Property(e => e.Exposure)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialParameters)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Financial_Parameters");

                entity.Property(e => e.Other)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerMargin)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Owner_Margin");

                entity.Property(e => e.PersonalGuarantee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Personal_Guarantee");

                entity.Property(e => e.PromoterAndGuarantorAge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Promoter_and_Guarantor_Age");

                entity.Property(e => e.RiskParameterScore)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Risk_Parameter_Score");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblMisdeviationTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISDeviationTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Assessment)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BankingHistory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Banking_History");

                entity.Property(e => e.BorrowerProfile)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Borrower_profile");

                entity.Property(e => e.Collateral)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultHistory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Default_History");

                entity.Property(e => e.Exposure)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialParameters)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Financial_Parameters");

                entity.Property(e => e.Other)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OwnerMargin)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Owner_Margin");

                entity.Property(e => e.PersonalGuarantee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Personal_Guarantee");

                entity.Property(e => e.PromoterAndGuarantorAge)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Promoter_and_Guarantor_Age");

                entity.Property(e => e.RiskParameterScore)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Risk_Parameter_Score");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblMisfacilityTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISFacilityTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApprovedLimitAmount).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ApprovedLimitAmountInr)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ApprovedLimitAmount_INR");

                entity.Property(e => e.ApprovedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BtBankName).HasColumnName("BT Bank Name");

                entity.Property(e => e.BtFlag).HasColumnName("BT_FLAG");

                entity.Property(e => e.BtbankId).HasColumnName("BTBankID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ProposedLimitAmount).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ProposedLimitAmountInr)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ProposedLimitAmount_INR");

                entity.Property(e => e.ProposedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblMisfacilityTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISFacilityTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApprovedLimitAmount).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ApprovedLimitAmountInr)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ApprovedLimitAmount_INR");

                entity.Property(e => e.ApprovedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BtBankName)
                    .IsUnicode(false)
                    .HasColumnName("BT Bank Name");

                entity.Property(e => e.BtFlag).HasColumnName("BT_FLAG");

                entity.Property(e => e.BtbankId).HasColumnName("BTBankID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.NotionalLimit).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.ProposedLimitAmount).HasColumnType("numeric(22, 4)");

                entity.Property(e => e.ProposedLimitAmountInr)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ProposedLimitAmount_INR");

                entity.Property(e => e.ProposedLimitCurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblMisfinancialTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISFinancialTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FinId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ID");

                entity.Property(e => e.FinancialType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialTypeId).HasColumnName("FinancialTypeID");

                entity.Property(e => e.LastAudFinYear).HasColumnName("LAST_AUD_FIN_YEAR");

                entity.Property(e => e.LastAuditedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Last_Audited_Amount");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Financial");
            });

            modelBuilder.Entity<TblMisfinancialTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISFinancialTrackerHistory");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FinId)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("FIN_ID");

                entity.Property(e => e.FinancialType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FinancialTypeId).HasColumnName("FinancialTypeID");

                entity.Property(e => e.LastAudFinYear).HasColumnName("LAST_AUD_FIN_YEAR");

                entity.Property(e => e.LastAuditedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Last_Audited_Amount");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Financial");
            });

            modelBuilder.Entity<TblMisreportForCcbg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMISReportForCCBG");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.BorrowerName)
                    .HasMaxLength(500)
                    .HasColumnName("BORROWER_NAME");

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BUSINESS_UNIT");

                entity.Property(e => e.CifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CommitteeName)
                    .HasMaxLength(200)
                    .HasColumnName("COMMITTEE_NAME");

                entity.Property(e => e.DepartmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DEPARTMENT_TYPE");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.PanNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PAN_NO");

                entity.Property(e => e.PresentRole).HasColumnName("PRESENT_ROLE");

                entity.Property(e => e.PresentUserName).HasColumnName("PRESENT_USER_NAME");

                entity.Property(e => e.Rm)
                    .HasMaxLength(350)
                    .HasColumnName("RM");

                entity.Property(e => e.Sno).HasColumnName("SNO");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UNIQUE_ID");

                entity.Property(e => e.UnitHead)
                    .HasMaxLength(350)
                    .HasColumnName("UNIT_HEAD");

                entity.Property(e => e.ZonalHead)
                    .HasMaxLength(350)
                    .HasColumnName("ZONAL_HEAD");

                entity.Property(e => e.Zone)
                    .HasMaxLength(100)
                    .HasColumnName("ZONE");
            });

            modelBuilder.Entity<TblModelType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblModelType");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModelType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.MtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MT_ID");
            });

            modelBuilder.Entity<TblModifyLeadRmhistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblModifyLeadRMHistory");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LastWfstId).HasColumnName("LastWFST_ID");

                entity.Property(e => e.NewLeadRm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NewLeadRM");

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UniqueID");
            });

            modelBuilder.Entity<TblModule>(entity =>
            {
                entity.HasKey(e => e.MId);

                entity.ToTable("tblModules");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TblMonitoringStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblMonitoringStatus");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MsDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MS_Description");

                entity.Property(e => e.MsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MS_ID");

                entity.Property(e => e.MsText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MS_Text");
            });

            modelBuilder.Entity<TblNclatcauseList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNCLATCauseList");

                entity.Property(e => e.Bench)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CpCaNo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CP/CA No.");

                entity.Property(e => e.Date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IndusindHitsAppellant)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Appellant");

                entity.Property(e => e.IndusindHitsRespondant)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Respondant");

                entity.Property(e => e.NameOfParties)
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .HasColumnName("Name of Parties");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblNclatfinalOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNCLATFinalOrder");

                entity.Property(e => e.Bench)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CpCaNo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CP/CA No.");

                entity.Property(e => e.Date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IndusindHitsAppellant)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Appellant");

                entity.Property(e => e.IndusindHitsRespondant)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Respondant");

                entity.Property(e => e.NameOfParties)
                    .HasMaxLength(1500)
                    .IsUnicode(false)
                    .HasColumnName("Name of Parties");

                entity.Property(e => e.OrderDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Order Date");

                entity.Property(e => e.Section)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SourceLink)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Source Link");

                entity.Property(e => e.Type)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblNcltcauseList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNCLTCauseList");

                entity.Property(e => e.Bench)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CpCaNo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CP/CA No.");

                entity.Property(e => e.Date)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IndusindHitsAppellant)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Appellant");

                entity.Property(e => e.IndusindHitsRespondant)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Respondant");

                entity.Property(e => e.NameOfParties)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("Name of Parties");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblNcltfinalOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNCLTFinalOrder");

                entity.Property(e => e.Bench)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CpCaNo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("CP/CA No.");

                entity.Property(e => e.Date)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IndusindHitsAppellant)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Appellant");

                entity.Property(e => e.IndusindHitsRespondant)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Indusind Hits - Respondant");

                entity.Property(e => e.NameOfParties)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("Name of Parties");

                entity.Property(e => e.OrderDate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Order Date");

                entity.Property(e => e.Section)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.SourceLink)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Source Link");

                entity.Property(e => e.Type)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblNegativeList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNegativeList");

                entity.Property(e => e.NameOfTheCompaniesDirectors)
                    .IsUnicode(false)
                    .HasColumnName("NAME_OF_THE_COMPANIES_DIRECTORS");

                entity.Property(e => e.SNo)
                    .IsUnicode(false)
                    .HasColumnName("S.NO");
            });

            modelBuilder.Entity<TblNhb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNHB");

                entity.Property(e => e.AddressOfTheCustomerAndLocation)
                    .IsUnicode(false)
                    .HasColumnName("Address of the customer and Location");

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.NameOfTheCustomer)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Customer");

                entity.Property(e => e.SNo)
                    .IsUnicode(false)
                    .HasColumnName("S.No");
            });

            modelBuilder.Entity<TblNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNotifications");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");
            });

            modelBuilder.Entity<TblNpasearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNPASearch");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_no");

                entity.Property(e => e.Address)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("address");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("contract_no");

                entity.Property(e => e.DateOfNpaDateOfWoff)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("date_of_npa/date_of_woff");

                entity.Property(e => e.DateOfUpload)
                    .HasColumnType("datetime")
                    .HasColumnName("date_of_upload");

                entity.Property(e => e.GnpaAmtOfWoof)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("gnpa/amt_of_woof");

                entity.Property(e => e.Irac)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("irac");

                entity.Property(e => e.NameOfBorrower)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name_of_borrower");

                entity.Property(e => e.Provision)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("provision");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.UploadedBy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("uploaded_by");
            });

            modelBuilder.Entity<TblNwfrole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNWFRoles");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NwfrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NWFR_ID");

                entity.Property(e => e.RoleDesc).HasMaxLength(100);

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.Property(e => e.RoleType).HasMaxLength(50);
            });

            modelBuilder.Entity<TblNwfuserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblNWFUserRoles");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NwfrId).HasColumnName("NWFR_ID");

                entity.Property(e => e.NwfurId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NWFUR_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblOanalysis>(entity =>
            {
                entity.HasKey(e => e.Anid);

                entity.ToTable("tblOAnalysis");

                entity.Property(e => e.Anid).HasColumnName("ANID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Ana101)
                    .HasColumnType("text")
                    .HasColumnName("Ana_10_1");

                entity.Property(e => e.Ana11)
                    .HasColumnType("text")
                    .HasColumnName("Ana_1_1");

                entity.Property(e => e.Ana111)
                    .HasColumnType("text")
                    .HasColumnName("Ana_11_1");

                entity.Property(e => e.Ana12)
                    .HasColumnType("text")
                    .HasColumnName("Ana_1_2");

                entity.Property(e => e.Ana121)
                    .HasColumnType("text")
                    .HasColumnName("Ana_12_1");

                entity.Property(e => e.Ana122)
                    .HasColumnType("text")
                    .HasColumnName("Ana_12_2");

                entity.Property(e => e.Ana131)
                    .HasColumnType("text")
                    .HasColumnName("Ana_13_1");

                entity.Property(e => e.Ana141)
                    .HasColumnType("text")
                    .HasColumnName("Ana_14_1");

                entity.Property(e => e.Ana151)
                    .HasColumnType("text")
                    .HasColumnName("Ana_15_1");

                entity.Property(e => e.Ana161)
                    .HasColumnType("text")
                    .HasColumnName("Ana_16_1");

                entity.Property(e => e.Ana162)
                    .HasColumnType("text")
                    .HasColumnName("Ana_16_2");

                entity.Property(e => e.Ana163)
                    .HasColumnType("text")
                    .HasColumnName("Ana_16_3");

                entity.Property(e => e.Ana164)
                    .HasColumnType("text")
                    .HasColumnName("Ana_16_4");

                entity.Property(e => e.Ana171)
                    .HasColumnType("text")
                    .HasColumnName("Ana_17_1");

                entity.Property(e => e.Ana191)
                    .HasColumnType("text")
                    .HasColumnName("Ana_19_1");

                entity.Property(e => e.Ana201)
                    .HasColumnType("text")
                    .HasColumnName("Ana_20_1");

                entity.Property(e => e.Ana21)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_1");

                entity.Property(e => e.Ana211)
                    .HasColumnType("text")
                    .HasColumnName("Ana_21_1");

                entity.Property(e => e.Ana22)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_2");

                entity.Property(e => e.Ana221)
                    .HasColumnType("text")
                    .HasColumnName("Ana_22_1");

                entity.Property(e => e.Ana23)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_3");

                entity.Property(e => e.Ana24)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_4");

                entity.Property(e => e.Ana25)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_5");

                entity.Property(e => e.Ana26)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_6");

                entity.Property(e => e.Ana27)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_7");

                entity.Property(e => e.Ana28)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_8");

                entity.Property(e => e.Ana29)
                    .HasColumnType("text")
                    .HasColumnName("Ana_2_9");

                entity.Property(e => e.Ana31)
                    .HasColumnType("text")
                    .HasColumnName("Ana_3_1");

                entity.Property(e => e.Ana32)
                    .HasColumnType("text")
                    .HasColumnName("Ana_3_2");

                entity.Property(e => e.Ana33)
                    .HasColumnType("text")
                    .HasColumnName("Ana_3_3");

                entity.Property(e => e.Ana34)
                    .HasColumnType("text")
                    .HasColumnName("Ana_3_4");

                entity.Property(e => e.Ana35)
                    .HasColumnType("text")
                    .HasColumnName("Ana_3_5");

                entity.Property(e => e.Ana41)
                    .HasColumnType("text")
                    .HasColumnName("Ana_4_1");

                entity.Property(e => e.Ana42)
                    .HasColumnType("text")
                    .HasColumnName("Ana_4_2");

                entity.Property(e => e.Ana43)
                    .HasColumnType("text")
                    .HasColumnName("Ana_4_3");

                entity.Property(e => e.Ana51)
                    .HasColumnType("text")
                    .HasColumnName("Ana_5_1");

                entity.Property(e => e.Ana52)
                    .HasColumnType("text")
                    .HasColumnName("Ana_5_2");

                entity.Property(e => e.Ana53)
                    .HasColumnType("text")
                    .HasColumnName("Ana_5_3");

                entity.Property(e => e.Ana54)
                    .HasColumnType("text")
                    .HasColumnName("Ana_5_4");

                entity.Property(e => e.Ana61)
                    .HasColumnType("text")
                    .HasColumnName("Ana_6_1");

                entity.Property(e => e.Ana71)
                    .HasColumnType("text")
                    .HasColumnName("Ana_7_1");

                entity.Property(e => e.Ana81)
                    .HasColumnType("text")
                    .HasColumnName("Ana_8_1");

                entity.Property(e => e.Ana91)
                    .HasColumnType("text")
                    .HasColumnName("Ana_9_1");

                entity.Property(e => e.AnalysisStructure).HasColumnName("Analysis_Structure");

                entity.Property(e => e.AnlId)
                    .HasMaxLength(50)
                    .HasColumnName("ANL_ID");

                entity.Property(e => e.CollateralAnalysis)
                    .HasColumnType("text")
                    .HasColumnName("Collateral_Analysis");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacilityAnalysis)
                    .HasColumnType("text")
                    .HasColumnName("Facility_Analysis");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOapplicationDefaultFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationDefaultFacility");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.ApprovedLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ApprovedLimitCcy)
                    .HasMaxLength(10)
                    .HasColumnName("ApprovedLimitCCY");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Deffacid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEFFACID");

                entity.Property(e => e.ExistingLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ExistingLimitCcy)
                    .HasMaxLength(10)
                    .HasColumnName("ExistingLimitCCY");

                entity.Property(e => e.FacId)
                    .HasMaxLength(40)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FactypT24pid).HasColumnName("FACTYP_T24PID");

                entity.Property(e => e.Factypdesc)
                    .HasMaxLength(200)
                    .HasColumnName("FACTYPDESC");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.LimitRefCode).HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProposedLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ProposedLimitCcy)
                    .HasMaxLength(10)
                    .HasColumnName("ProposedLimitCCY");

                entity.Property(e => e.UtilizationLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.UtilizationLimitCcy)
                    .HasMaxLength(10)
                    .HasColumnName("UtilizationLimitCCY");
            });

            modelBuilder.Entity<TblOapplicationFacilitiesRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationFacilities_Rpt");

                entity.Property(e => e.AccountNo).HasMaxLength(100);

                entity.Property(e => e.Afid).HasColumnName("AFID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ApprovedLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ApprovedLimitCcy).HasColumnName("ApprovedLimitCCY");

                entity.Property(e => e.AvailabilityPeriodDays).HasMaxLength(50);

                entity.Property(e => e.CashMarginAmount).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.CashMarginUnit).HasMaxLength(20);

                entity.Property(e => e.Cbstenor).HasColumnName("CBSTenor");

                entity.Property(e => e.Commission).HasMaxLength(200);

                entity.Property(e => e.Conditions).HasMaxLength(500);

                entity.Property(e => e.ConditionsOfDrawdown).HasColumnType("ntext");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Current_SNID");

                entity.Property(e => e.CurrentUtilization).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.DateOfFirstRepayment).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DisbursementAccount).HasMaxLength(200);

                entity.Property(e => e.DisbursementInstructions).HasColumnType("ntext");

                entity.Property(e => e.DrawnDownDetails).HasMaxLength(200);

                entity.Property(e => e.ExistingLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ExtensionRequestDate).HasColumnType("datetime");

                entity.Property(e => e.FacProduct).HasMaxLength(500);

                entity.Property(e => e.FacglobFclsid).HasColumnName("FACGLOB_FCLSID");

                entity.Property(e => e.Facid)
                    .HasMaxLength(50)
                    .HasColumnName("FACID");

                entity.Property(e => e.FacilityExpirydDate).HasColumnType("datetime");

                entity.Property(e => e.FactypFclsid).HasColumnName("FACTYP_FCLSID");

                entity.Property(e => e.FcArrangementFee)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FC_ArrangementFee");

                entity.Property(e => e.FcCommission)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("FC_Commission");

                entity.Property(e => e.FcProcessingFees)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FC_ProcessingFees");

                entity.Property(e => e.FdunderPledge)
                    .HasMaxLength(200)
                    .HasColumnName("FDUnderPledge");

                entity.Property(e => e.FinalMaturityDate).HasColumnType("datetime");

                entity.Property(e => e.FinterestRate)
                    .HasMaxLength(200)
                    .HasColumnName("FInterestRate");

                entity.Property(e => e.FstprodFclsid).HasColumnName("FSTPROD_FCLSID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.FvinterestRate).HasColumnName("FVInterestRate");

                entity.Property(e => e.GlobalTypeDesc).HasMaxLength(500);

                entity.Property(e => e.InApplicationFacilityStatus)
                    .HasMaxLength(50)
                    .HasColumnName("In_Application_Facility_Status");

                entity.Property(e => e.InitialSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Initial_SNID");

                entity.Property(e => e.InterestServicingAccount).HasMaxLength(200);

                entity.Property(e => e.InterestServicingFreq).HasMaxLength(50);

                entity.Property(e => e.JointUtilization).HasMaxLength(200);

                entity.Property(e => e.LimitReferenceCode).HasMaxLength(50);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.MaximumDrawdown).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinInterestRate).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.MinimumDrawdown).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MoratoriumPeriodDays).HasMaxLength(50);

                entity.Property(e => e.OnSanctionState).HasMaxLength(50);

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .HasColumnName("ParentFacilityID");

                entity.Property(e => e.PrepaymentPenalty).HasColumnType("ntext");

                entity.Property(e => e.PricingFixedOrFloatingFlag).HasColumnName("Pricing_FixedOrFloatingFlag");

                entity.Property(e => e.PricingMarginOverReferenceRate)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("Pricing_MarginOverReferenceRate");

                entity.Property(e => e.PricingMinimumrate)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("Pricing_Minimumrate");

                entity.Property(e => e.PricingReferenceRates).HasColumnName("Pricing_ReferenceRates");

                entity.Property(e => e.PrincipalServicingFreq).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.ProposedLimit).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.Purpose).HasMaxLength(500);

                entity.Property(e => e.PurposeEndUse).HasColumnType("ntext");

                entity.Property(e => e.RepaymentAccount).HasMaxLength(200);

                entity.Property(e => e.RepaymentAmount).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.RepaymentInstruction).HasColumnType("ntext");

                entity.Property(e => e.SecuritySpecifically).HasMaxLength(200);

                entity.Property(e => e.SpecificMitigants).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(100);

                entity.Property(e => e.SubtypeDesc).HasMaxLength(500);

                entity.Property(e => e.TenorUnit).HasMaxLength(50);

                entity.Property(e => e.TermsAndCondition).HasMaxLength(4000);

                entity.Property(e => e.TypeDesc).HasMaxLength(500);

                entity.Property(e => e.Validity).HasColumnType("datetime");

                entity.Property(e => e.ValueDate).HasColumnType("datetime");

                entity.Property(e => e.VbaseRate)
                    .HasMaxLength(200)
                    .HasColumnName("VBaseRate");

                entity.Property(e => e.Vmargin)
                    .HasMaxLength(200)
                    .HasColumnName("VMargin");
            });

            modelBuilder.Entity<TblOapplicationFacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationFacilities");

                entity.Property(e => e.AccountNo).HasMaxLength(100);

                entity.Property(e => e.Afid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AFID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ApprovedLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ApprovedLimitCcy).HasColumnName("ApprovedLimitCCY");

                entity.Property(e => e.AvailabilityPeriodDays).HasMaxLength(50);

                entity.Property(e => e.CashMarginAmount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.CashMarginUnit).HasMaxLength(20);

                entity.Property(e => e.Cbstenor).HasColumnName("CBSTenor");

                entity.Property(e => e.Commission).HasMaxLength(200);

                entity.Property(e => e.Conditions).HasMaxLength(500);

                entity.Property(e => e.ConditionsOfDrawdown).HasColumnType("ntext");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('SYSTEM')");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Current_SNID");

                entity.Property(e => e.CurrentUtilization).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.DateOfFirstRepayment).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.DisbursementAccount).HasMaxLength(200);

                entity.Property(e => e.DisbursementInstructions).HasColumnType("ntext");

                entity.Property(e => e.DrawnDownDetails).HasMaxLength(200);

                entity.Property(e => e.ExistingLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ExtensionRequestDate).HasColumnType("datetime");

                entity.Property(e => e.FacProduct).HasMaxLength(500);

                entity.Property(e => e.FacglobFclsid).HasColumnName("FACGLOB_FCLSID");

                entity.Property(e => e.Facid)
                    .HasMaxLength(50)
                    .HasColumnName("FACID");

                entity.Property(e => e.FacilityExpirydDate).HasColumnType("datetime");

                entity.Property(e => e.FactypFclsid).HasColumnName("FACTYP_FCLSID");

                entity.Property(e => e.FcArrangementFee)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("FC_ArrangementFee");

                entity.Property(e => e.FcCommission)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("FC_Commission");

                entity.Property(e => e.FcProcessingFees)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("FC_ProcessingFees");

                entity.Property(e => e.FdunderPledge)
                    .HasMaxLength(200)
                    .HasColumnName("FDUnderPledge");

                entity.Property(e => e.FinalMaturityDate).HasColumnType("datetime");

                entity.Property(e => e.FinterestRate)
                    .HasMaxLength(200)
                    .HasColumnName("FInterestRate");

                entity.Property(e => e.FstprodFclsid).HasColumnName("FSTPROD_FCLSID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.FvinterestRate).HasColumnName("FVInterestRate");

                entity.Property(e => e.GlobalTypeDesc).HasMaxLength(500);

                entity.Property(e => e.InApplicationFacilityStatus)
                    .HasMaxLength(50)
                    .HasColumnName("In_Application_Facility_Status");

                entity.Property(e => e.InitialSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Initial_SNID");

                entity.Property(e => e.InterestServicingAccount).HasMaxLength(200);

                entity.Property(e => e.InterestServicingFreq).HasMaxLength(50);

                entity.Property(e => e.JointUtilization).HasMaxLength(200);

                entity.Property(e => e.LimitReferenceCode).HasMaxLength(50);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.MaximumDrawdown).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.MinInterestRate).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.MinimumDrawdown).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MoratoriumPeriodDays).HasMaxLength(50);

                entity.Property(e => e.OnSanctionState).HasMaxLength(50);

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .HasColumnName("ParentFacilityID");

                entity.Property(e => e.PrepaymentPenalty).HasColumnType("ntext");

                entity.Property(e => e.PricingFixedOrFloatingFlag).HasColumnName("Pricing_FixedOrFloatingFlag");

                entity.Property(e => e.PricingMarginOverReferenceRate)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("Pricing_MarginOverReferenceRate");

                entity.Property(e => e.PricingMinimumrate)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("Pricing_Minimumrate");

                entity.Property(e => e.PricingReferenceRates).HasColumnName("Pricing_ReferenceRates");

                entity.Property(e => e.PrincipalServicingFreq).HasMaxLength(50);

                entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

                entity.Property(e => e.ProposedLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.Purpose).HasMaxLength(1000);

                entity.Property(e => e.PurposeEndUse).HasColumnType("ntext");

                entity.Property(e => e.RepaymentAccount).HasMaxLength(200);

                entity.Property(e => e.RepaymentAmount).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.RepaymentInstruction).HasColumnType("ntext");

                entity.Property(e => e.RootFacId)
                    .HasMaxLength(50)
                    .HasColumnName("RootFacID");

                entity.Property(e => e.SecuritySpecifically).HasMaxLength(200);

                entity.Property(e => e.SpecificMitigants).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(100);

                entity.Property(e => e.SubtypeDesc).HasMaxLength(500);

                entity.Property(e => e.Tenor).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.TenorUnit).HasMaxLength(50);

                entity.Property(e => e.TermsAndCondition).HasMaxLength(4000);

                entity.Property(e => e.TreasuryTenor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDesc).HasMaxLength(500);

                entity.Property(e => e.Validity).HasColumnType("datetime");

                entity.Property(e => e.ValueDate).HasColumnType("datetime");

                entity.Property(e => e.VbaseRate)
                    .HasMaxLength(200)
                    .HasColumnName("VBaseRate");

                entity.Property(e => e.Vmargin)
                    .HasMaxLength(200)
                    .HasColumnName("VMargin");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOapplicationFinancial>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationFinancials");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Depreciation).HasMaxLength(500);

                entity.Property(e => e.FinancialPositionCurrentAssets)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_CurrentAssets");

                entity.Property(e => e.FinancialPositionCurrentLiabilities)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_CurrentLiabilities");

                entity.Property(e => e.FinancialPositionEquityShareCapital)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_EquityShareCapital");

                entity.Property(e => e.FinancialPositionNetFixedAssets)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_NetFixedAssets");

                entity.Property(e => e.FinancialPositionNetWorkingCapital)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_NetWorkingCapital");

                entity.Property(e => e.FinancialPositionNetworth)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_Networth");

                entity.Property(e => e.FinancialPositionTotalCapitalEmployed)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_TotalCapitalEmployed");

                entity.Property(e => e.Fnid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FNID");

                entity.Property(e => e.Growth).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.GrowthInPbildt).HasColumnName("GrowthInPBILDT");

                entity.Property(e => e.Interest).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.LiquidityCurrentRatio).HasColumnName("Liquidity_CurrentRatio");

                entity.Property(e => e.LiquidityQuickRatio).HasColumnName("Liquidity_QuickRatio");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NetSales).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.OperatingProfit)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("Operating_Profit");

                entity.Property(e => e.Pat)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("PAT");

                entity.Property(e => e.Pbildt)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("PBILDT");

                entity.Property(e => e.PeriodEnded).HasMaxLength(50);

                entity.Property(e => e.Profitability).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ProfitabilityOperatingProfitPerTotalIncome).HasColumnName("Profitability_OperatingProfitPerTotalIncome");

                entity.Property(e => e.ProfitabilityRoceTotal).HasColumnName("Profitability_ROCE_Total");

                entity.Property(e => e.ProfitabilityRonw).HasColumnName("Profitability_RONW");

                entity.Property(e => e.Solvency).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.SolvencyInterestCoverage).HasColumnName("Solvency_InterestCoverage");

                entity.Property(e => e.SolvencyLongTermDebtEquityRatio).HasColumnName("Solvency_LongTermDebtEquityRatio");

                entity.Property(e => e.SolvencyTotalDebtPerNetCashAccruals).HasColumnName("Solvency_TotalDebtPerNetCashAccruals");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.TurnoverWorkingCapitalTurnoverRatio).HasColumnName("Turnover_WorkingCapitalTurnoverRatio");
            });

            modelBuilder.Entity<TblOapplicationFinancialCondition>(entity =>
            {
                entity.HasKey(e => e.Fincndid);

                entity.ToTable("tblOApplicationFinancialConditions");

                entity.Property(e => e.Fincndid).HasColumnName("FINCNDID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ConditionType).HasMaxLength(1000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FinancialConditionId)
                    .HasMaxLength(1000)
                    .HasColumnName("FinancialConditionID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("Xml_Details");
            });

            modelBuilder.Entity<TblOapplicationFinancialCovenant>(entity =>
            {
                entity.HasKey(e => e.Fincovid);

                entity.ToTable("tblOApplicationFinancialCovenants");

                entity.Property(e => e.Fincovid).HasColumnName("FINCOVID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FinancialCovenantId)
                    .HasMaxLength(1000)
                    .HasColumnName("FinancialCovenantID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("Xml_Details");
            });

            modelBuilder.Entity<TblOapplicationGcollateral>(entity =>
            {
                entity.HasKey(e => e.AcId);

                entity.ToTable("tblOApplicationGCollateral");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CollateralId)
                    .HasMaxLength(50)
                    .HasColumnName("CollateralID");

                entity.Property(e => e.CollateralReferenceId)
                    .HasMaxLength(1000)
                    .HasColumnName("CollateralReferenceID");

                entity.Property(e => e.CollateralRight).HasMaxLength(1000);

                entity.Property(e => e.CollateralValue).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.CollateralValueCurrency).HasComment("FK to tblCurrency");

                entity.Property(e => e.CollateralValuer).HasMaxLength(200);

                entity.Property(e => e.Colmapid).HasColumnName("COLMAPID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Current_SNID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.InApplicationCollateralStatus).HasMaxLength(25);

                entity.Property(e => e.InitialSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Initial_SNID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlCollateralFinal).HasColumnType("xml");
            });

            modelBuilder.Entity<TblOapplicationLimitsMonitorMaster>(entity =>
            {
                entity.HasKey(e => e.AlmId);

                entity.ToTable("tblOApplicationLimitsMonitorMaster");

                entity.Property(e => e.AlmId).HasColumnName("ALM_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(1000);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(1000)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(1000);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstpafacId).HasColumnName("WFSTPAFAC_ID");

                entity.Property(e => e.XmlFac)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FAC");
            });

            modelBuilder.Entity<TblOapplicationMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationMaster");

                entity.Property(e => e.Amid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AMID");

                entity.Property(e => e.AppMngtEntity).HasMaxLength(200);

                entity.Property(e => e.Appid)
                    .HasMaxLength(50)
                    .HasColumnName("APPID");

                entity.Property(e => e.ApplicationRm).HasColumnName("ApplicationRM");

                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovedRating).HasMaxLength(50);

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptUniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_UniqueID");

                entity.Property(e => e.Ctptindustry).HasColumnName("CTPTIndustry");

                entity.Property(e => e.DptId).HasColumnName("DPT_ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExistingRiskRating).HasMaxLength(50);

                entity.Property(e => e.ExtensionRequestDate).HasColumnType("datetime");

                entity.Property(e => e.ExternalDocRef1)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalDocRef2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupRm).HasColumnName("GroupRM");

                entity.Property(e => e.InitiationDate).HasColumnType("datetime");

                entity.Property(e => e.Introduction).HasColumnType("text");

                entity.Property(e => e.IomPurpose)
                    .HasColumnType("text")
                    .HasColumnName("IOM_Purpose");

                entity.Property(e => e.IomSubmissionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IOM_SubmissionDate");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PdffileName)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFileName");

                entity.Property(e => e.PdffilePath)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFilePath");

                entity.Property(e => e.PdfsafileName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PDFSAFileName");

                entity.Property(e => e.PdfsafilePath)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PDFSAFilePath");

                entity.Property(e => e.ProposedRating).HasMaxLength(50);

                entity.Property(e => e.PurposeofCa)
                    .HasColumnType("text")
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.ReviewDate).HasColumnType("datetime");

                entity.Property(e => e.SancCommitteeId).HasColumnName("Sanc_CommitteeID");

                entity.Property(e => e.SanctionDueDate).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(100)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SanctionerId).HasColumnName("SanctionerID");

                entity.Property(e => e.SsNextFollowUpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SS_NextFollowUpDate");

                entity.Property(e => e.UfId1).HasColumnName("UF_ID1");

                entity.Property(e => e.UfId2).HasColumnName("UF_ID2");
            });

            modelBuilder.Entity<TblOapplicationMasterRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationMaster_Rpt");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AppMngtEntity).HasMaxLength(200);

                entity.Property(e => e.Appid)
                    .HasMaxLength(50)
                    .HasColumnName("APPID");

                entity.Property(e => e.ApplicationRm).HasColumnName("ApplicationRM");

                entity.Property(e => e.ApprovedRating).HasMaxLength(50);

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptUniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("CTPT_UniqueID");

                entity.Property(e => e.Ctptindustry).HasColumnName("CTPTIndustry");

                entity.Property(e => e.DptId).HasColumnName("DPT_ID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.ExistingRiskRating).HasMaxLength(50);

                entity.Property(e => e.ExtensionRequestDate).HasColumnType("datetime");

                entity.Property(e => e.GroupRm).HasColumnName("GroupRM");

                entity.Property(e => e.InitiationDate).HasColumnType("datetime");

                entity.Property(e => e.Introduction).HasColumnType("text");

                entity.Property(e => e.IomPurpose)
                    .HasColumnType("text")
                    .HasColumnName("IOM_Purpose");

                entity.Property(e => e.IomSubmissionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("IOM_SubmissionDate");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PdffileName)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFileName");

                entity.Property(e => e.PdffilePath)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFilePath");

                entity.Property(e => e.ProposedRating).HasMaxLength(50);

                entity.Property(e => e.PurposeofCa)
                    .HasColumnType("text")
                    .HasColumnName("PurposeofCA");

                entity.Property(e => e.ReviewDate).HasColumnType("datetime");

                entity.Property(e => e.SanctionDueDate).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(100)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SanctionerId).HasColumnName("SanctionerID");

                entity.Property(e => e.SsNextFollowUpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SS_NextFollowUpDate");
            });

            modelBuilder.Entity<TblOapplicationPeerFinancial>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationPeerFinancials");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Depreciation).HasMaxLength(500);

                entity.Property(e => e.FinancialPositionCurrentAssets)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_CurrentAssets");

                entity.Property(e => e.FinancialPositionCurrentLiabilities)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_CurrentLiabilities");

                entity.Property(e => e.FinancialPositionEquityShareCapital)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_EquityShareCapital");

                entity.Property(e => e.FinancialPositionNetFixedAssets)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_NetFixedAssets");

                entity.Property(e => e.FinancialPositionNetWorkingCapital)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_NetWorkingCapital");

                entity.Property(e => e.FinancialPositionNetworth)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_Networth");

                entity.Property(e => e.FinancialPositionTotalCapitalEmployed)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("FinancialPosition_TotalCapitalEmployed");

                entity.Property(e => e.Growth).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.GrowthInPbildt).HasColumnName("GrowthInPBILDT");

                entity.Property(e => e.Interest).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.LiquidityCurrentRatio).HasColumnName("Liquidity_CurrentRatio");

                entity.Property(e => e.LiquidityQuickRatio).HasColumnName("Liquidity_QuickRatio");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NetSales).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.OperatingProfit)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("Operating_Profit");

                entity.Property(e => e.Pat)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("PAT");

                entity.Property(e => e.Pbildt)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("PBILDT");

                entity.Property(e => e.PeriodEnded).HasMaxLength(50);

                entity.Property(e => e.Pfnid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PFNID");

                entity.Property(e => e.Profitability).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ProfitabilityOperatingProfitPerTotalIncome).HasColumnName("Profitability_OperatingProfitPerTotalIncome");

                entity.Property(e => e.ProfitabilityRoceTotal).HasColumnName("Profitability_ROCE_Total");

                entity.Property(e => e.ProfitabilityRonw).HasColumnName("Profitability_RONW");

                entity.Property(e => e.Solvency).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.SolvencyInterestCoverage).HasColumnName("Solvency_InterestCoverage");

                entity.Property(e => e.SolvencyLongTermDebtEquityRatio).HasColumnName("Solvency_LongTermDebtEquityRatio");

                entity.Property(e => e.SolvencyTotalDebtPerNetCashAccruals).HasColumnName("Solvency_TotalDebtPerNetCashAccruals");

                entity.Property(e => e.TotalIncome).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.TurnoverWorkingCapitalTurnoverRatio).HasColumnName("Turnover_WorkingCapitalTurnoverRatio");
            });

            modelBuilder.Entity<TblOapplicationPricingAndProfitability>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOApplicationPricingAndProfitability");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustomerLevelCharges).HasMaxLength(100);

                entity.Property(e => e.Existing).HasMaxLength(100);

                entity.Property(e => e.ExistingArrangementFee).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Priprfid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRIPRFID");

                entity.Property(e => e.ProposedOrApproved).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(100);
            });

            modelBuilder.Entity<TblOapplicationType>(entity =>
            {
                entity.HasKey(e => e.Aptypid)
                    .HasName("PK__tblOAppl__161856E863448DB6");

                entity.ToTable("tblOApplicationType");

                entity.Property(e => e.Aptypid)
                    .ValueGeneratedNever()
                    .HasColumnName("APTYPID");

                entity.Property(e => e.ApplicationPageName).HasMaxLength(50);

                entity.Property(e => e.ApplicationType).HasMaxLength(50);
            });

            modelBuilder.Entity<TblOassetsMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOAssetsMaster");

                entity.Property(e => e.Aclsid).HasColumnName("ACLSID");

                entity.Property(e => e.Asid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ASID");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentAsid).HasColumnName("Parent_ASID");
            });

            modelBuilder.Entity<TblObjUniqueIdconfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblObjUniqueIDConfig");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Obj_Desc");

                entity.Property(e => e.ObjName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Obj_Name");

                entity.Property(e => e.ObjTable)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Obj_Table");

                entity.Property(e => e.Prefix)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblObjectChangeDetailsTracker>(entity =>
            {
                entity.HasKey(e => e.OcdId)
                    .IsClustered(false);

                entity.ToTable("tblObjectChangeDetailsTracker");

                entity.HasIndex(e => new { e.WfstappId, e.Purpose }, "IX_tblObjectChangeDetailsTracker_WFSTAPP_ID_Purpose")
                    .IsClustered();

                entity.Property(e => e.OcdId).HasColumnName("OCD_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ObjChangeDetails)
                    .HasColumnType("xml")
                    .HasColumnName("ObjChange_Details");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblOcalenderMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCalenderMaster");

                entity.Property(e => e.CalId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("calID");

                entity.Property(e => e.OfficeEndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.OfficeStartTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Region)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WeekendDays)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOcolUserCounterParty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOColUserCounterParty");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Cucid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CUCID");
            });

            modelBuilder.Entity<TblOcollateralFinancialSecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralFinancialSecurity");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CfnsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CFNS_ID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SecurityType).HasMaxLength(500);
            });

            modelBuilder.Entity<TblOcollateralGuarantee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralGuarantee");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CgrnId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CGRN_ID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.GuaranteeAmount).HasColumnType("decimal(25, 8)");

                entity.Property(e => e.GuaranteeValidityDate).HasColumnType("datetime");

                entity.Property(e => e.Guarantor).HasMaxLength(500);

                entity.Property(e => e.GuarantorCounterpartyRelationship).HasMaxLength(100);

                entity.Property(e => e.GuarantorType).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOcollateralLien>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralLien");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.AccountNumber).HasMaxLength(500);

                entity.Property(e => e.AccountWithBank).HasMaxLength(100);

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ClenId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CLEN_ID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOcollateralMortgage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralMortgage");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AssetDescription).HasMaxLength(500);

                entity.Property(e => e.AssetLocation).HasMaxLength(100);

                entity.Property(e => e.CmrtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CMRT_ID");

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOcollateralSubType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralSubType");

                entity.Property(e => e.ColSubType).HasMaxLength(100);

                entity.Property(e => e.CollateralSubCode).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Cstypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.PanelVirtualPath).HasMaxLength(250);

                entity.Property(e => e.RealizableValue).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<TblOcollateralType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralType");

                entity.Property(e => e.CollateralCode).HasMaxLength(10);

                entity.Property(e => e.CollateralType).HasMaxLength(100);

                entity.Property(e => e.Coltypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COLTYPID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Nature)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOcollateralTypsubtypmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOCollateralTYPSUBTYPMapper");

                entity.Property(e => e.Colmapid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COLMAPID");

                entity.Property(e => e.Coltypid).HasColumnName("COLTYPID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Cstypid).HasColumnName("CSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOdeclinedApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblODeclinedApplications");

                entity.Property(e => e.ActionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Action_Date");

                entity.Property(e => e.AppDecId)
                    .HasMaxLength(50)
                    .HasColumnName("AppDec_Id");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DECL_ID");

                entity.Property(e => e.ExternalDocRef)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.PdffileName)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFileName");

                entity.Property(e => e.PdffilePath)
                    .HasMaxLength(500)
                    .HasColumnName("PDFFilePath");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(100)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.StatusOnDecline).HasMaxLength(50);

                entity.Property(e => e.UfId).HasColumnName("UF_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTApp_ID");
            });

            modelBuilder.Entity<TblOfacUserCounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacUserCounterparty");

                entity.Property(e => e.Afid).HasColumnName("AFID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Facid)
                    .HasMaxLength(50)
                    .HasColumnName("FACID");

                entity.Property(e => e.Fucid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FUCID");
            });

            modelBuilder.Entity<TblOfacilityClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityClass");

                entity.Property(e => e.Class)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClassDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Fcsid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FCSID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityClassification");

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Fclsid).HasColumnName("FCLSID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityClsftypmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityCLSFTYPMapper");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facglobid).HasColumnName("FACGLOBID");

                entity.Property(e => e.Facmapid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FACMAPID");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.Fclsid).HasColumnName("FCLSID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityClsftypmapperHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityCLSFTYPMapper_History");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacStage).HasColumnName("Fac_Stage");

                entity.Property(e => e.Facmapid).HasColumnName("FACMAPID");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.Fclsid).HasColumnName("FCLSID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityGlobal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityGlobal");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacglobFclsid).HasColumnName("FACGLOB_FCLSID");

                entity.Property(e => e.FacglobT24pid).HasColumnName("FACGLOB_T24PID");

                entity.Property(e => e.Facglobid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FACGLOBID");

                entity.Property(e => e.FacilityGlobal).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityPanel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityPanel");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PanelId).ValueGeneratedOnAdd();

                entity.Property(e => e.PanelName).HasMaxLength(100);
            });

            modelBuilder.Entity<TblOfacilityProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityProduct");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacProduct).HasMaxLength(200);

                entity.Property(e => e.FstprodFclsid).HasColumnName("FSTPROD_FCLSID");

                entity.Property(e => e.FstprodT24pid).HasColumnName("FSTPROD_T24PID");

                entity.Property(e => e.Fstprodid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTPRODID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityProductComType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityProductComType");

                entity.Property(e => e.ComFacType).HasMaxLength(200);

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.ProdComTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ProdComTypeID");
            });

            modelBuilder.Entity<TblOfacilityProductHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityProduct_History");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacProduct).HasMaxLength(200);

                entity.Property(e => e.FacStage).HasColumnName("Fac_Stage");

                entity.Property(e => e.FstprodFclsid).HasColumnName("FSTPROD_FCLSID");

                entity.Property(e => e.FstprodT24pid).HasColumnName("FSTPROD_T24PID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilitySubType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilitySubType");

                entity.Property(e => e.Ccf)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCF");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacSubType).HasMaxLength(200);

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.FstypT24pid).HasColumnName("FSTYP_T24PID");

                entity.Property(e => e.Fstypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.PanelVirtualPath).HasMaxLength(250);
            });

            modelBuilder.Entity<TblOfacilitySubTypeHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilitySubType_History");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacStage).HasColumnName("Fac_Stage");

                entity.Property(e => e.FacSubType).HasMaxLength(200);

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.FstypT24pid).HasColumnName("FSTYP_T24PID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilitySubTypeMapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilitySubTypeMapper");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Fstmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FSTMID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.Mapid).HasColumnName("MAPID");

                entity.Property(e => e.MapperSource)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityType");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacilityType).HasMaxLength(100);

                entity.Property(e => e.FactypFclsid).HasColumnName("FACTYP_FCLSID");

                entity.Property(e => e.FactypT24pid).HasColumnName("FACTYP_T24PID");

                entity.Property(e => e.Factypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FACTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityType1602023>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityType1602023");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacilityType).HasMaxLength(100);

                entity.Property(e => e.FactypFclsid).HasColumnName("FACTYP_FCLSID");

                entity.Property(e => e.FactypT24pid).HasColumnName("FACTYP_T24PID");

                entity.Property(e => e.Factypid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("FACTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOfacilityTypeHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOFacilityType_History");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacStage).HasColumnName("Fac_Stage");

                entity.Property(e => e.FacilityType).HasMaxLength(100);

                entity.Property(e => e.FactypFclsid).HasColumnName("FACTYP_FCLSID");

                entity.Property(e => e.FactypT24pid).HasColumnName("FACTYP_T24PID");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOperationDiary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOperationDiary");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OperationDiaryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OperationDiaryID");

                entity.Property(e => e.OperationDiaryXml)
                    .HasColumnType("xml")
                    .HasColumnName("OperationDiary_XML");
            });

            modelBuilder.Entity<TblOpricingMaster>(entity =>
            {
                entity.HasKey(e => e.PmId);

                entity.ToTable("tblOPricingMaster");

                entity.Property(e => e.PmId).HasColumnName("PM_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PcngId)
                    .HasMaxLength(500)
                    .HasColumnName("PCNG_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblOproductAssetMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOProductAssetMapping");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Paid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PAID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOproject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOProjects");

                entity.Property(e => e.City).HasMaxLength(100);

                entity.Property(e => e.CommencementDate).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(200);

                entity.Property(e => e.Cost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Currency).HasComment("FK to tblCurrency");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ExpectedCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.GovernmentShare)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.InternalRateOfReturnOfProject).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LocationAddress).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.OtherCostDetailXml)
                    .HasColumnType("xml")
                    .HasColumnName("OtherCostDetailXML");

                entity.Property(e => e.PaidUpCapital).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PaymentTerms).HasMaxLength(500);

                entity.Property(e => e.PrimaryParty).HasMaxLength(200);

                entity.Property(e => e.PrjId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRJ_ID");

                entity.Property(e => e.ProjectCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ProjectConsultant).HasMaxLength(500);

                entity.Property(e => e.ProjectDetails).HasMaxLength(500);

                entity.Property(e => e.ProjectOwnership).HasMaxLength(200);

                entity.Property(e => e.Projid)
                    .HasMaxLength(50)
                    .HasColumnName("PROJID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOprojectMaster>(entity =>
            {
                entity.HasKey(e => e.PmId);

                entity.ToTable("tblOProjectMaster");

                entity.Property(e => e.PmId).HasColumnName("PM_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(500)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblOrating>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblORatings");

                entity.Property(e => e.AgencyName).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OrtId).HasColumnName("ORT_ID");

                entity.Property(e => e.Rating).HasMaxLength(50);
            });

            modelBuilder.Entity<TblOrgHierarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOrgHierarchy");

                entity.Property(e => e.CurrentDesignation)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_DESIGNATION");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("emp_name");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_number");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER");

                entity.Property(e => e.ReportingManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER_NAME");

                entity.Property(e => e.ReviewManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER");

                entity.Property(e => e.ReviewManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER_NAME");
            });

            modelBuilder.Entity<TblOrgHierarchyHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOrgHierarchyHistory");

                entity.Property(e => e.CurrentDesignation)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_DESIGNATION");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("emp_name");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_number");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER");

                entity.Property(e => e.ReportingManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER_NAME");

                entity.Property(e => e.ReviewManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER");

                entity.Property(e => e.ReviewManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER_NAME");
            });

            modelBuilder.Entity<TblOrgHierarchyUploadExcel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOrgHierarchyUploadExcel");

                entity.Property(e => e.CurrentDesignation)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_DESIGNATION");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("emp_name");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_number");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER");

                entity.Property(e => e.ReportingManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER_NAME");

                entity.Property(e => e.ReviewManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER");

                entity.Property(e => e.ReviewManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER_NAME");
            });

            modelBuilder.Entity<TblOriskTransferCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblORiskTransferCountry");

                entity.Property(e => e.Afid).HasColumnName("AFID");

                entity.Property(e => e.Rtcid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RTCID");
            });

            modelBuilder.Entity<TblOsAppFacColWfdraftTracker>(entity =>
            {
                entity.HasKey(e => e.OsdrftId);

                entity.ToTable("tblOS_APP_FAC_COL_WFDraftTracker");

                entity.Property(e => e.OsdrftId).HasColumnName("OSDRFT_ID");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId)
                    .HasColumnName("CTPT_ID")
                    .HasComment("FK to tblCounterparty");

                entity.Property(e => e.Ctptname)
                    .HasMaxLength(500)
                    .HasColumnName("CTPTName")
                    .HasComment("FK to tblCounterparty");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasColumnName("Draft_Type");

                entity.Property(e => e.Draftxml)
                    .HasColumnType("xml")
                    .HasColumnName("DRAFTXML");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .HasComment("Fk to tblUsers");

                entity.Property(e => e.UserName)
                    .HasMaxLength(300)
                    .HasComment("FK to UserName in tblUsers");

                entity.Property(e => e.WfstId)
                    .HasColumnName("WFST_ID")
                    .HasComment("FK to  3 tables of tblOSWFActionStatusApplicationTracker, tblOSWFActionStatusFacilityTracker and ");
            });

            modelBuilder.Entity<TblOsAppFacColWfdraftTrackerRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOS_APP_FAC_COL_WFDraftTracker_Rpt");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Ctptname)
                    .HasMaxLength(500)
                    .HasColumnName("CTPTName");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DraftType)
                    .HasMaxLength(50)
                    .HasColumnName("Draft_Type");

                entity.Property(e => e.Draftxml)
                    .HasColumnType("xml")
                    .HasColumnName("DRAFTXML");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.OsdrftId).HasColumnName("OSDRFT_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.UserName).HasMaxLength(300);

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");
            });

            modelBuilder.Entity<TblOsanalysisId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSAnalysisID");

                entity.Property(e => e.AnlId).HasColumnName("ANL_ID");

                entity.Property(e => e.AnlValue)
                    .HasMaxLength(20)
                    .HasColumnName("ANL_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsapplicationClientRevenue>(entity =>
            {
                entity.HasKey(e => e.Acrid);

                entity.ToTable("tblOSApplicationClientRevenue");

                entity.Property(e => e.Acrid).HasColumnName("ACRID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Crybudget)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CRYBudget");

                entity.Property(e => e.Cyforecast)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CYForecast");

                entity.Property(e => e.ForecastUponBudget).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Paramaters).HasMaxLength(100);

                entity.Property(e => e.PyuponYtd)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("PYUponYTD");
            });

            modelBuilder.Entity<TblOsapplicationComplianceChecklist>(entity =>
            {
                entity.HasKey(e => e.Acclid);

                entity.ToTable("tblOSApplicationComplianceChecklist");

                entity.Property(e => e.Acclid).HasColumnName("ACCLID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.Cclid).HasColumnName("CCLID");

                entity.Property(e => e.CheckListTextUser).HasMaxLength(2000);

                entity.Property(e => e.ChkId)
                    .HasMaxLength(50)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.Chklanswer).HasColumnName("CHKLAnswer");

                entity.Property(e => e.Chkldate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHKLDate");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOsapplicationId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSApplicationID");

                entity.Property(e => e.AppId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("APP_ID");

                entity.Property(e => e.AppValue)
                    .HasMaxLength(20)
                    .HasColumnName("APP_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsassesmentId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSAssesmentID");

                entity.Property(e => e.AsmtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ASMT_ID");

                entity.Property(e => e.AsmtValue)
                    .HasMaxLength(200)
                    .HasColumnName("ASMT_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsbsaid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSBSAID");

                entity.Property(e => e.BsaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BSA_ID");

                entity.Property(e => e.BsaValue)
                    .HasMaxLength(200)
                    .HasColumnName("BSA_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsbusinessLoanCa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSBusinessLoanCA");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.BlcaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BLCA_ID");

                entity.Property(e => e.Blcaanswer)
                    .HasMaxLength(10)
                    .HasColumnName("BLCAAnswer");

                entity.Property(e => e.Blcadate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLCADate");

                entity.Property(e => e.Blcatext)
                    .HasMaxLength(2000)
                    .HasColumnName("BLCAText");

                entity.Property(e => e.BusinessLoanCaId)
                    .HasMaxLength(50)
                    .HasColumnName("BusinessLoanCA_ID");

                entity.Property(e => e.Cclid).HasColumnName("CCLID");

                entity.Property(e => e.CheckListType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOscheckListId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCheckListID");

                entity.Property(e => e.ChkId).HasColumnName("CHK_ID");

                entity.Property(e => e.ChkValue)
                    .HasMaxLength(20)
                    .HasColumnName("CHK_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscollateralId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCollateralID");

                entity.Property(e => e.ColId).HasColumnName("COL_ID");

                entity.Property(e => e.ColValue)
                    .HasMaxLength(20)
                    .HasColumnName("COL_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscommentId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCommentID");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CmtValue)
                    .HasMaxLength(20)
                    .HasColumnName("CMT_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscommittee>(entity =>
            {
                entity.HasKey(e => e.CmtId);

                entity.ToTable("tblOSCommittee");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CommitteeActionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeDecisionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeName).HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOscommitteeMember>(entity =>
            {
                entity.HasKey(e => e.CmtMbId)
                    .HasName("PK__tblOSCom__0A33E809392DE5AC");

                entity.ToTable("tblOSCommitteeMembers");

                entity.Property(e => e.CmtMbId).HasColumnName("CMT_MB_ID");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CmtMbrId).HasColumnName("CMT_MBR_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOscommonTrackerId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCommonTrackerID");

                entity.Property(e => e.ComId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COM_ID");

                entity.Property(e => e.ComValue)
                    .HasMaxLength(200)
                    .HasColumnName("COM_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscommunicatedFaclility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCommunicatedFaclility");

                entity.Property(e => e.Afid).HasColumnName("AFID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ComfacId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COMFAC_ID");

                entity.Property(e => e.CommunicatedAmount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.Facid)
                    .HasMaxLength(100)
                    .HasColumnName("FACID");

                entity.Property(e => e.Margin).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinimumRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProposedLimitCurrencyName).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblOscomplianceChecklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSComplianceChecklist");

                entity.Property(e => e.Cclid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CCLID");

                entity.Property(e => e.CheckListText).HasMaxLength(2000);

                entity.Property(e => e.CheckListType).HasMaxLength(200);

                entity.Property(e => e.CheckListTypeDesc).HasMaxLength(100);

                entity.Property(e => e.Chkldate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHKLDate");

                entity.Property(e => e.Chklparam)
                    .HasMaxLength(200)
                    .HasColumnName("CHKLParam");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOsconditionId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSConditionID");

                entity.Property(e => e.CndId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CND_ID");

                entity.Property(e => e.CndValue)
                    .HasMaxLength(20)
                    .HasColumnName("CND_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscounterpartyId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCounterpartyID");

                entity.Property(e => e.CtptId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptValue)
                    .HasMaxLength(20)
                    .HasColumnName("CTPT_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOscovenantId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSCovenantID");

                entity.Property(e => e.CovId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("COV_ID");

                entity.Property(e => e.CovValue)
                    .HasMaxLength(20)
                    .HasColumnName("COV_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsdeclineApplicationId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSDeclineApplicationID");

                entity.Property(e => e.DecId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEC_ID");

                entity.Property(e => e.DecValue)
                    .HasMaxLength(20)
                    .HasColumnName("DEC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsdocumentId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSDocumentID");

                entity.Property(e => e.DocId).HasColumnName("DOC_ID");

                entity.Property(e => e.DocValue)
                    .HasMaxLength(20)
                    .HasColumnName("DOC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsdrawingPowerId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSDrawingPowerID");

                entity.Property(e => e.DpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DP_ID");

                entity.Property(e => e.DpValue)
                    .HasMaxLength(20)
                    .HasColumnName("DP_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsdrawingPowerSetupId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSDrawingPowerSetupID");

                entity.Property(e => e.DpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DP_ID");

                entity.Property(e => e.DpValue)
                    .HasMaxLength(20)
                    .HasColumnName("DP_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsearlyWarningAccountPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningAccountPosition");

                entity.Property(e => e.ActposId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ACTPOS_ID");

                entity.Property(e => e.Aggrttype)
                    .HasMaxLength(100)
                    .HasColumnName("AGGRTType");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.CheckListType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DayOverdue)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Day_Overdue");

                entity.Property(e => e.EwsId)
                    .HasMaxLength(50)
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.InPdExcess)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("IN_PD_Excess");

                entity.Property(e => e.Limit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Outstanding).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblOsearlyWarningAccountStrategy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningAccountStrategy");

                entity.Property(e => e.ActstrDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ACTSTR_Date");

                entity.Property(e => e.ActstrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ACTSTR_ID");

                entity.Property(e => e.ActstrText)
                    .HasMaxLength(2000)
                    .HasColumnName("ACTSTR_Text");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.CheckListType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EwsId)
                    .HasMaxLength(50)
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOsearlyWarningId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningID");

                entity.Property(e => e.EwsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.EwsValue)
                    .HasMaxLength(20)
                    .HasColumnName("EWS_Value");
            });

            modelBuilder.Entity<TblOsearlyWarningQuestionaire>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningQuestionaire");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.Cclid).HasColumnName("CCLID");

                entity.Property(e => e.CheckListType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.EwsId)
                    .HasMaxLength(50)
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Qewsanswer)
                    .HasMaxLength(20)
                    .HasColumnName("QEWSAnswer");

                entity.Property(e => e.Qewsdate)
                    .HasColumnType("datetime")
                    .HasColumnName("QEWSDate");

                entity.Property(e => e.Qewstext)
                    .HasMaxLength(2000)
                    .HasColumnName("QEWSText");

                entity.Property(e => e.QueId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Que_ID");
            });

            modelBuilder.Entity<TblOsearlyWarningTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.EwsId)
                    .HasMaxLength(40)
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstewsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTEWS_ID");

                entity.Property(e => e.XmlEwsaccountPosition)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSAccountPosition");

                entity.Property(e => e.XmlEwsaccountStrategy)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSAccountStrategy");

                entity.Property(e => e.XmlEwsquestionaire)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSQuestionaire");
            });

            modelBuilder.Entity<TblOsearlyWarningTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSEarlyWarningTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.EwsId)
                    .HasMaxLength(40)
                    .HasColumnName("EWS_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstewsId).HasColumnName("WFSTEWS_ID");

                entity.Property(e => e.XmlEwsaccountPosition)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSAccountPosition");

                entity.Property(e => e.XmlEwsaccountStrategy)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSAccountStrategy");

                entity.Property(e => e.XmlEwsquestionaire)
                    .HasColumnType("xml")
                    .HasColumnName("XML_EWSQuestionaire");
            });

            modelBuilder.Entity<TblOsecurity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSecurities");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SecId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SecID");

                entity.Property(e => e.Securities).HasMaxLength(100);
            });

            modelBuilder.Entity<TblOsfacilityId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSFacilityID");

                entity.Property(e => e.FacId).HasColumnName("FAC_ID");

                entity.Property(e => e.FacValue)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsfacilitySummaryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSFacilitySummaryRpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ExistingGroupTotalLimits).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExistingTotalCreditLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProposedGroupTotalLimits).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProposedTotalCreditLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOsfacilitySummaryRpt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSFacilitySummaryRpt1");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ExistingGroupTotalLimits).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExistingTotalCreditLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ProposedGroupTotalLimits).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProposedTotalCreditLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblOsfinancialId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSFinancialID");

                entity.Property(e => e.FinId).HasColumnName("FIN_ID");

                entity.Property(e => e.FinValue)
                    .HasMaxLength(20)
                    .HasColumnName("FIN_VALUE")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsiomfacilitySummaryTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSIOMFacilitySummaryTable");

                entity.Property(e => e.Aggrttype)
                    .HasMaxLength(100)
                    .HasColumnName("AGGRTType");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FactabId)
                    .HasMaxLength(50)
                    .HasColumnName("FACTAB_ID");

                entity.Property(e => e.IomfstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IOMFST_ID");

                entity.Property(e => e.Limit).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Outstanding).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<TblOsiomid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSIOMID");

                entity.Property(e => e.IomId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IOM_ID");

                entity.Property(e => e.IomValue)
                    .HasMaxLength(20)
                    .HasColumnName("IOM_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsiomtabId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSIOMTabID");

                entity.Property(e => e.TabId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TAB_ID");

                entity.Property(e => e.TabValue)
                    .HasMaxLength(20)
                    .HasColumnName("TAB_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsiomtabTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSIOMTabTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FactabId)
                    .HasMaxLength(40)
                    .HasColumnName("FACTAB_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstiomtabId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTIOMTab_ID");

                entity.Property(e => e.XmlFacilitySummaryTab)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FacilitySummaryTab");
            });

            modelBuilder.Entity<TblOsiomtabTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSIOMTabTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FactabId)
                    .HasMaxLength(40)
                    .HasColumnName("FACTAB_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstiomtabId).HasColumnName("WFSTIOMTab_ID");

                entity.Property(e => e.XmlFacilitySummaryTab)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FacilitySummaryTab");
            });

            modelBuilder.Entity<TblOslimitReferenceCodeId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSLimitReferenceCodeID");

                entity.Property(e => e.LimitReferenceCode).HasMaxLength(30);

                entity.Property(e => e.LimitReferenceCodeStatus)
                    .HasMaxLength(10)
                    .HasComment("When LimitReferenceCodeStatus=\"Y\" Ready for release (it can be delete)\r\n\r\nWhen LimitReferenceCodeStatus=\"R\"  Release code(after delete)\r\n\r\nWhen LimitReferenceCodeStatus=\"N\"  it can not be reused(When Facility Approved) ");

                entity.Property(e => e.Lrcid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LRCID");
            });

            modelBuilder.Entity<TblOspecialSectorCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSpecialSectorCategory");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SpecialSectorCategory).HasMaxLength(50);

                entity.Property(e => e.Sscid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SSCID");
            });

            modelBuilder.Entity<TblOspeerFinancialId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSPeerFinancialID");

                entity.Property(e => e.PfinId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PFIN_ID");

                entity.Property(e => e.PfinValue)
                    .HasMaxLength(20)
                    .HasColumnName("PFIN_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOspricingAndProfitabilityId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSPricingAndProfitabilityID");

                entity.Property(e => e.PriprfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRIPRF_ID");

                entity.Property(e => e.PriprfValue)
                    .HasMaxLength(20)
                    .HasColumnName("PRIPRF_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOspricingId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSPricingID");

                entity.Property(e => e.PricingId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Pricing_ID");

                entity.Property(e => e.PricingValue)
                    .HasMaxLength(20)
                    .HasColumnName("Pricing_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsprojectId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSProjectID");

                entity.Property(e => e.ProjectId).HasColumnName("Project_ID");

                entity.Property(e => e.ProjectValue)
                    .HasMaxLength(20)
                    .HasColumnName("Project_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOspurposeOfCa>(entity =>
            {
                entity.HasKey(e => e.Pid);

                entity.ToTable("tblOSPurposeOfCA");

                entity.Property(e => e.Pid).HasColumnName("PID");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOspurposeOfCaworkflow>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSPurposeOfCAWorkflows");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Pid).HasColumnName("PID");
            });

            modelBuilder.Entity<TblOsraclessThan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSRACLessThan");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Attachment).HasMaxLength(500);

                entity.Property(e => e.Cclid).HasColumnName("CCLID");

                entity.Property(e => e.CheckListType).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RaclessThanId)
                    .HasMaxLength(50)
                    .HasColumnName("RACLessThan_ID");

                entity.Property(e => e.RacltId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RACLT_ID");

                entity.Property(e => e.Racltanswer)
                    .HasMaxLength(10)
                    .HasColumnName("RACLTAnswer");

                entity.Property(e => e.Racltdate)
                    .HasColumnType("datetime")
                    .HasColumnName("RACLTDate");

                entity.Property(e => e.Raclttext)
                    .HasMaxLength(2000)
                    .HasColumnName("RACLTText");
            });

            modelBuilder.Entity<TblOsrarocCalculatorId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSRarocCalculatorID");

                entity.Property(e => e.RcalcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RCalc_ID");

                entity.Property(e => e.RcalcValue)
                    .HasMaxLength(20)
                    .HasColumnName("RCalc_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOsreservationId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSReservationID");

                entity.Property(e => e.ResId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RES_ID");

                entity.Property(e => e.ResValue)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RES_VALUE");
            });

            modelBuilder.Entity<TblOsroleCommittee>(entity =>
            {
                entity.HasKey(e => e.CmtId);

                entity.ToTable("tblOSRoleCommittee");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CmtModuleId).HasColumnName("CMT_Module_ID");

                entity.Property(e => e.CmtWfId).HasColumnName("CMT_WF_ID");

                entity.Property(e => e.CommitteeActionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeDecisionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeFlowStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeName).HasMaxLength(100);

                entity.Property(e => e.CommitteeVchairmanRole).HasColumnName("CommitteeVChairmanRole");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOsroleCommitteeMember>(entity =>
            {
                entity.HasKey(e => e.CmtMbId)
                    .HasName("PK__tblOSRol__0A33E8097174607D");

                entity.ToTable("tblOSRoleCommitteeMembers");

                entity.Property(e => e.CmtMbId).HasColumnName("CMT_MB_ID");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CmtRoleMbrId).HasColumnName("CMT_RoleMBR_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblOssanctionLetterId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSSanctionLetterID");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Fy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FY");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<TblOssecurityId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSSecurityID");

                entity.Property(e => e.SecId).HasColumnName("SEC_ID");

                entity.Property(e => e.SecValue)
                    .HasMaxLength(20)
                    .HasColumnName("SEC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblOstempLeadId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSTempLeadID");

                entity.Property(e => e.LeadValue)
                    .HasMaxLength(20)
                    .HasColumnName("LEAD_Value")
                    .IsFixedLength();

                entity.Property(e => e.TlId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TL_ID");
            });

            modelBuilder.Entity<TblOswfactionStatusAnalysisTracker>(entity =>
            {
                entity.HasKey(e => e.WfstanlId);

                entity.ToTable("tblOSWFActionStatusAnalysisTracker");

                entity.Property(e => e.WfstanlId).HasColumnName("WFSTANL_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AnalysisStructure).HasColumnName("Analysis_Structure");

                entity.Property(e => e.AnlId)
                    .HasMaxLength(40)
                    .HasColumnName("ANL_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlAnalysis)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Analysis");
            });

            modelBuilder.Entity<TblOswfactionStatusAnalysisTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusAnalysisTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AnalysisStructure).HasColumnName("Analysis_Structure");

                entity.Property(e => e.AnlId)
                    .HasMaxLength(40)
                    .HasColumnName("ANL_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstanlId).HasColumnName("WFSTANL_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlAnalysis)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Analysis");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTracker>(entity =>
            {
                entity.HasKey(e => e.WfstappId);

                entity.ToTable("tblOSWFActionStatusApplicationTracker");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionSubmitBy).HasComment("Fk to tblUsers");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclinedAppId)
                    .HasMaxLength(100)
                    .HasColumnName("DeclinedApp_Id");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.QuorumCompletionTime).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.UserAcknowledge).HasComment("FK to tblUsers");

                entity.Property(e => e.WfaId)
                    .HasColumnName("WFA_ID")
                    .HasComment("FK to tblWorkFlowActions");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerExtended>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTrackerExtended");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerExtendedHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTrackerExtended_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclinedAppId)
                    .HasMaxLength(100)
                    .HasColumnName("DeclinedApp_Id");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.QuorumCompletionTime).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerHistoryDeltaMi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTracker_History_Delta_MIS");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclinedAppId)
                    .HasMaxLength(100)
                    .HasColumnName("DeclinedApp_Id");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.QuorumCompletionTime).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTracker_History_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclinedAppId)
                    .HasMaxLength(100)
                    .HasColumnName("DeclinedApp_Id");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerOutOfOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusApplicationTracker_OutOfOffice");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusApplicationTrackerRpt>(entity =>
            {
                entity.HasKey(e => e.WfstappId);

                entity.ToTable("tblOSWFActionStatusApplicationTracker_Rpt");

                entity.Property(e => e.WfstappId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeclinedAppId)
                    .HasMaxLength(100)
                    .HasColumnName("DeclinedApp_Id");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusAssesmentTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusAssesmentTracker");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusAssesmentTracker_WFSTAPP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AsmtId)
                    .HasMaxLength(40)
                    .HasColumnName("ASMT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlAssesment)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Assesment");
            });

            modelBuilder.Entity<TblOswfactionStatusAssesmentTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusAssesmentTracker_History");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusAssesmentTracker_History_WFSTAPP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AsmtId)
                    .HasMaxLength(40)
                    .HasColumnName("ASMT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstaId).HasColumnName("WFSTA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlAssesment)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Assesment");
            });

            modelBuilder.Entity<TblOswfactionStatusBsatracker>(entity =>
            {
                entity.HasKey(e => e.WfstbsaId);

                entity.ToTable("tblOSWFActionStatusBSATracker");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusBSATracker_WFSTAPP_ID");

                entity.Property(e => e.WfstbsaId).HasColumnName("WFSTBSA_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.BsaId)
                    .HasMaxLength(40)
                    .HasColumnName("BSA_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlBsa)
                    .HasColumnType("xml")
                    .HasColumnName("XML_BSA");
            });

            modelBuilder.Entity<TblOswfactionStatusBsatrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusBSATracker_History");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusBSATracker_History_WFSTAPP_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.BsaId)
                    .HasMaxLength(40)
                    .HasColumnName("BSA_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstbsaId).HasColumnName("WFSTBSA_ID");

                entity.Property(e => e.XmlBsa)
                    .HasColumnType("xml")
                    .HasColumnName("XML_BSA");
            });

            modelBuilder.Entity<TblOswfactionStatusCollateralTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCollateralTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ColId)
                    .HasMaxLength(40)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcolId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCOL_ID");

                entity.Property(e => e.XmlCollateral)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Collateral");
            });

            modelBuilder.Entity<TblOswfactionStatusCollateralTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusCollateralTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ColId)
                    .HasMaxLength(40)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcolId).HasColumnName("WFSTCOL_ID");

                entity.Property(e => e.XmlCollateral)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Collateral");
            });

            modelBuilder.Entity<TblOswfactionStatusCollateralTrackerHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCollateralTracker_History_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ColId)
                    .HasMaxLength(40)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcolId).HasColumnName("WFSTCOL_ID");

                entity.Property(e => e.XmlCollateral)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Collateral");
            });

            modelBuilder.Entity<TblOswfactionStatusCollateralTrackerRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCollateralTracker_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ColId)
                    .HasMaxLength(40)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcolId).HasColumnName("WFSTCOL_ID");

                entity.Property(e => e.XmlCollateral)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Collateral");
            });

            modelBuilder.Entity<TblOswfactionStatusCommentsTracker>(entity =>
            {
                entity.HasKey(e => e.WfstcmtId);

                entity.ToTable("tblOSWFActionStatusCommentsTracker");

                entity.Property(e => e.WfstcmtId).HasColumnName("WFSTCMT_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CmtId)
                    .HasMaxLength(50)
                    .HasColumnName("CMT_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.Xml)
                    .HasColumnType("xml")
                    .HasColumnName("XML");
            });

            modelBuilder.Entity<TblOswfactionStatusCommentsTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusCommentsTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CmtId)
                    .HasMaxLength(50)
                    .HasColumnName("CMT_ID");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcmtId).HasColumnName("WFSTCMT_ID");

                entity.Property(e => e.Xml)
                    .HasColumnType("xml")
                    .HasColumnName("XML");
            });

            modelBuilder.Entity<TblOswfactionStatusCommitteeTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCommitteeTracker");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.Awccount).HasColumnName("AWCCount");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.Comment).HasMaxLength(3000);

                entity.Property(e => e.CommitteeName).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName).HasMaxLength(200);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.Vote).HasMaxLength(20);

                entity.Property(e => e.VotingDate).HasColumnType("datetime");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcmtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCMT_ID");
            });

            modelBuilder.Entity<TblOswfactionStatusCommonTracker>(entity =>
            {
                entity.HasKey(e => e.WfstctId);

                entity.ToTable("tblOSWFActionStatusCommonTracker");

                entity.Property(e => e.WfstctId).HasColumnName("WFSTCT_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ComId)
                    .HasMaxLength(40)
                    .HasColumnName("COM_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlCom)
                    .HasColumnType("xml")
                    .HasColumnName("XML_COM");
            });

            modelBuilder.Entity<TblOswfactionStatusCommonTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusCommonTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ComId)
                    .HasMaxLength(40)
                    .HasColumnName("COM_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstctId).HasColumnName("WFSTCT_ID");

                entity.Property(e => e.XmlCom)
                    .HasColumnType("xml")
                    .HasColumnName("XML_COM");
            });

            modelBuilder.Entity<TblOswfactionStatusComplianceCheckListTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusComplianceCheckListTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstchkId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblOswfactionStatusComplianceCheckListTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusComplianceCheckListTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChkId)
                    .HasMaxLength(40)
                    .HasColumnName("CHK_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstchkId).HasColumnName("WFSTCHK_ID");

                entity.Property(e => e.XmlCheckList)
                    .HasColumnType("xml")
                    .HasColumnName("XML_CheckList");
            });

            modelBuilder.Entity<TblOswfactionStatusCompositeGroupTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCompositeGroupTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CompgrpId)
                    .HasMaxLength(40)
                    .HasColumnName("COMPGRP_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcompgrpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCOMPGRP_ID");

                entity.Property(e => e.XmlCompgrp)
                    .HasColumnType("xml")
                    .HasColumnName("XML_COMPGRP");
            });

            modelBuilder.Entity<TblOswfactionStatusCompositeGroupTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusCompositeGroupTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CompgrpId)
                    .HasMaxLength(40)
                    .HasColumnName("COMPGRP_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcompgrpId).HasColumnName("WFSTCOMPGRP_ID");

                entity.Property(e => e.WfstcompgrphId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCOMPGRPH_ID");

                entity.Property(e => e.XmlCompgrp)
                    .HasColumnType("xml")
                    .HasColumnName("XML_COMPGRP");
            });

            modelBuilder.Entity<TblOswfactionStatusConditionTracker>(entity =>
            {
                entity.HasKey(e => e.WfstcndId);

                entity.ToTable("tblOSWFActionStatusConditionTracker");

                entity.Property(e => e.WfstcndId).HasColumnName("WFSTCND_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConditionType).HasMaxLength(50);

                entity.Property(e => e.FinancialConditionId)
                    .HasMaxLength(50)
                    .HasColumnName("FinancialConditionID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlCondition)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Condition");
            });

            modelBuilder.Entity<TblOswfactionStatusConditionTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusConditionTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConditionType).HasMaxLength(50);

                entity.Property(e => e.FinancialConditionId)
                    .HasMaxLength(50)
                    .HasColumnName("FinancialConditionID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstcndId).HasColumnName("WFSTCND_ID");

                entity.Property(e => e.XmlCondition)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Condition");
            });

            modelBuilder.Entity<TblOswfactionStatusDeviationsTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusDeviationsTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.DvnId)
                    .HasMaxLength(40)
                    .HasColumnName("DVN_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdvnId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTDVN_ID");

                entity.Property(e => e.XmlDeviations)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Deviations");
            });

            modelBuilder.Entity<TblOswfactionStatusDeviationsTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusDeviationsTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.DvnId)
                    .HasMaxLength(40)
                    .HasColumnName("DVN_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdvnId).HasColumnName("WFSTDVN_ID");

                entity.Property(e => e.XmlDeviations)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Deviations");
            });

            modelBuilder.Entity<TblOswfactionStatusDocumentConstitutionalTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusDocumentConstitutionalTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConstitutionalId)
                    .HasMaxLength(50)
                    .HasColumnName("ConstitutionalID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstconstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCONST_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlConstitutional)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Constitutional");
            });

            modelBuilder.Entity<TblOswfactionStatusDocumentConstitutionalTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusDocumentConstitutionalTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ConstitutionalId)
                    .HasMaxLength(50)
                    .HasColumnName("ConstitutionalID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstconstId).HasColumnName("WFSTCONST_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlConstitutional)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Constitutional");
            });

            modelBuilder.Entity<TblOswfactionStatusFacilityTracker>(entity =>
            {
                entity.HasKey(e => e.WfstfacId);

                entity.ToTable("tblOSWFActionStatusFacilityTracker");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusFacilityTracker_WFSTAPP_ID");

                entity.Property(e => e.WfstfacId).HasColumnName("WFSTFAC_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOswfactionStatusFacilityTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusFacilityTracker_History");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusFacilityTracker_History_WFSTAPP_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstfacId).HasColumnName("WFSTFAC_ID");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOswfactionStatusFacilityTrackerHistoryDeltaMi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusFacilityTracker_History_Delta_MIS");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstfacId).HasColumnName("WFSTFAC_ID");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOswfactionStatusFacilityTrackerHistoryRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusFacilityTracker_History_Rpt");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstfacId).HasColumnName("WFSTFAC_ID");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOswfactionStatusFacilityTrackerRpt>(entity =>
            {
                entity.HasKey(e => e.WfstfacId);

                entity.ToTable("tblOSWFActionStatusFacilityTracker_Rpt");

                entity.Property(e => e.WfstfacId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTFAC_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(10)
                    .HasColumnName("CCY");

                entity.Property(e => e.Charges).HasMaxLength(200);

                entity.Property(e => e.Collaterals).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ExistLimit).HasMaxLength(100);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(50)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.LimitAmt).HasMaxLength(100);

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .HasColumnName("ParentFAC_ID");

                entity.Property(e => e.Pricing).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Tenor).HasMaxLength(20);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.Utilization).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFacility)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Facility");
            });

            modelBuilder.Entity<TblOswfactionStatusFinancialCovenantTracker>(entity =>
            {
                entity.HasKey(e => e.WfstfincovId);

                entity.ToTable("tblOSWFActionStatusFinancialCovenantTracker");

                entity.Property(e => e.WfstfincovId).HasColumnName("WFSTFINCOV_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FinancialCovenantId)
                    .HasMaxLength(40)
                    .HasColumnName("FinancialCovenantID");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFinancialCovenant)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FinancialCovenant");
            });

            modelBuilder.Entity<TblOswfactionStatusFinancialCovenantTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusFinancialCovenantTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FinancialCovenantId)
                    .HasMaxLength(40)
                    .HasColumnName("FinancialCovenantID");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstfincovId).HasColumnName("WFSTFINCOV_ID");

                entity.Property(e => e.XmlFinancialCovenant)
                    .HasColumnType("xml")
                    .HasColumnName("XML_FinancialCovenant");
            });

            modelBuilder.Entity<TblOswfactionStatusFinancialTracker>(entity =>
            {
                entity.HasKey(e => e.WfstfinId);

                entity.ToTable("tblOSWFActionStatusFinancialTracker");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusFinancialTracker_WFSTAPP_ID");

                entity.Property(e => e.WfstfinId).HasColumnName("WFSTFIN_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FinId)
                    .HasMaxLength(40)
                    .HasColumnName("FIN_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlFinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Financial");
            });

            modelBuilder.Entity<TblOswfactionStatusFinancialTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusFinancialTracker_History");

                entity.HasIndex(e => e.WfstappId, "NCINDX_tblOSWFActionStatusFinancialTracker_History_WFSTAPP_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.FinId)
                    .HasMaxLength(40)
                    .HasColumnName("FIN_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstfinId).HasColumnName("WFSTFIN_ID");

                entity.Property(e => e.XmlFinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Financial");
            });

            modelBuilder.Entity<TblOswfactionStatusInitiateDocumentTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusInitiateDocumentTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.Comments).HasMaxLength(1000);

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DocGuid).HasColumnName("DOC_GUID");

                entity.Property(e => e.DocmntId)
                    .HasMaxLength(50)
                    .HasColumnName("DOCMNT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(50)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusInitiateDocumentTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusInitiateDocumentTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.Comments).HasMaxLength(1000);

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.DocGuid).HasColumnName("DOC_GUID");

                entity.Property(e => e.DocmntId)
                    .HasMaxLength(50)
                    .HasColumnName("DOCMNT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentMWfId).HasColumnName("Parent_M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(50)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstdocId).HasColumnName("WFSTDOC_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusPeerFinancialTracker>(entity =>
            {
                entity.HasKey(e => e.WfstpfinId);

                entity.ToTable("tblOSWFActionStatusPeerFinancialTracker");

                entity.Property(e => e.WfstpfinId).HasColumnName("WFSTPFIN_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.PfinId)
                    .HasMaxLength(40)
                    .HasColumnName("PFIN_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlPfinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_PFinancial");
            });

            modelBuilder.Entity<TblOswfactionStatusPeerFinancialTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusPeerFinancialTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.PfinId)
                    .HasMaxLength(40)
                    .HasColumnName("PFIN_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstpfinId).HasColumnName("WFSTPFIN_ID");

                entity.Property(e => e.XmlPfinancial)
                    .HasColumnType("xml")
                    .HasColumnName("XML_PFinancial");
            });

            modelBuilder.Entity<TblOswfactionStatusPortfolioAppTracker>(entity =>
            {
                entity.HasKey(e => e.WfstappId);

                entity.ToTable("tblOSWFActionStatusPortfolioAppTracker");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ActionSubmitBy).HasComment("Fk to tblUsers");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PPid).HasColumnName("P_PID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.UserAcknowledge).HasComment("FK to tblUsers");

                entity.Property(e => e.WfaId)
                    .HasColumnName("WFA_ID")
                    .HasComment("FK to tblWorkFlowActions");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusPortfolioAppTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusPortfolioAppTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.AppGuid).HasColumnName("APP_GUID");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.Aptypid).HasColumnName("APTYPID");

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CommitteeName).HasMaxLength(200);

                entity.Property(e => e.DeptId).HasColumnName("Dept_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PPid).HasColumnName("P_PID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusPricingAndProfitabilityTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusPricingAndProfitabilityTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.PricingProfitabilityId)
                    .HasMaxLength(40)
                    .HasColumnName("PricingProfitabilityID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstpriprfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTPRIPRF_ID");

                entity.Property(e => e.XmlPricingAndProfitability)
                    .HasColumnType("xml")
                    .HasColumnName("XML_PricingAndProfitability");
            });

            modelBuilder.Entity<TblOswfactionStatusPricingAndProfitabilityTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusPricingAndProfitabilityTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.PricingProfitabilityId)
                    .HasMaxLength(40)
                    .HasColumnName("PricingProfitabilityID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstpriprfId).HasColumnName("WFSTPRIPRF_ID");

                entity.Property(e => e.XmlPricingAndProfitability)
                    .HasColumnType("xml")
                    .HasColumnName("XML_PricingAndProfitability");
            });

            modelBuilder.Entity<TblOswfactionStatusPricingTracker>(entity =>
            {
                entity.HasKey(e => e.WfstpcngId);

                entity.ToTable("tblOSWFActionStatusPricingTracker");

                entity.Property(e => e.WfstpcngId).HasColumnName("WFSTPCNG_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PcngId)
                    .HasMaxLength(500)
                    .HasColumnName("PCNG_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusPricingTrackerHistory>(entity =>
            {
                entity.ToTable("tblOSWFActionStatusPricingTrackerHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.PcngId)
                    .HasMaxLength(500)
                    .HasColumnName("PCNG_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstpcngId).HasColumnName("WFSTPCNG_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblOswfactionStatusScoringTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusScoringTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.ScId)
                    .HasMaxLength(40)
                    .HasColumnName("SC_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstscId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTSC_ID");

                entity.Property(e => e.XmlScoring)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Scoring");
            });

            modelBuilder.Entity<TblOswfactionStatusScoringTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusScoringTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.ScId)
                    .HasMaxLength(40)
                    .HasColumnName("SC_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstscId).HasColumnName("WFSTSC_ID");

                entity.Property(e => e.XmlScoring)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Scoring");
            });

            modelBuilder.Entity<TblOswfactionStatusSecuritiesTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusSecuritiesTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SecId)
                    .HasMaxLength(50)
                    .HasColumnName("Sec_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstsecId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTSEC_ID");

                entity.Property(e => e.XmlSecurities)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Securities");
            });

            modelBuilder.Entity<TblOswfactionStatusSecuritiesTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusSecuritiesTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.SecId)
                    .HasMaxLength(50)
                    .HasColumnName("Sec_ID");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Status2).HasMaxLength(50);

                entity.Property(e => e.Status3).HasMaxLength(50);

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfsthscId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTHSC_ID");

                entity.Property(e => e.WfstsecId).HasColumnName("WFSTSEC_ID");

                entity.Property(e => e.XmlSecurities)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Securities");
            });

            modelBuilder.Entity<TblOswfactionStatusrarocCalculatorTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusrarocCalculatorTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RarocCalcId)
                    .HasMaxLength(40)
                    .HasColumnName("RarocCalcID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstrcalcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTRCALC_ID");

                entity.Property(e => e.XmlRarocCalculator)
                    .HasColumnType("xml")
                    .HasColumnName("XML_RarocCalculator");
            });

            modelBuilder.Entity<TblOswfactionStatusrarocCalculatorTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOSWFActionStatusrarocCalculatorTracker_History");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MId)
                    .HasMaxLength(10)
                    .HasColumnName("M_ID")
                    .IsFixedLength();

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RarocCalcId)
                    .HasMaxLength(40)
                    .HasColumnName("RarocCalcID");

                entity.Property(e => e.Uname).HasMaxLength(600);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");

                entity.Property(e => e.WfstrcalcId).HasColumnName("WFSTRCALC_ID");

                entity.Property(e => e.XmlRarocCalculator)
                    .HasColumnType("xml")
                    .HasColumnName("XML_RarocCalculator");
            });

            modelBuilder.Entity<TblOtenor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOTenors");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TenorDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenorUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TID");
            });

            modelBuilder.Entity<TblOtenorComputation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblOTenorComputation");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TenorDesc)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TenorUnit)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TID");
            });

            modelBuilder.Entity<TblPfpicker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPFPicker");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Processing_Fee");

                entity.Property(e => e.ProposalTypeClass).HasColumnName("Proposal_Type_Class");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblPfpicker1006>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPFPicker_1006");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Processing_Fee");

                entity.Property(e => e.ProposalTypeClass).HasColumnName("Proposal_Type_Class");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblPfpickerApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPFPickerApproval");

                entity.Property(e => e.ApprovingAuthority).HasColumnName("Approving_Authority");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Processing_Fee");

                entity.Property(e => e.ProposalTypeClass).HasColumnName("Proposal_Type_Class");

                entity.Property(e => e.RangeFrom)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_From");

                entity.Property(e => e.RangeTo)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_To");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblPfpickerApproval1006>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPFPickerApproval_1006");

                entity.Property(e => e.ApprovingAuthority).HasColumnName("Approving_Authority");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProcessingFee)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Processing_Fee");

                entity.Property(e => e.ProposalTypeClass).HasColumnName("Proposal_Type_Class");

                entity.Property(e => e.RangeFrom)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_From");

                entity.Property(e => e.RangeTo)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_To");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblPincodeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPINCodeMaster");

                entity.Property(e => e.Area)
                    .HasMaxLength(500)
                    .HasColumnName("AREA");

                entity.Property(e => e.AreaStatus)
                    .HasMaxLength(500)
                    .HasColumnName("AREA STATUS");

                entity.Property(e => e.CircleName)
                    .HasMaxLength(500)
                    .HasColumnName("CIRCLE NAME");

                entity.Property(e => e.CityCode)
                    .HasMaxLength(500)
                    .HasColumnName("CITY_CODE");

                entity.Property(e => e.CityId)
                    .HasMaxLength(500)
                    .HasColumnName("CITY ID ");

                entity.Property(e => e.CityName)
                    .HasMaxLength(500)
                    .HasColumnName("CITY_ NAME");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(500)
                    .HasColumnName("COUNTRY_ID ");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(500)
                    .HasColumnName("COUNTRY_NAME");

                entity.Property(e => e.Countryisdcode)
                    .HasMaxLength(500)
                    .HasColumnName("COUNTRYISDCODE");

                entity.Property(e => e.Countryisocode)
                    .HasMaxLength(500)
                    .HasColumnName("COUNTRYISOCODE");

                entity.Property(e => e.CpCtId).HasColumnName("CP_CT_ID");

                entity.Property(e => e.CpStId).HasColumnName("CP_ST_ID");

                entity.Property(e => e.District)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("DISTRICT");

                entity.Property(e => e.Divisionname)
                    .HasMaxLength(500)
                    .HasColumnName("DIVISIONNAME");

                entity.Property(e => e.FiEmpCode)
                    .HasMaxLength(500)
                    .HasColumnName("FI EMP code");

                entity.Property(e => e.FiEmpName)
                    .HasMaxLength(500)
                    .HasColumnName("FI EMP Name");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.LocationType)
                    .HasMaxLength(500)
                    .HasColumnName("LOCATION TYPE");

                entity.Property(e => e.Regionname)
                    .HasMaxLength(500)
                    .HasColumnName("REGIONNAME");

                entity.Property(e => e.StateCode)
                    .HasMaxLength(500)
                    .HasColumnName("STATE CODE");

                entity.Property(e => e.StateId)
                    .HasMaxLength(500)
                    .HasColumnName("STATE ID");

                entity.Property(e => e.StateName)
                    .HasMaxLength(500)
                    .HasColumnName("STATE_NAME");

                entity.Property(e => e.Taluka)
                    .HasMaxLength(500)
                    .HasColumnName("TALUKA");

                entity.Property(e => e.WorkingArea)
                    .HasMaxLength(500)
                    .HasColumnName("WORKING AREA");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(500)
                    .HasColumnName("ZIP_CODE");
            });

            modelBuilder.Entity<TblPortfolio>(entity =>
            {
                entity.HasKey(e => e.PrctId);

                entity.ToTable("tblPortfolios");

                entity.Property(e => e.PrctId).HasColumnName("PRCT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PortfolioDescription).HasMaxLength(500);

                entity.Property(e => e.PortfolioName).HasMaxLength(100);

                entity.Property(e => e.PrtId).HasColumnName("PRT_ID");
            });

            modelBuilder.Entity<TblPortfolioDefinition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioDefinition");

                entity.Property(e => e.ConstantId).HasColumnName("ConstantID");

                entity.Property(e => e.HierarchyFlag)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("HIERARCHY_FLAG");

                entity.Property(e => e.HierarchyKeyColumn)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("HIERARCHY_KEY_COLUMN");

                entity.Property(e => e.HierarchyTable)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("HIERARCHY_TABLE");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.PParameter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P_PARAMETER");

                entity.Property(e => e.PPid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("P_PID");

                entity.Property(e => e.PType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P_TYPE");

                entity.Property(e => e.StaticTable)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STATIC_TABLE");

                entity.Property(e => e.StaticTableColumnId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STATIC_TABLE_COLUMN_ID");

                entity.Property(e => e.StaticTableColumnName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("STATIC_TABLE_COLUMN_NAME");
            });

            modelBuilder.Entity<TblPortfolioExposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioExposures");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CCY");

                entity.Property(e => e.ContractedExposure).HasColumnType("numeric(21, 5)");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Outstanding).HasColumnType("numeric(21, 5)");

                entity.Property(e => e.PName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("P_NAME");

                entity.Property(e => e.PPtypid).HasColumnName("P_PTYPID");
            });

            modelBuilder.Entity<TblPortfolioLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioLimits");

                entity.Property(e => e.LimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_CCY")
                    .IsFixedLength();

                entity.Property(e => e.LimitValue)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("LIMIT_VALUE");

                entity.Property(e => e.PParameter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P_PARAMETER");

                entity.Property(e => e.PPid).HasColumnName("P_PID");

                entity.Property(e => e.PPl)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("P_PL");

                entity.Property(e => e.PercentageValue).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<TblPortfolioLimitsConstant>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioLimitsConstants");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCY")
                    .IsFixedLength();

                entity.Property(e => e.ConstantId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConstantID");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblPortfolioLimitsConsumed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioLimitsConsumed");

                entity.Property(e => e.Approved).HasColumnType("numeric(23, 4)");

                entity.Property(e => e.Ccy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CCY")
                    .IsFixedLength();

                entity.Property(e => e.Ipa)
                    .HasColumnType("numeric(23, 4)")
                    .HasColumnName("IPA");

                entity.Property(e => e.LimitAmount).HasColumnType("numeric(21, 4)");

                entity.Property(e => e.PName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P_NAME");

                entity.Property(e => e.PPtypid).HasColumnName("P_PTYPID");

                entity.Property(e => e.Proposed).HasColumnType("numeric(23, 4)");
            });

            modelBuilder.Entity<TblPortfolioMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPortfolioMaster");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PortfolioDescription).HasMaxLength(500);

                entity.Property(e => e.PortfolioName).HasMaxLength(200);

                entity.Property(e => e.PrtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRT_ID");
            });

            modelBuilder.Entity<TblPreference>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPreferences");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TransferTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblPricingAndProfitabilitySpecialTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPricingAndProfitabilitySpecialTariff");

                entity.Property(e => e.PripefstCode)
                    .HasMaxLength(50)
                    .HasColumnName("PRIPEFST_Code");

                entity.Property(e => e.PripefstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRIPEFST_ID");

                entity.Property(e => e.PripefstType)
                    .HasMaxLength(200)
                    .HasColumnName("PRIPEFST_Type");
            });

            modelBuilder.Entity<TblPrivateRoom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPrivateRooms");

                entity.Property(e => e.AppId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RoomName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Room_Name");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblPrivateRoomComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPrivateRoomComments");

                entity.Property(e => e.AppId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RoomName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Room_Name");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblPrivateRoomCommentsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPrivateRoomComments_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Prchid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRCHID");

                entity.Property(e => e.RoomName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Room_Name");

                entity.Property(e => e.XmlComments)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Comments");
            });

            modelBuilder.Entity<TblPrivateRoomsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPrivateRooms_History");

                entity.Property(e => e.AppId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("APP_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Description)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Prhid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRHID");

                entity.Property(e => e.RoomName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Room_Name");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblProductAndPurpose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblProductAndPurpose");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PP_ID");

                entity.Property(e => e.PpText)
                    .HasMaxLength(200)
                    .HasColumnName("PP_Text");
            });

            modelBuilder.Entity<TblProductAndPurpose0501bkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblProductAndPurpose_0501bkp");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PP_ID");

                entity.Property(e => e.PpText)
                    .HasMaxLength(200)
                    .HasColumnName("PP_Text");
            });

            modelBuilder.Entity<TblProgramAssesmentParamMaster>(entity =>
            {
                entity.HasKey(e => e.Paid);

                entity.ToTable("tblProgramAssesmentParamMaster");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.AssesmentName).HasMaxLength(200);

                entity.Property(e => e.AssesmentXml)
                    .HasColumnType("xml")
                    .HasColumnName("AssesmentXML");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FactypId).HasColumnName("FACTYP_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PatypId).HasColumnName("PATYP_ID");
            });

            modelBuilder.Entity<TblProjectApplicationDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblProjectApplicationDetails");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblProjectChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblProjectChange");

                entity.Property(e => e.PcId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PC_ID");

                entity.Property(e => e.PcValue)
                    .HasMaxLength(20)
                    .HasColumnName("PC_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblPslmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPSLMaster");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IndustryId).HasColumnName("IndustryID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Pslcategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLCategory");

                entity.Property(e => e.Pslcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLCode");

                entity.Property(e => e.Psldescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PSLDescription");
            });

            modelBuilder.Entity<TblPuqueryLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblPUQueryLog");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Query).HasColumnType("ntext");

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TblQmaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblQMasters");

                entity.Property(e => e.ActionTime).HasColumnType("datetime");

                entity.Property(e => e.ErrorMsg)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OperationTime).HasColumnType("datetime");

                entity.Property(e => e.OperationType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OperationUser)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qid)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("QID");

                entity.Property(e => e.Status1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");
            });

            modelBuilder.Entity<TblQualifyingCondition>(entity =>
            {
                entity.HasKey(e => e.QcndId);

                entity.ToTable("tblQualifyingConditions");

                entity.Property(e => e.QcndId).HasColumnName("QCND_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.QcndBaseUnit)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QCnd_BaseUnit");

                entity.Property(e => e.QcndBaseValue)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("QCnd_BaseValue");

                entity.Property(e => e.QcndDisplayName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("QCnd_DisplayName");

                entity.Property(e => e.QcndIsBaseValueNumeric).HasColumnName("QCnd_IsBaseValueNumeric");

                entity.Property(e => e.QcndOperator)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QCnd_Operator");

                entity.Property(e => e.QcndSysName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("QCnd_SysName");

                entity.Property(e => e.SourceTable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTableColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRarocBaselCollateralType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRaroc_BaselCollateralType");

                entity.Property(e => e.BaselCollateralHaircut).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.BaselCollateralId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BaselCollateralID");

                entity.Property(e => e.BaselCollateralName).HasMaxLength(100);
            });

            modelBuilder.Entity<TblRarocBaselCtptButype>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRaroc_BaselCtptBUType");

                entity.Property(e => e.BaselCtptButypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BaselCtptBUTypeID");

                entity.Property(e => e.Butype)
                    .HasMaxLength(100)
                    .HasColumnName("BUType");

                entity.Property(e => e.CtptBuopCostToLimitRatio)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("CtptBUOpCostToLimitRatio");
            });

            modelBuilder.Entity<TblRarocBaselEntityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRaroc_BaselEntityType");

                entity.Property(e => e.BaselEntityTypeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BaselEntityTypeID");

                entity.Property(e => e.EntityType).HasMaxLength(100);

                entity.Property(e => e.RiskWeight).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<TblRarocBaselFacilityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRaroc_BaselFacilityType");

                entity.Property(e => e.BaselFacilityCcf)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("BaselFacilityCCF");

                entity.Property(e => e.BaselFacilityId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BaselFacilityID");

                entity.Property(e => e.BaselFacilityName).HasMaxLength(100);

                entity.Property(e => e.ManualCcf).HasColumnName("ManualCCF");
            });

            modelBuilder.Entity<TblRarocRatingPdlgd>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRaroc_RatingPDLGD");

                entity.Property(e => e.BaselRatingId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BaselRatingID");

                entity.Property(e => e.Lgd)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("LGD");

                entity.Property(e => e.Pd)
                    .HasColumnType("decimal(18, 8)")
                    .HasColumnName("PD");

                entity.Property(e => e.Rating).HasMaxLength(100);
            });

            modelBuilder.Entity<TblRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRatings");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.InternalMapRating).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.Rating).HasMaxLength(50);

                entity.Property(e => e.RtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RT_ID");

                entity.Property(e => e.SortOrder).HasMaxLength(50);
            });

            modelBuilder.Entity<TblRatingAgency>(entity =>
            {
                entity.HasKey(e => e.RaId);

                entity.ToTable("tblRatingAgency");

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.AgencyName).HasMaxLength(100);

                entity.Property(e => e.AgencyScale).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblRbidefaulterChecklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRBIDefaulterChecklist");

                entity.Property(e => e.Address)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.NameOfDefaulters)
                    .IsUnicode(false)
                    .HasColumnName("NAME OF DEFAULTERS");

                entity.Property(e => e.NatureOfIrregularities)
                    .IsUnicode(false)
                    .HasColumnName("NATURE OF IRREGULARITIES");
            });

            modelBuilder.Entity<TblReferenceRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReferenceRates");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.ReferenceRate).HasMaxLength(50);

                entity.Property(e => e.RrtId).HasColumnName("RRT_ID");
            });

            modelBuilder.Entity<TblRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRegion");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.RegnId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Regn_ID");
            });

            modelBuilder.Entity<TblRegisteredAuthMaster>(entity =>
            {
                entity.HasKey(e => e.RamId)
                    .HasName("PK__tblRegis__4C870AB6215BCE66");

                entity.ToTable("tblRegisteredAuthMaster");

                entity.Property(e => e.RamId).HasColumnName("RAM_ID");

                entity.Property(e => e.RaCode)
                    .HasMaxLength(100)
                    .HasColumnName("RA_CODE");

                entity.Property(e => e.RaId)
                    .HasMaxLength(100)
                    .HasColumnName("RA_ID");

                entity.Property(e => e.RaName)
                    .HasMaxLength(100)
                    .HasColumnName("RA_NAME");
            });

            modelBuilder.Entity<TblRelationshipDetail>(entity =>
            {
                entity.HasKey(e => new { e.Rtid, e.FromId, e.ToId });

                entity.ToTable("tblRelationshipDetails");

                entity.Property(e => e.Rtid).HasColumnName("RTID");

                entity.Property(e => e.FromId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FromID");

                entity.Property(e => e.ToId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ToID");

                entity.Property(e => e.Rdid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RDID");
            });

            modelBuilder.Entity<TblRelationshipType>(entity =>
            {
                entity.HasKey(e => e.RelationshipType)
                    .HasName("PK_tblRelationshipTypes_RelationshipType");

                entity.ToTable("tblRelationshipTypes");

                entity.Property(e => e.RelationshipType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromTable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromTableColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FromTableDisplayColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.OtherSideRtid).HasColumnName("OtherSideRTID");

                entity.Property(e => e.RelationshipTypeDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Rtid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RTID");

                entity.Property(e => e.ToTable)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToTableColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ToTableDisplayColumn)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblReleaseDateTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReleaseDateTime");

                entity.Property(e => e.ReleaseDateTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblRemsbankWiseExposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblREMSBankWiseExposure");

                entity.Property(e => e.BankSwiftCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExposureDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ToAllocated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToAvailable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToUtilized)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRemscountryWiseExposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblREMSCountryWiseExposure");

                entity.Property(e => e.CountrySwiftCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExposureDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ToAllocated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToAvailable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToUtilized)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReports");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DataSetTable)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Description).HasMaxLength(400);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NavigateUrl).HasMaxLength(500);

                entity.Property(e => e.ReId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RE_ID");

                entity.Property(e => e.ReportAdapter)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ReportModel).HasColumnType("xml");

                entity.Property(e => e.ReportName).HasMaxLength(100);

                entity.Property(e => e.ReportUploadPath).HasMaxLength(500);
            });

            modelBuilder.Entity<TblReportAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReportAccess");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RA_ID");

                entity.Property(e => e.ReId).HasColumnName("RE_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblReportConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReportConfig");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RptName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RPT_NAME");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE");

                entity.Property(e => e.ValueType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUE_TYPE");
            });

            modelBuilder.Entity<TblReportFilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReportFilters");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FilterColumn)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FilterType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ReId).HasColumnName("RE_ID");

                entity.Property(e => e.RptfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RPTF_ID");
            });

            modelBuilder.Entity<TblReviewMechanismReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReviewMechanismReport");

                entity.Property(e => e.AppId)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApplicationLevelExposure)
                    .IsUnicode(false)
                    .HasColumnName("Application-level exposure");

                entity.Property(e => e.ApproverLevelCmCcmRcmNcm)
                    .IsUnicode(false)
                    .HasColumnName("Approver Level (CM/CCM/RCM/NCM)");

                entity.Property(e => e.ApproverName)
                    .IsUnicode(false)
                    .HasColumnName("Approver Name");

                entity.Property(e => e.Atnw)
                    .IsUnicode(false)
                    .HasColumnName("ATNW");

                entity.Property(e => e.AuOfficialsVisiting)
                    .IsUnicode(false)
                    .HasColumnName("AU Officials Visiting");

                entity.Property(e => e.BankingArrangement)
                    .IsUnicode(false)
                    .HasColumnName("Banking Arrangement");

                entity.Property(e => e.BorrowerName)
                    .IsUnicode(false)
                    .HasColumnName("Borrower Name");

                entity.Property(e => e.CreditConcerns)
                    .IsUnicode(false)
                    .HasColumnName("Credit Concerns");

                entity.Property(e => e.CtptNo)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_No");

                entity.Property(e => e.DeviationsBooked)
                    .IsUnicode(false)
                    .HasColumnName("Deviations Booked");

                entity.Property(e => e.Ebitda)
                    .IsUnicode(false)
                    .HasColumnName("EBITDA");

                entity.Property(e => e.FinancialYear)
                    .IsUnicode(false)
                    .HasColumnName("Financial Year");

                entity.Property(e => e.GroupExposureDetailInLacs)
                    .IsUnicode(false)
                    .HasColumnName("Group Exposure Detail (in Lacs)");

                entity.Property(e => e.IncorporationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Incorporation Date");

                entity.Property(e => e.Industry).IsUnicode(false);

                entity.Property(e => e.InternalScoring)
                    .IsUnicode(false)
                    .HasColumnName("Internal Scoring");

                entity.Property(e => e.Ltv)
                    .IsUnicode(false)
                    .HasColumnName("LTV%");

                entity.Property(e => e.NatureOfBusiness)
                    .IsUnicode(false)
                    .HasColumnName("Nature of Business");

                entity.Property(e => e.ProgramName)
                    .IsUnicode(false)
                    .HasColumnName("Program Name");

                entity.Property(e => e.ProposalType)
                    .IsUnicode(false)
                    .HasColumnName("Proposal Type");

                entity.Property(e => e.Sales).IsUnicode(false);

                entity.Property(e => e.StrengthOfProposal)
                    .IsUnicode(false)
                    .HasColumnName("Strength of Proposal");

                entity.Property(e => e.TolAtnw)
                    .IsUnicode(false)
                    .HasColumnName("TOL/ATNW");

                entity.Property(e => e.TotalDebt)
                    .IsUnicode(false)
                    .HasColumnName("Total Debt");

                entity.Property(e => e.TotalFundBasedExposure)
                    .IsUnicode(false)
                    .HasColumnName("Total Fund Based Exposure");

                entity.Property(e => e.TotalNonFundBasedExposure)
                    .IsUnicode(false)
                    .HasColumnName("Total Non-Fund Based Exposure");

                entity.Property(e => e.TypeOfPd)
                    .IsUnicode(false)
                    .HasColumnName("Type of PD");

                entity.Property(e => e.TypeOfSecurity)
                    .IsUnicode(false)
                    .HasColumnName("Type of Security");

                entity.Property(e => e.VerticalBbgAgri)
                    .IsUnicode(false)
                    .HasColumnName("Vertical (BBG/Agri)");
            });

            modelBuilder.Entity<TblReviewerEditableField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblReviewerEditableFields");

                entity.Property(e => e.ChildFieldName).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentFieldName).HasMaxLength(50);

                entity.Property(e => e.Rvef)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RVEF");
            });

            modelBuilder.Entity<TblRiskBusinessRoleMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskBusinessRoleMapping");

                entity.Property(e => e.BusinessRoleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RbId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RB_ID");

                entity.Property(e => e.RiskRoleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRiskHighlightedStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskHighlightedStatuses");

                entity.Property(e => e.AccountNo)
                    .IsUnicode(false)
                    .HasColumnName("Account No");

                entity.Property(e => e.BgDetails)
                    .IsUnicode(false)
                    .HasColumnName("BG Details");

                entity.Property(e => e.BusinessProfile)
                    .IsUnicode(false)
                    .HasColumnName("Business Profile");

                entity.Property(e => e.ChurningRemarks)
                    .IsUnicode(false)
                    .HasColumnName("Churning remarks");

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.CurrentOverdueStatus)
                    .IsUnicode(false)
                    .HasColumnName("Current Overdue status");

                entity.Property(e => e.CustomerId)
                    .IsUnicode(false)
                    .HasColumnName("Customer ID");

                entity.Property(e => e.CustomerName)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DpdAsOnDate)
                    .IsUnicode(false)
                    .HasColumnName("DPD as on date");

                entity.Property(e => e.Facility).IsUnicode(false);

                entity.Property(e => e.LoanAmtInRsCr)
                    .IsUnicode(false)
                    .HasColumnName("Loan amt in Rs Cr");

                entity.Property(e => e.MonthOfClassification)
                    .IsUnicode(false)
                    .HasColumnName("Month of classification");

                entity.Property(e => e.OsucInCr)
                    .IsUnicode(false)
                    .HasColumnName("OSUC (IN CR)");

                entity.Property(e => e.OverdueTrend)
                    .IsUnicode(false)
                    .HasColumnName("Overdue trend");

                entity.Property(e => e.PosCr)
                    .IsUnicode(false)
                    .HasColumnName("POS (CR)");

                entity.Property(e => e.Region).IsUnicode(false);

                entity.Property(e => e.Remarks1)
                    .IsUnicode(false)
                    .HasColumnName("Remarks 1");

                entity.Property(e => e.Remarks2)
                    .IsUnicode(false)
                    .HasColumnName("Remarks 2");

                entity.Property(e => e.Remarks3)
                    .IsUnicode(false)
                    .HasColumnName("Remarks 3");

                entity.Property(e => e.RiskClassification)
                    .IsUnicode(false)
                    .HasColumnName("Risk Classification");

                entity.Property(e => e.RootCause)
                    .IsUnicode(false)
                    .HasColumnName("Root Cause");

                entity.Property(e => e.SNo)
                    .IsUnicode(false)
                    .HasColumnName("S.No");

                entity.Property(e => e.SecurityDetails)
                    .IsUnicode(false)
                    .HasColumnName("Security Details");

                entity.Property(e => e.SecurityValueCr)
                    .IsUnicode(false)
                    .HasColumnName("Security Value (Cr)");

                entity.Property(e => e.StatusOfChequeReturns)
                    .IsUnicode(false)
                    .HasColumnName("Status of Cheque returns");

                entity.Property(e => e.TlRepaymentsAsOn30420)
                    .IsUnicode(false)
                    .HasColumnName("TL Repayments as on 30/4/20");

                entity.Property(e => e.TypeOfFacility)
                    .IsUnicode(false)
                    .HasColumnName("Type of facility");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueue");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueueForAdhocrequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueueForADHOCRequests");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueueForAdhocrequestsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueueForADHOCRequests_History");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueueHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueue_History");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueueMixup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueueMixup");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RequestFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRiskNoteGenerationQueueMixupHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRiskNoteGenerationQueueMixup_History");

                entity.Property(e => e.AckM).HasColumnName("ACK_M");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Hid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("HID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RequestFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WfstappId).HasColumnName("WFSTAPP_ID");
            });

            modelBuilder.Entity<TblRoipicker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblROIPicker");

                entity.Property(e => e.BorrowerLocation).HasColumnName("Borrower_Location");

                entity.Property(e => e.BorrowerTypeFrom)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Borrower_Type_From");

                entity.Property(e => e.BorrowerTypeTo)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Borrower_Type_To");

                entity.Property(e => e.CatPropertyType).HasColumnName("CAT_Property_Type");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PslType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Type");

                entity.Property(e => e.RacRate)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("RAC_Rate");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRoipickerApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblROIPickerApproval");

                entity.Property(e => e.ApprovingAuthority).HasColumnName("Approving_Authority");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PslType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Type");

                entity.Property(e => e.RangeFrom)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_From");

                entity.Property(e => e.RangeTo)
                    .HasColumnType("decimal(22, 8)")
                    .HasColumnName("Range_To");

                entity.Property(e => e.Verticle)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRoles");

                entity.Property(e => e.AllowManualDoa).HasColumnName("AllowManualDOA");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("R_ID");

                entity.Property(e => e.RoleName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblRolePriorityOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRolePriorityOrder");

                entity.Property(e => e.Lvl)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LVL");

                entity.Property(e => e.PrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PR_ID");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblRrramisreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRRRAMISREPORT");

                entity.Property(e => e.AppId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("App_ID");

                entity.Property(e => e.AssociateExposure)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AssociatesName).IsUnicode(false);

                entity.Property(e => e.BorrowerName).IsUnicode(false);

                entity.Property(e => e.BsrindustryCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("BSRIndustryCode");

                entity.Property(e => e.BusinessUnit)
                    .IsUnicode(false)
                    .HasColumnName("Business_Unit");

                entity.Property(e => e.CapitalMarketExposure)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CifId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CommodityExposure).IsUnicode(false);

                entity.Property(e => e.ConstitutionOrganizationCode)
                    .IsUnicode(false)
                    .HasColumnName("Constitution_OrganizationCode");

                entity.Property(e => e.DirectorName).IsUnicode(false);

                entity.Property(e => e.EnterpriseSector)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ExistingBankingArrangement)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Existing_BankingArrangement");

                entity.Property(e => e.ExternalRatingAgencyLt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingAgencyLT");

                entity.Property(e => e.ExternalRatingAgencySt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingAgencyST");

                entity.Property(e => e.ExternalRatingDateLt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingDateLT");

                entity.Property(e => e.ExternalRatingDateSt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingDateST");

                entity.Property(e => e.ExternalRatingLt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingLT");

                entity.Property(e => e.ExternalRatingSt)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ExternalRatingST");

                entity.Property(e => e.FacId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.FacType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("FAC_Type");

                entity.Property(e => e.FacilitySubType)
                    .IsUnicode(false)
                    .HasColumnName("Facility_Sub_Type");

                entity.Property(e => e.FacilityunderGovernmentScheme).IsUnicode(false);

                entity.Property(e => e.GroupExposure)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName).IsUnicode(false);

                entity.Property(e => e.InterestofDirectorsSeniorofficers).IsUnicode(false);

                entity.Property(e => e.IsWeakerSection)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LineofActivity).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.MinorityCommunityType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Msmeapplicability)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MSMEApplicability");

                entity.Property(e => e.MsmebalSheetdate)
                    .HasColumnType("datetime")
                    .HasColumnName("MSMEBalSheetdate");

                entity.Property(e => e.Msmeclassification)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MSMEClassification");

                entity.Property(e => e.Msmeinvestment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MSMEInvestment");

                entity.Property(e => e.OwnBankOtherBank).IsUnicode(false);

                entity.Property(e => e.PanNo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PAN_NO");

                entity.Property(e => e.ProjectFinance).IsUnicode(false);

                entity.Property(e => e.ProposedBankingArrangement)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Proposed_BankingArrangement");

                entity.Property(e => e.ProposedRating)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Proposed_Rating");

                entity.Property(e => e.Pslsector)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLSector");

                entity.Property(e => e.Pslstatus)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLStatus");

                entity.Property(e => e.Psu)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSU");

                entity.Property(e => e.RealEstateCategory)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sanctiondate).HasColumnType("datetime");

                entity.Property(e => e.SanctioningCommitteeName).IsUnicode(false);

                entity.Property(e => e.TakeoverAmount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TakeoverBankName).IsUnicode(false);

                entity.Property(e => e.Takeovercase).IsUnicode(false);

                entity.Property(e => e.TeritaryIndustry).IsUnicode(false);

                entity.Property(e => e.TermLoanRelationship)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeofNbfc)
                    .IsUnicode(false)
                    .HasColumnName("TypeofNBFC");

                entity.Property(e => e.WeakerSection)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WorkingCapitalBank)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ZONE");
            });

            modelBuilder.Entity<TblRuleSetAccess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRuleSetAccess");

                entity.Property(e => e.Apikey)
                    .IsUnicode(false)
                    .HasColumnName("APIKey");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MachineName).IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RsaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RSA_ID");

                entity.Property(e => e.UserId)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblRuleSetAccessLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblRuleSetAccessLogs");

                entity.Property(e => e.AccessTime).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MachineName).IsUnicode(false);

                entity.Property(e => e.Operation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RulesetName).IsUnicode(false);

                entity.Property(e => e.UserId)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblSalesReject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblSalesReject");

                entity.Property(e => e.AmountOfTheFacilityProposedInLakh)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Amount of the Facility Proposed in Lakh");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Business Segment");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfRejection)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Date of Rejection");

                entity.Property(e => e.Id)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Item Type");

                entity.Property(e => e.KeyPromoterDirectorName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Key Promoter / Director Name");

                entity.Property(e => e.NameOfApplicant)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Name Of Applicant");

                entity.Property(e => e.NameOfRhRsm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Name of RH/RSM");

                entity.Property(e => e.NameOfTheRm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Name of the RM");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Nature of Business");

                entity.Property(e => e.PanCinNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAN / CIN No");

                entity.Property(e => e.Path)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonsForReject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Reasons for Reject");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Zone)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblSanctionAuthority>(entity =>
            {
                entity.ToTable("tblSanctionAuthority");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.SanctionAuthority).HasMaxLength(100);
            });

            modelBuilder.Entity<TblSblgbllimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblSBLGBLLimits");

                entity.Property(e => e.CustomerFieldType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerFieldValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Limit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SorG)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblScheduledEventsConfig>(entity =>
            {
                entity.HasKey(e => e.SecId);

                entity.ToTable("tblScheduledEventsConfig");

                entity.Property(e => e.SecId).HasColumnName("SEC_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ItemSubType).HasColumnName("Item_SubType");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SchItem)
                    .HasMaxLength(1000)
                    .HasColumnName("SCH_Item");
            });

            modelBuilder.Entity<TblScheduledEventsConfigHistory>(entity =>
            {
                entity.ToTable("tblScheduledEventsConfigHistory");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ItemSubType).HasColumnName("Item_SubType");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SchItem)
                    .HasMaxLength(1000)
                    .HasColumnName("SCH_Item");

                entity.Property(e => e.SecId).HasColumnName("SEC_ID");
            });

            modelBuilder.Entity<TblScheduledItem>(entity =>
            {
                entity.HasKey(e => e.SchId);

                entity.ToTable("tblScheduledItems");

                entity.Property(e => e.SchId).HasColumnName("SCH_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ColId)
                    .HasMaxLength(50)
                    .HasColumnName("COL_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ItemSubType).HasColumnName("Item_SubType");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblScheduledItemsHistory>(entity =>
            {
                entity.ToTable("tblScheduledItems_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ItemSubType).HasColumnName("Item_SubType");

                entity.Property(e => e.SchId).HasColumnName("SCH_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblScheduledItemsId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblScheduledItemsID");

                entity.Property(e => e.TrackId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TRACK_ID");

                entity.Property(e => e.TrackValue)
                    .HasMaxLength(20)
                    .HasColumnName("TRACK_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblScheduledItemsTracker>(entity =>
            {
                entity.HasKey(e => e.WfsttrackId);

                entity.ToTable("tblScheduledItemsTracker");

                entity.Property(e => e.WfsttrackId).HasColumnName("WFSTTRACK_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.TrackId)
                    .HasMaxLength(200)
                    .HasColumnName("TRACK_ID");

                entity.Property(e => e.TrkitemId).HasColumnName("TRKItem_ID");

                entity.Property(e => e.TrkitemSubTypeId).HasColumnName("TRKItemSubType_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblScheduledItemsTrackerHistory>(entity =>
            {
                entity.ToTable("tblScheduledItemsTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.TrackId)
                    .HasMaxLength(200)
                    .HasColumnName("TRACK_ID");

                entity.Property(e => e.TrkitemId).HasColumnName("TRKItem_ID");

                entity.Property(e => e.TrkitemSubTypeId).HasColumnName("TRKItemSubType_ID");

                entity.Property(e => e.Uname).HasMaxLength(100);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfsttrackId).HasColumnName("WFSTTRACK_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblScoringId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblScoringID");

                entity.Property(e => e.ScoId).HasColumnName("SCO_ID");

                entity.Property(e => e.ScoValue)
                    .HasMaxLength(20)
                    .HasColumnName("SCO_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblScoringModel>(entity =>
            {
                entity.HasKey(e => e.Smmid)
                    .HasName("PK_tblScoringModelMaster");

                entity.ToTable("tblScoringModels");

                entity.Property(e => e.Smmid).HasColumnName("SMMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblScoringModels02julbkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblScoringModels_02julbkp");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Smmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SMMID");
            });

            modelBuilder.Entity<TblScriptConfigObject>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblScriptConfigObject");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjScriptKey)
                    .HasMaxLength(100)
                    .HasColumnName("objScriptKey");

                entity.Property(e => e.ObjScriptPath)
                    .HasMaxLength(500)
                    .HasColumnName("objScriptPath");

                entity.Property(e => e.ObjTypeAssembly)
                    .HasMaxLength(100)
                    .HasColumnName("objTypeAssembly");

                entity.Property(e => e.ObjTypeFullPath)
                    .HasMaxLength(500)
                    .HasColumnName("objTypeFullPath");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(100)
                    .HasColumnName("objectName");
            });

            modelBuilder.Entity<TblServiceCallLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblServiceCallLog");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.RequestObject).IsUnicode(false);

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblServiceCallLog20200324>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblServiceCallLog20200324");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.RequestDateTime).HasColumnType("datetime");

                entity.Property(e => e.RequestObject).IsUnicode(false);

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(300)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblSmslogger>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblSMSLogger");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.EventAndPurpose).IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MessageBody).IsUnicode(false);

                entity.Property(e => e.MessageType).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.To)
                    .IsUnicode(false)
                    .HasColumnName("TO");
            });

            modelBuilder.Entity<TblStandardCondition>(entity =>
            {
                entity.HasKey(e => e.ConditionId)
                    .HasName("PK__tblStand__37F5C0EF4315B4AB");

                entity.ToTable("tblStandardConditions");

                entity.Property(e => e.ConditionId).HasColumnName("ConditionID");

                entity.Property(e => e.ConditionText).IsUnicode(false);

                entity.Property(e => e.Header)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblStandardConditions20200118>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStandardConditions20200118");

                entity.Property(e => e.ConditionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConditionID");

                entity.Property(e => e.ConditionText).IsUnicode(false);

                entity.Property(e => e.Header)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblStandardConditions3004bkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStandardConditions_3004bkp");

                entity.Property(e => e.ConditionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConditionID");

                entity.Property(e => e.ConditionText).IsUnicode(false);

                entity.Property(e => e.Header)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblStandardConditionsBkp2312>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStandardConditions_bkp2312");

                entity.Property(e => e.ConditionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConditionID");

                entity.Property(e => e.ConditionText).IsUnicode(false);

                entity.Property(e => e.Header)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblState>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblState");

                entity.Property(e => e.Code)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtId).HasColumnName("CT_ID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.StId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ST_ID");

                entity.Property(e => e.StateName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblStateManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStateManagement");

                entity.Property(e => e.AppId)
                    .HasMaxLength(100)
                    .HasColumnName("AppID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStatements");

                entity.Property(e => e.ClientStmtId).HasColumnName("Client_STMT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StmtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblStatementsUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStatements_upload");

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .HasColumnName("AnnualYTD");

                entity.Property(e => e.Audited).HasMaxLength(5);

                entity.Property(e => e.CertifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientStmtId).HasColumnName("Client_STMT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.IsQualified).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PastOrProjection).HasMaxLength(5);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StmtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblStatementsUploadHist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblStatements_upload_hist");

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .HasColumnName("AnnualYTD");

                entity.Property(e => e.Audited).HasMaxLength(5);

                entity.Property(e => e.ClientStmtId).HasColumnName("Client_STMT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.IsQualified).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PastOrProjection).HasMaxLength(5);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblSubTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblSubTemplate");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SubTemplate).HasMaxLength(500);

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMP_SUB_ID");
            });

            modelBuilder.Entity<TblTableObjectXmlschema>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTableObjectXMLSchema");

                entity.Property(e => e.CreatedBy).HasMaxLength(200);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(200);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectName).HasMaxLength(200);

                entity.Property(e => e.ObjectXml)
                    .HasColumnType("xml")
                    .HasColumnName("ObjectXML");

                entity.Property(e => e.ObjectXmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("ObjectXML_IN");

                entity.Property(e => e.Ocxid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OCXID");

                entity.Property(e => e.XmlFilePath).HasMaxLength(1000);
            });

            modelBuilder.Entity<TblTableObjectXmlschemaDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTableObjectXMLSchema_Detail");

                entity.Property(e => e.AttributeType).HasMaxLength(50);

                entity.Property(e => e.CmsObject).HasMaxLength(200);

                entity.Property(e => e.FieldName).HasMaxLength(200);

                entity.Property(e => e.ObjectType).HasMaxLength(200);

                entity.Property(e => e.Ocxd)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OCXD");

                entity.Property(e => e.Ocxid).HasColumnName("OCXID");

                entity.Property(e => e.Xmllabel)
                    .HasMaxLength(200)
                    .HasColumnName("XMLLabel");
            });

            modelBuilder.Entity<TblTaskTransferred>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTaskTransferred");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.TftId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TFT_ID");
            });

            modelBuilder.Entity<TblTempLead>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTempLeads");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LeadDetails)
                    .HasColumnType("text")
                    .HasColumnName("Lead_Details");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TlId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TL_ID");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Unique_ID");
            });

            modelBuilder.Entity<TblTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTemplates");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TemplateName).HasMaxLength(100);

                entity.Property(e => e.TemplateTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblTemplateParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTemplateParameter");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IsAbsolute).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParameterDataTableColumn).HasMaxLength(200);

                entity.Property(e => e.ParamterName).HasMaxLength(400);

                entity.Property(e => e.PrmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("PRM_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId).HasColumnName("TMP_SUB_ID");

                entity.Property(e => e.ValueType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTemplateServiceMonitor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTemplateServiceMonitor");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ServiceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ServiceID");

                entity.Property(e => e.ServiceName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<TblTenorAssetMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTenorAssetMap");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.Tid).HasColumnName("TID");

                entity.Property(e => e.Tmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMID");
            });

            modelBuilder.Entity<TblTenorComputationAssetMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTenorComputationAssetMap");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.Tid).HasColumnName("TID");

                entity.Property(e => e.Tmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMID");
            });

            modelBuilder.Entity<TblTenorDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTenorDates");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tenor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TenorDate).HasColumnType("datetime");

                entity.Property(e => e.Tid).HasColumnName("TID");
            });

            modelBuilder.Entity<TblThirdPartyEntity>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblThirdPartyEntities");

                entity.Property(e => e.LineOfBusinessInWhichTheBankHadUsedTheTpe)
                    .IsUnicode(false)
                    .HasColumnName("Line of Business in which the Bank had used the TPE");

                entity.Property(e => e.MainLineOfBusiness)
                    .IsUnicode(false)
                    .HasColumnName("Main line of Business");

                entity.Property(e => e.NameOfTheProprietorPartnersDirectors)
                    .IsUnicode(false)
                    .HasColumnName("Name of the Proprietor/Partners/Directors");

                entity.Property(e => e.NameOfThirdPartyEntity)
                    .IsUnicode(false)
                    .HasColumnName("Name of Third Party Entity");

                entity.Property(e => e.ReasonForPuttingTheNameInTheCautionaryList)
                    .IsUnicode(false)
                    .HasColumnName("Reason for putting the name in the cautionary list");

                entity.Property(e => e.RegisteredOfficeAddress)
                    .IsUnicode(false)
                    .HasColumnName("Registered Office Address");

                entity.Property(e => e.RegistrationNoPanOfTheProprietorPartnersDirectorsFirm)
                    .IsUnicode(false)
                    .HasColumnName("Registration No/PAN of the Proprietor/Partners/Directors/Firm");

                entity.Property(e => e.SrNo).IsUnicode(false);
            });

            modelBuilder.Entity<TblTmpStmtDataUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTmp_Stmt_Data_upload");

                entity.HasIndex(e => e.PrmId, "NCINDX_prm_id");

                entity.HasIndex(e => e.StmtId, "NCINDX_stmt_id");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TsdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TSD_ID");

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<TblTmpStmtDataUploadHist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTmp_Stmt_Data_upload_hist");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TsdId).HasColumnName("TSD_ID");

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<TblTmpStmtDataUploadSen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTmp_Stmt_Data_upload_Sen");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TsdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TSD_ID");

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<TblTmpStmtDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTmp_Stmt_Data");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.StmtId).HasColumnName("STMT_ID");

                entity.Property(e => e.TsdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TSD_ID");

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<TblTrackingItemStatus>(entity =>
            {
                entity.HasKey(e => e.StId);

                entity.ToTable("tblTrackingItemStatus");

                entity.Property(e => e.StId).HasColumnName("ST_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.StSysname)
                    .HasMaxLength(100)
                    .HasColumnName("ST_SYSName");

                entity.Property(e => e.StText)
                    .HasMaxLength(200)
                    .HasColumnName("ST_Text");

                entity.Property(e => e.StTextDesc)
                    .HasMaxLength(300)
                    .HasColumnName("ST_TextDesc");
            });

            modelBuilder.Entity<TblTrackingItemSubType>(entity =>
            {
                entity.HasKey(e => e.TraitmsId);

                entity.ToTable("tblTrackingItemSubType");

                entity.Property(e => e.TraitmsId).HasColumnName("TRAITMS_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TraitmsDesc)
                    .HasMaxLength(2000)
                    .HasColumnName("TRAITMS_Desc");

                entity.Property(e => e.TraitmsText)
                    .HasMaxLength(1000)
                    .HasColumnName("TRAITMS_Text");
            });

            modelBuilder.Entity<TblTrackingItemType>(entity =>
            {
                entity.HasKey(e => e.TraitmId);

                entity.ToTable("tblTrackingItemType");

                entity.Property(e => e.TraitmId).HasColumnName("TRAITM_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TraitmDesc)
                    .HasMaxLength(2000)
                    .HasColumnName("TRAITM_Desc");

                entity.Property(e => e.TraitmText)
                    .HasMaxLength(1000)
                    .HasColumnName("TRAITM_Text");
            });

            modelBuilder.Entity<TblTrackingItemTypeSubTypeMapper>(entity =>
            {
                entity.ToTable("tblTrackingItemTypeSubTypeMapper");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TraitmId).HasColumnName("TRAITM_ID");

                entity.Property(e => e.TraitmsId).HasColumnName("TRAITMS_ID");
            });

            modelBuilder.Entity<TblTrackingObjectsConfiguration>(entity =>
            {
                entity.HasKey(e => e.TioId);

                entity.ToTable("tblTrackingObjectsConfiguration");

                entity.Property(e => e.TioId).HasColumnName("TIO_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectClass)
                    .HasMaxLength(500)
                    .HasColumnName("Object_Class");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(500)
                    .HasColumnName("Object_Name");

                entity.Property(e => e.ObjectNamespace)
                    .HasMaxLength(500)
                    .HasColumnName("Object_Namespace");

                entity.Property(e => e.ObjectTableName)
                    .HasMaxLength(500)
                    .HasColumnName("Object_TableName");

                entity.Property(e => e.ObjectWfprefix)
                    .HasMaxLength(100)
                    .HasColumnName("Object_WFPrefix");

                entity.Property(e => e.ParentTioId).HasColumnName("ParentTIO_ID");
            });

            modelBuilder.Entity<TblTransactionsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTransactionsDetails");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.DepositAmount).HasColumnType("numeric(24, 8)");

                entity.Property(e => e.DepositAmountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("DepositAmountHomeCCY");

                entity.Property(e => e.ExposureEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExposureStartDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LimitRefCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Load_Date");

                entity.Property(e => e.Mtmamount)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("MTMAmount");

                entity.Property(e => e.MtmamountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("MTMAmountHomeCCY");

                entity.Property(e => e.Mtmccy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMCCY");

                entity.Property(e => e.MtmhomeCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMHomeCCY");

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(24, 8)");

                entity.Property(e => e.NotionalAmountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("NotionalAmountHomeCCY");

                entity.Property(e => e.NotionalCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCCY");

                entity.Property(e => e.NotionalHomeCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NotionalHomeCCY");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceSystem)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM");

                entity.Property(e => e.TransactionAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTransactionsDetailsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTransactionsDetails_History");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.DepositAmount).HasColumnType("numeric(24, 8)");

                entity.Property(e => e.DepositAmountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("DepositAmountHomeCCY");

                entity.Property(e => e.ExposureEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExposureStartDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LimitRefCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.Mtmamount)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("MTMAmount");

                entity.Property(e => e.MtmamountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("MTMAmountHomeCCY");

                entity.Property(e => e.Mtmccy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMCCY");

                entity.Property(e => e.MtmhomeCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMHomeCCY");

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NotionalAmountHomeCcy)
                    .HasColumnType("numeric(24, 8)")
                    .HasColumnName("NotionalAmountHomeCCY");

                entity.Property(e => e.NotionalCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCCY");

                entity.Property(e => e.NotionalHomeCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NotionalHomeCCY");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTreasuryLimitsCtpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryLimits_ctpt");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ApprovedLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ApprovedLimitCcy).HasColumnName("ApprovedLimitCCY");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Facid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FACID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacilityID");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RiskType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubtypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tid).HasColumnName("TID");

                entity.Property(e => e.TreasuryTenor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTreasuryTimeBucket>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTimeBuckets");

                entity.Property(e => e.Bid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BID");

                entity.Property(e => e.BucketName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTreasuryTimeBucketsProductMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTimeBuckets_Product_Mapping");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.Bpmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BPMID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LmDisplayOrder).HasColumnName("LM_DisplayOrder");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentAssetId).HasColumnName("Parent_AssetID");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RiskType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTreasuryTimeBucketsTenor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTimeBuckets_Tenor");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.Bpid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BPID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Tid).HasColumnName("TID");
            });

            modelBuilder.Entity<TblTreasuryTransactionsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTransactionsDetails");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AddonAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_AMOUNT");

                entity.Property(e => e.AddonFactor)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_FACTOR");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSET_CLASS");

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUY_CCY");

                entity.Property(e => e.Buyorsell)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUYORSELL");

                entity.Property(e => e.ClsParty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLS_PARTY");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACT_NO");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.CurrencyPair)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_PAIR");

                entity.Property(e => e.Customercif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCIF");

                entity.Property(e => e.ExposureType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPOSURE_TYPE");

                entity.Property(e => e.FarLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAR_LEG");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_CODE");

                entity.Property(e => e.IssuerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER_ID");

                entity.Property(e => e.LegalAgreement)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_AGREEMENT");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MaturityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MATURITY_DATE");

                entity.Property(e => e.MtmAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("MTM_AMOUNT");

                entity.Property(e => e.MtmAmountCcy)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MTM_AMOUNT_CCY");

                entity.Property(e => e.NearLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEAR_LEG");

                entity.Property(e => e.NotionalAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("NOTIONAL_AMOUNT");

                entity.Property(e => e.Pfe)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PFE");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORTFOLIO_NAME");

                entity.Property(e => e.Product)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT");

                entity.Property(e => e.ProductFamily)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FAMILY");

                entity.Property(e => e.ReferenceEntity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_ENTITY");

                entity.Property(e => e.SecurityDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_DESCRIPTION");

                entity.Property(e => e.SecurityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_NAME");

                entity.Property(e => e.SellCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SELL_CCY");

                entity.Property(e => e.SettlementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SETTLEMENT_DATE");

                entity.Property(e => e.SettlementMethod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_METHOD");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SWIFT_ID");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TENOR");

                entity.Property(e => e.TrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TR_ID");

                entity.Property(e => e.TradeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_DATE");

                entity.Property(e => e.TradeInsertionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_INSERTION_DATE");

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_NO");

                entity.Property(e => e.TraderId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TRADER_ID");

                entity.Property(e => e.TreasuryCustid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TREASURY_CUSTID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNDERLYING");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<TblTreasuryTransactionsDetailsBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTransactionsDetails_BKP");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AddonAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_AMOUNT");

                entity.Property(e => e.AddonFactor)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_FACTOR");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSET_CLASS");

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUY_CCY");

                entity.Property(e => e.Buyorsell)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUYORSELL");

                entity.Property(e => e.ClsParty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLS_PARTY");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACT_NO");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.CurrencyPair)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_PAIR");

                entity.Property(e => e.Customercif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCIF");

                entity.Property(e => e.ExposureType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPOSURE_TYPE");

                entity.Property(e => e.FarLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAR_LEG");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_CODE");

                entity.Property(e => e.IssuerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER_ID");

                entity.Property(e => e.LegalAgreement)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_AGREEMENT");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MaturityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MATURITY_DATE");

                entity.Property(e => e.MtmAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("MTM_AMOUNT");

                entity.Property(e => e.NearLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEAR_LEG");

                entity.Property(e => e.NotionalAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("NOTIONAL_AMOUNT");

                entity.Property(e => e.Pfe)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PFE");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORTFOLIO_NAME");

                entity.Property(e => e.Product)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT");

                entity.Property(e => e.ProductFamily)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FAMILY");

                entity.Property(e => e.ReferenceEntity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_ENTITY");

                entity.Property(e => e.SecurityDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_DESCRIPTION");

                entity.Property(e => e.SecurityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_NAME");

                entity.Property(e => e.SellCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SELL_CCY");

                entity.Property(e => e.SettlementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SETTLEMENT_DATE");

                entity.Property(e => e.SettlementMethod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_METHOD");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SWIFT_ID");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TENOR");

                entity.Property(e => e.TradeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_DATE");

                entity.Property(e => e.TradeInsertionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_INSERTION_DATE");

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_NO");

                entity.Property(e => e.TraderId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TRADER_ID");

                entity.Property(e => e.TreasuryCustid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TREASURY_CUSTID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNDERLYING");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<TblTreasuryTransactionsDetailsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasuryTransactionsDetails_History");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_NO");

                entity.Property(e => e.AddonAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_AMOUNT");

                entity.Property(e => e.AddonFactor)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("ADDON_FACTOR");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ASSET_CLASS");

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUY_CCY");

                entity.Property(e => e.Buyorsell)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("BUYORSELL");

                entity.Property(e => e.ClsParty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLS_PARTY");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CONTRACT_NO");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.CurrencyPair)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY_PAIR");

                entity.Property(e => e.Customercif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMERCIF");

                entity.Property(e => e.ExposureType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPOSURE_TYPE");

                entity.Property(e => e.FarLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FAR_LEG");

                entity.Property(e => e.IfscCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IFSC_CODE");

                entity.Property(e => e.IssuerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER_ID");

                entity.Property(e => e.LegalAgreement)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_AGREEMENT");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MaturityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MATURITY_DATE");

                entity.Property(e => e.MtmAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("MTM_AMOUNT");

                entity.Property(e => e.NearLeg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NEAR_LEG");

                entity.Property(e => e.NotionalAmount)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("NOTIONAL_AMOUNT");

                entity.Property(e => e.Pfe)
                    .HasColumnType("numeric(22, 4)")
                    .HasColumnName("PFE");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PORTFOLIO_NAME");

                entity.Property(e => e.Product)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT");

                entity.Property(e => e.ProductFamily)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_FAMILY");

                entity.Property(e => e.ReferenceEntity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCE_ENTITY");

                entity.Property(e => e.SecurityDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_DESCRIPTION");

                entity.Property(e => e.SecurityName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECURITY_NAME");

                entity.Property(e => e.SellCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SELL_CCY");

                entity.Property(e => e.SettlementDate)
                    .HasColumnType("datetime")
                    .HasColumnName("SETTLEMENT_DATE");

                entity.Property(e => e.SettlementMethod)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_METHOD");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("START_DATE");

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SWIFT_ID");

                entity.Property(e => e.Tenor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TENOR");

                entity.Property(e => e.TradeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_DATE");

                entity.Property(e => e.TradeInsertionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRADE_INSERTION_DATE");

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_NO");

                entity.Property(e => e.TraderId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TRADER_ID");

                entity.Property(e => e.TreasuryCustid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TREASURY_CUSTID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UNDERLYING");

                entity.Property(e => e.ValueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("VALUE_DATE");
            });

            modelBuilder.Entity<TblTreasurytblUtilizationsCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTreasurytblUtilizations_Customers");

                entity.Property(e => e.AddonAmountBaseCcy)
                    .HasColumnType("numeric(22, 8)")
                    .HasColumnName("ADDON_AMOUNT_BaseCCY");

                entity.Property(e => e.BaseCcy).HasColumnName("BaseCCY");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Cuid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CUID");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LimitId).HasColumnName("LIMIT_ID");

                entity.Property(e => e.MtmamountBaseCcy)
                    .HasColumnType("numeric(22, 8)")
                    .HasColumnName("MTMAmount_BaseCCY");

                entity.Property(e => e.NotionalAmountBaseCcy)
                    .HasColumnType("numeric(22, 8)")
                    .HasColumnName("NotionalAmount_BaseCCY");

                entity.Property(e => e.PfeBaseCcy)
                    .HasColumnType("numeric(22, 8)")
                    .HasColumnName("PFE_BaseCCY");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTrxnProductAssetType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTrxnProduct_AssetType");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Polarity).HasColumnName("POLARITY");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.TrxnProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblTsconditionsMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTSConditionsMaster");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlCond)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Cond");
            });

            modelBuilder.Entity<TblTsconditionsMaster20180910>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblTSConditionsMaster20180910");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.XmlCond)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Cond");
            });

            modelBuilder.Entity<TblUploadDay0facilitesErr>(entity =>
            {
                entity.HasKey(e => e.ErrId);

                entity.ToTable("tblUpload_DAY0FacilitesErr");

                entity.Property(e => e.ErrId).HasColumnName("ERR_ID");

                entity.Property(e => e.Category).HasMaxLength(10);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.UploadType)
                    .HasMaxLength(20)
                    .HasColumnName("Upload_type");
            });

            modelBuilder.Entity<TblUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUsers");

                entity.HasIndex(e => e.UserId, "UC_UserID_tblUsers")
                    .IsUnique();

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CalId).HasColumnName("calID");

                entity.Property(e => e.CommunicationAddress)
                    .HasMaxLength(250)
                    .HasColumnName("Communication_Address");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DgId).HasColumnName("DG_ID");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .HasColumnName("EMailID");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName");

                entity.Property(e => e.MloginEnabled).HasColumnName("MLoginEnabled");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .HasColumnName("MName");

                entity.Property(e => e.Mobile1).HasMaxLength(35);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OpsLocationMultiple).IsUnicode(false);

                entity.Property(e => e.Otpsent)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("OTPSent");

                entity.Property(e => e.Password).HasMaxLength(25);

                entity.Property(e => e.PermanentAddress)
                    .HasMaxLength(250)
                    .HasColumnName("Permanent_Address");

                entity.Property(e => e.Phone1).HasMaxLength(40);

                entity.Property(e => e.RegionId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SanctionAuthorityId).HasColumnName("SanctionAuthorityID");

                entity.Property(e => e.T24daocode)
                    .HasMaxLength(50)
                    .HasColumnName("T24DAOCode");

                entity.Property(e => e.UId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("U_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");

                entity.Property(e => e.UserSessionId).HasMaxLength(200);
            });

            modelBuilder.Entity<TblUserApprovalLimitMatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserApprovalLimitMatrix");

                entity.Property(e => e.ApprovingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Approving_Amount");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblUserAssignedPortfolio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserAssignedPortfolios");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UapId).HasColumnName("UAP_ID");
            });

            modelBuilder.Entity<TblUserCallDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserCallDetails");

                entity.Property(e => e.CallDetails)
                    .HasColumnType("text")
                    .HasColumnName("Call_Details");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UcdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UCD_ID");
            });

            modelBuilder.Entity<TblUserEventsConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserEventsConfiguration");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EventId).HasColumnName("EventID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<TblUserHierarchy>(entity =>
            {
                entity.HasKey(e => e.EhrId);

                entity.ToTable("tblUser_Hierarchy");

                entity.Property(e => e.EhrId).HasColumnName("EHR_ID");

                entity.Property(e => e.ChildEId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Child_E_ID");

                entity.Property(e => e.ELevel).HasColumnName("E_Level");

                entity.Property(e => e.EPath)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("E_Path");

                entity.Property(e => e.ParentEId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Parent_E_ID");

                entity.Property(e => e.RootEId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Root_E_ID");
            });

            modelBuilder.Entity<TblUserMachinDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserMachinDetails");

                entity.Property(e => e.AccessDate).HasColumnType("datetime");

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.CountryIsocode)
                    .HasMaxLength(200)
                    .HasColumnName("CountryISOCode");

                entity.Property(e => e.Dnsname)
                    .HasMaxLength(200)
                    .HasColumnName("DNSName");

                entity.Property(e => e.GeoCode).HasMaxLength(50);

                entity.Property(e => e.Language).HasMaxLength(100);

                entity.Property(e => e.LoggedInTime).HasColumnType("datetime");

                entity.Property(e => e.LoggedOutTime).HasColumnType("datetime");

                entity.Property(e => e.RemoteIp)
                    .HasMaxLength(100)
                    .HasColumnName("RemoteIP");

                entity.Property(e => e.Umid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UMID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblUserMachinDetails20220315>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserMachinDetails20220315");

                entity.Property(e => e.AccessDate).HasColumnType("datetime");

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.CountryIsocode)
                    .HasMaxLength(200)
                    .HasColumnName("CountryISOCode");

                entity.Property(e => e.Dnsname)
                    .HasMaxLength(200)
                    .HasColumnName("DNSName");

                entity.Property(e => e.GeoCode).HasMaxLength(50);

                entity.Property(e => e.Language).HasMaxLength(100);

                entity.Property(e => e.LoggedInTime).HasColumnType("datetime");

                entity.Property(e => e.LoggedOutTime).HasColumnType("datetime");

                entity.Property(e => e.RemoteIp)
                    .HasMaxLength(100)
                    .HasColumnName("RemoteIP");

                entity.Property(e => e.Umid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UMID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblUserMachinDetailsHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserMachinDetails_History");

                entity.Property(e => e.AccessDate).HasColumnType("datetime");

                entity.Property(e => e.Country).HasMaxLength(200);

                entity.Property(e => e.CountryIsocode)
                    .HasMaxLength(200)
                    .HasColumnName("CountryISOCode");

                entity.Property(e => e.Dnsname)
                    .HasMaxLength(200)
                    .HasColumnName("DNSName");

                entity.Property(e => e.GeoCode).HasMaxLength(50);

                entity.Property(e => e.Language).HasMaxLength(100);

                entity.Property(e => e.LoggedInTime).HasColumnType("datetime");

                entity.Property(e => e.LoggedOutTime).HasColumnType("datetime");

                entity.Property(e => e.RemoteIp)
                    .HasMaxLength(100)
                    .HasColumnName("RemoteIP");

                entity.Property(e => e.Umhistid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UMHISTID");

                entity.Property(e => e.Umid).HasColumnName("UMID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(500)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<TblUserPermission>(entity =>
            {
                entity.HasKey(e => e.UpId)
                    .HasName("PK__tblUserPermissio__03317E3D");

                entity.ToTable("tblUserPermission");

                entity.Property(e => e.UpId).HasColumnName("UP_ID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.HasOne(d => d.CIdNavigation)
                    .WithMany(p => p.TblUserPermissions)
                    .HasForeignKey(d => d.CId)
                    .HasConstraintName("FK_tblUserPermission_tblCustomer");

                entity.HasOne(d => d.MIdNavigation)
                    .WithMany(p => p.TblUserPermissions)
                    .HasForeignKey(d => d.MId)
                    .HasConstraintName("FK_tblUserPermission_tblModules");
            });

            modelBuilder.Entity<TblUserPortfolio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserPortfolios");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PrtId).HasColumnName("PRT_ID");

                entity.Property(e => e.UprtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("UPRT_ID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TblUserRole>(entity =>
            {
                entity.HasKey(e => e.UrId)
                    .HasName("PK__tblUserRoles__0519C6AF");

                entity.ToTable("tblUserRoles");

                entity.Property(e => e.UrId).HasColumnName("UR_ID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.HasOne(d => d.CIdNavigation)
                    .WithMany(p => p.TblUserRoles)
                    .HasForeignKey(d => d.CId)
                    .HasConstraintName("FK_tblUserRoles_tblCustomer");

                entity.HasOne(d => d.MIdNavigation)
                    .WithMany(p => p.TblUserRoles)
                    .HasForeignKey(d => d.MId)
                    .HasConstraintName("FK_tblUserRoles_tblModules");
            });

            modelBuilder.Entity<TblUserRoleRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserRoleRegion");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.UrId).HasColumnName("UR_ID");

                entity.Property(e => e.UrrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("URR_ID");
            });

            modelBuilder.Entity<TblUserRoleRegionH>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUserRoleRegion_H");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.InsertedOn).HasColumnType("datetime");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.UrId).HasColumnName("UR_ID");

                entity.Property(e => e.UrrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("URR_ID");
            });

            modelBuilder.Entity<TblUserRolesMovement>(entity =>
            {
                entity.ToTable("tblUserRolesMovement");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccessName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AccessType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblUtilizationsCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblUtilizations_Customers");

                entity.Property(e => e.AddonFactor).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.AddonValueBaseCcy)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AddonValue_BaseCCY");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BaseCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("BaseCCY");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CustomerCif)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CustomerCIF");

                entity.Property(e => e.ExposureBaseCcy)
                    .HasColumnType("numeric(20, 8)")
                    .HasColumnName("Exposure_BaseCCY");

                entity.Property(e => e.ExposureEndDate).HasColumnType("datetime");

                entity.Property(e => e.ExposureStartDate).HasColumnType("datetime");

                entity.Property(e => e.FacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FacilityID");

                entity.Property(e => e.LimitRefCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mtmamount)
                    .HasColumnType("numeric(20, 8)")
                    .HasColumnName("MTMAmount");

                entity.Property(e => e.MtmamountBaseCcy)
                    .HasColumnType("numeric(20, 8)")
                    .HasColumnName("MTMAmount_BaseCCY");

                entity.Property(e => e.Mtmccy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMCCY");

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(20, 8)");

                entity.Property(e => e.NotionalAmountBaseCcy)
                    .HasColumnType("numeric(20, 8)")
                    .HasColumnName("NotionalAmount_BaseCCY");

                entity.Property(e => e.NotionalCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("NotionalCCY");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tenor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionAccountNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Trnid).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TblValuationItemsId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblValuationItemsID");

                entity.Property(e => e.ViId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VI_ID");

                entity.Property(e => e.ViValue)
                    .HasMaxLength(20)
                    .HasColumnName("VI_Value")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TblValuer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblValuer");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ValuerCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VALUER_CODE");

                entity.Property(e => e.ValuerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Valuer_ID");

                entity.Property(e => e.ValuerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUER_NAME");
            });

            modelBuilder.Entity<TblVelocityReportMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblVelocityReportMaster");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Account Number");

                entity.Property(e => e.AccountOpenDate)
                    .HasMaxLength(100)
                    .HasColumnName("Account Open Date");

                entity.Property(e => e.Balance).HasMaxLength(50);

                entity.Property(e => e.Branch).HasMaxLength(255);

                entity.Property(e => e.Cluster).HasMaxLength(255);

                entity.Property(e => e.Curmnth)
                    .HasMaxLength(255)
                    .HasColumnName("CURMNTH");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Customer Number");

                entity.Property(e => e.Limit).HasMaxLength(50);

                entity.Property(e => e.Premnth)
                    .HasMaxLength(255)
                    .HasColumnName("PREMNTH");

                entity.Property(e => e.Solid)
                    .HasMaxLength(50)
                    .HasColumnName("SOLID");

                entity.Property(e => e.VintagecmCurrMonth)
                    .HasMaxLength(255)
                    .HasColumnName("VINTAGECM_CURR_MONTH");

                entity.Property(e => e.VintagecmCurrMonthPoints)
                    .HasMaxLength(50)
                    .HasColumnName("VINTAGECM_CURR_MONTH_POINTS");

                entity.Property(e => e.VintagecmPrevMonth)
                    .HasMaxLength(255)
                    .HasColumnName("VINTAGECM_PREV_MONTH");

                entity.Property(e => e.VintagecmPrevMonthPoints)
                    .HasMaxLength(50)
                    .HasColumnName("VINTAGECM_PREV_MONTH_POINTS");

                entity.Property(e => e.VintagepmCurrMonth)
                    .HasMaxLength(255)
                    .HasColumnName("VINTAGEPM_CURR_MONTH");

                entity.Property(e => e.VintagepmCurrMonthPoints)
                    .HasMaxLength(50)
                    .HasColumnName("VINTAGEPM_CURR_MONTH_POINTS");

                entity.Property(e => e.VintagepmPrevMonth)
                    .HasMaxLength(255)
                    .HasColumnName("VINTAGEPM_PREV_MONTH");

                entity.Property(e => e.VintagepmPrevMonthPoints)
                    .HasMaxLength(50)
                    .HasColumnName("VINTAGEPM_PREV_MONTH_POINTS");

                entity.Property(e => e.Zone).HasMaxLength(255);
            });

            modelBuilder.Entity<TblVendorMaster>(entity =>
            {
                entity.HasKey(e => e.VdId)
                    .HasName("PK_tblCTPT_VendorMaster")
                    .IsClustered(false);

                entity.ToTable("tblVendorMaster");

                entity.Property(e => e.VdId).HasColumnName("VD_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorAgencyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VtypeId).HasColumnName("VType_ID");
            });

            modelBuilder.Entity<TblVendorMasterBkp2904>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblVendorMaster_bkp2904");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.VdId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VD_ID");

                entity.Property(e => e.VendorAgencyName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VtypeId).HasColumnName("VType_ID");
            });

            modelBuilder.Entity<TblVendorTypeMaster>(entity =>
            {
                entity.HasKey(e => e.VtypeId);

                entity.ToTable("tblVendorTypeMaster");

                entity.Property(e => e.VtypeId).HasColumnName("VType_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorType).HasMaxLength(200);
            });

            modelBuilder.Entity<TblVesselType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblVesselType");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.VesselId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VESSEL_ID");

                entity.Property(e => e.VesselType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VESSEL_TYPE");

                entity.Property(e => e.VesselTypeCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VESSEL_TYPE_CODE");
            });

            modelBuilder.Entity<TblViewSubTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewSubTemplate");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SubTemplate).HasMaxLength(500);

                entity.Property(e => e.SubTemplateDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmpSubId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMP_SUB_ID");
            });

            modelBuilder.Entity<TblViewTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewTemplates");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TemplateDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TemplateName).HasMaxLength(100);

                entity.Property(e => e.TmpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<TblViewTemplateParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewTemplateParameter");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Multiplier).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.PrmType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRM_TYPE");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId).HasColumnName("TMP_SUB_ID");

                entity.Property(e => e.ViewParamterName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VprmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VPRM_ID");
            });

            modelBuilder.Entity<TblViewTemplateParameter20190111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewTemplateParameter_20190111");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Multiplier).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.PrmType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRM_TYPE");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId).HasColumnName("TMP_SUB_ID");

                entity.Property(e => e.ViewParamterName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VprmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VPRM_ID");
            });

            modelBuilder.Entity<TblViewTemplateParameterBkp17feb2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewTemplateParameter_BKP_17Feb2021");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Multiplier).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.PrmId).HasColumnName("PRM_ID");

                entity.Property(e => e.PrmType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PRM_TYPE");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId).HasColumnName("TMP_SUB_ID");

                entity.Property(e => e.ViewParamterName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VprmId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VPRM_ID");
            });

            modelBuilder.Entity<TblViewTemplateSubTemplateMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblViewTemplate_SubTemplate_Map");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FinReturnType).HasMaxLength(30);

                entity.Property(e => e.Mapid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("MAPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SubTemplateDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");

                entity.Property(e => e.TmpSubId).HasColumnName("TMP_SUB_ID");
            });

            modelBuilder.Entity<TblWfactionStatusAdminTasksTracker>(entity =>
            {
                entity.HasKey(e => e.WfstatId);

                entity.ToTable("tblWFActionStatusAdminTasksTracker");

                entity.Property(e => e.WfstatId).HasColumnName("WFSTAT_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChangeId)
                    .HasMaxLength(50)
                    .HasColumnName("Change_ID");

                entity.Property(e => e.LinkId).HasColumnName("LINK_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblWfactionStatusAdminTasksTrackerHistory>(entity =>
            {
                entity.ToTable("tblWFActionStatusAdminTasksTracker_History");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ChangeId)
                    .HasMaxLength(50)
                    .HasColumnName("Change_ID");

                entity.Property(e => e.LinkId).HasColumnName("LINK_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstatId).HasColumnName("WFSTAT_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblWfactionStatusAutoRenewalTracker>(entity =>
            {
                entity.HasKey(e => e.WfstarId);

                entity.ToTable("tblWFActionStatusAutoRenewalTracker");

                entity.Property(e => e.WfstarId).HasColumnName("WFSTAR_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ArId)
                    .HasMaxLength(50)
                    .HasColumnName("AR_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblWfactionStatusAutoRenewalTrackerHistory>(entity =>
            {
                entity.HasKey(e => e.WfstarId);

                entity.ToTable("tblWFActionStatusAutoRenewalTracker_History");

                entity.Property(e => e.WfstarId)
                    .ValueGeneratedNever()
                    .HasColumnName("WFSTAR_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.ArId)
                    .HasMaxLength(50)
                    .HasColumnName("AR_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname).HasMaxLength(300);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.XmlDetails)
                    .HasColumnType("xml")
                    .HasColumnName("XML_Details");
            });

            modelBuilder.Entity<TblWfactionStatusProjectTracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWFActionStatusProjectTracker");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ParentProjectId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ParentProject_ID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstcpId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCP_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblWfactionStatusProjectTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWFActionStatusProjectTrackerHistory");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ObjectName).HasMaxLength(50);

                entity.Property(e => e.ParentProjectId)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ParentProject_ID");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Project_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstcpId).HasColumnName("WFSTCP_ID");

                entity.Property(e => e.WfstcphId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTCPH_ID");

                entity.Property(e => e.XmlIn)
                    .HasColumnType("xml")
                    .HasColumnName("XML_IN");

                entity.Property(e => e.XmlOut)
                    .HasColumnType("xml")
                    .HasColumnName("XML_OUT");
            });

            modelBuilder.Entity<TblWfactionStatusTracker>(entity =>
            {
                entity.HasKey(e => e.WfstId);

                entity.ToTable("tblWFActionStatusTracker");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.Xmlin)
                    .HasColumnType("xml")
                    .HasColumnName("XMLIN");

                entity.Property(e => e.Xmlout)
                    .HasColumnType("xml")
                    .HasColumnName("XMLOUT");
            });

            modelBuilder.Entity<TblWfactionStatusTrackerForOutOfOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWFActionStatusTrackerForOutOfOffice");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFST_ID");

                entity.Property(e => e.Xmlin)
                    .HasColumnType("xml")
                    .HasColumnName("XMLIN");

                entity.Property(e => e.Xmlout)
                    .HasColumnType("xml")
                    .HasColumnName("XMLOUT");
            });

            modelBuilder.Entity<TblWfactionStatusTrackerHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWFActionStatusTrackerHistory");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ObjectName).HasMaxLength(50);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstId).HasColumnName("WFST_ID");

                entity.Property(e => e.WfsthId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFSTH_ID");

                entity.Property(e => e.Xmlin)
                    .HasColumnType("xml")
                    .HasColumnName("XMLIN");

                entity.Property(e => e.Xmlout)
                    .HasColumnType("xml")
                    .HasColumnName("XMLOUT");
            });

            modelBuilder.Entity<TblWfactionStatusTrackerOutOfOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWFActionStatusTracker_OutOfOffice");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Uname)
                    .HasMaxLength(300)
                    .HasColumnName("UName");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");

                entity.Property(e => e.WfstId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFST_ID");

                entity.Property(e => e.Xmlin)
                    .HasColumnType("xml")
                    .HasColumnName("XMLIN");

                entity.Property(e => e.Xmlout)
                    .HasColumnType("xml")
                    .HasColumnName("XMLOUT");
            });

            modelBuilder.Entity<TblWfcActionType>(entity =>
            {
                entity.HasKey(e => e.AtId);

                entity.ToTable("tbl_WFC_ActionType");

                entity.Property(e => e.AtId)
                    .ValueGeneratedNever()
                    .HasColumnName("AT_ID");

                entity.Property(e => e.ActionType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblWfcWorkFlowAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl_WFC_WorkFlowActions");

                entity.Property(e => e.ActionName).HasMaxLength(50);

                entity.Property(e => e.AtId).HasColumnName("AT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");
            });

            modelBuilder.Entity<TblWfconfigAttribute>(entity =>
            {
                entity.HasKey(e => e.WfpId)
                    .HasName("PK_tbl_WFConfig_Parameters");

                entity.ToTable("tbl_WFConfig_Attributes");

                entity.Property(e => e.WfpId).HasColumnName("WFP_ID");

                entity.Property(e => e.AcknowledgeTaskProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AcknowledgeTask_Proc");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DeleteDraftProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DeleteDraft_Proc");

                entity.Property(e => e.DraftTable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GetDraftProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GetDraft_Proc");

                entity.Property(e => e.GetTasksProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GetTasks_Proc");

                entity.Property(e => e.GetTrackerProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("GetTracker_Proc");

                entity.Property(e => e.InsertTrackerProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("InsertTracker_Proc");

                entity.Property(e => e.MainTrackerDeleteProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MainTrackerDelete_Proc");

                entity.Property(e => e.MoveToHistoryProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MoveToHistory_Proc");

                entity.Property(e => e.SaveDraftProc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SaveDraft_Proc");

                entity.Property(e => e.TrackerHistoryTable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrackerTable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<TblWillFulDefaulter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWillFulDefaulter");

                entity.Property(e => e.NameOfTheDefaultorDirectorProprietorPartners).HasColumnName("Name_of_the_Defaultor_Director_Proprietor_Partners");

                entity.Property(e => e.RegisteredAddress).HasColumnName("Registered_Address");

                entity.Property(e => e.SrNo).HasMaxLength(500);
            });

            modelBuilder.Entity<TblWillFull25L>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWillFull25L");

                entity.Property(e => e.BankName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DinDir1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR1");

                entity.Property(e => e.DinDir10)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR10");

                entity.Property(e => e.DinDir11)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR11");

                entity.Property(e => e.DinDir12)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR12");

                entity.Property(e => e.DinDir13)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR13");

                entity.Property(e => e.DinDir14)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR14");

                entity.Property(e => e.DinDir2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR2");

                entity.Property(e => e.DinDir3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR3");

                entity.Property(e => e.DinDir4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR4");

                entity.Property(e => e.DinDir5)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR5");

                entity.Property(e => e.DinDir6)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR6");

                entity.Property(e => e.DinDir7)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR7");

                entity.Property(e => e.DinDir8)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR8");

                entity.Property(e => e.DinDir9)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR9");

                entity.Property(e => e.Dir1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR1");

                entity.Property(e => e.Dir10)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR10");

                entity.Property(e => e.Dir11)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR11");

                entity.Property(e => e.Dir12)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR12");

                entity.Property(e => e.Dir13)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR13");

                entity.Property(e => e.Dir14)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR14");

                entity.Property(e => e.Dir2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR2");

                entity.Property(e => e.Dir3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR3");

                entity.Property(e => e.Dir4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR4");

                entity.Property(e => e.Dir5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR5");

                entity.Property(e => e.Dir6)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR6");

                entity.Property(e => e.Dir7)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR7");

                entity.Property(e => e.Dir8)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR8");

                entity.Property(e => e.Dir9)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR9");

                entity.Property(e => e.NameoftheParty)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OtherBankers)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OutStandingOrSuitAmt)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RegdOfficeAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sctg)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCTG");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuitStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblWillFullAbove1Cr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWillFullAbove1Cr");

                entity.Property(e => e.BankName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DateofIracclassification)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DateofIRACClassification");

                entity.Property(e => e.DinDir1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR1");

                entity.Property(e => e.DinDir10)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR10");

                entity.Property(e => e.DinDir11)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR11");

                entity.Property(e => e.DinDir12)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR12");

                entity.Property(e => e.DinDir13)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR13");

                entity.Property(e => e.DinDir14)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR14");

                entity.Property(e => e.DinDir15)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR15");

                entity.Property(e => e.DinDir16)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR16");

                entity.Property(e => e.DinDir17)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR17");

                entity.Property(e => e.DinDir18)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR18");

                entity.Property(e => e.DinDir19)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR19");

                entity.Property(e => e.DinDir2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR2");

                entity.Property(e => e.DinDir20)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR20");

                entity.Property(e => e.DinDir21)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR21");

                entity.Property(e => e.DinDir3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR3");

                entity.Property(e => e.DinDir4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR4");

                entity.Property(e => e.DinDir5)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR5");

                entity.Property(e => e.DinDir6)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR6");

                entity.Property(e => e.DinDir7)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR7");

                entity.Property(e => e.DinDir8)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR8");

                entity.Property(e => e.DinDir9)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DIN_DIR9");

                entity.Property(e => e.Dir1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR1");

                entity.Property(e => e.Dir10)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR10");

                entity.Property(e => e.Dir11)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR11");

                entity.Property(e => e.Dir12)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR12");

                entity.Property(e => e.Dir13)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR13");

                entity.Property(e => e.Dir14)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR14");

                entity.Property(e => e.Dir15)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR15");

                entity.Property(e => e.Dir16)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR16");

                entity.Property(e => e.Dir17)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR17");

                entity.Property(e => e.Dir18)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR18");

                entity.Property(e => e.Dir19)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR19");

                entity.Property(e => e.Dir2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR2");

                entity.Property(e => e.Dir20)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR20");

                entity.Property(e => e.Dir21)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR21");

                entity.Property(e => e.Dir3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR3");

                entity.Property(e => e.Dir4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR4");

                entity.Property(e => e.Dir5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR5");

                entity.Property(e => e.Dir6)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR6");

                entity.Property(e => e.Dir7)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR7");

                entity.Property(e => e.Dir8)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR8");

                entity.Property(e => e.Dir9)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DIR9");

                entity.Property(e => e.Flag)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iracstatus)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("IRACStatus");

                entity.Property(e => e.NameoftheParty)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OtherBankers)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RegdOfficeAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sctg)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCTG");

                entity.Property(e => e.SrNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SuitAmount)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SuitStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblWorkFlow>(entity =>
            {
                entity.HasKey(e => e.MWfId);

                entity.ToTable("tblWorkFlows");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<TblWorkFlowAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWorkFlowActions");

                entity.Property(e => e.ActionName).HasMaxLength(50);

                entity.Property(e => e.ActionType).HasMaxLength(50);

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.WfaId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFA_ID");

                entity.Property(e => e.WfatId).HasColumnName("WFAT_Id");
            });

            modelBuilder.Entity<TblWorkFlowActionType>(entity =>
            {
                entity.HasKey(e => e.WfatId);

                entity.ToTable("tblWorkFlowActionType");

                entity.Property(e => e.WfatId).HasColumnName("WFAT_Id");

                entity.Property(e => e.ActionType).HasMaxLength(50);
            });

            modelBuilder.Entity<TblWorkflowRoleChecklist>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblWorkflowRoleChecklist");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.Statement).HasMaxLength(1000);

                entity.Property(e => e.Wfclid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("WFCLID");
            });

            modelBuilder.Entity<TblXmltablesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblXMLtablesDetails");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdField)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ID_Field");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TableName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Xid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XID");

                entity.Property(e => e.XmlField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XML_Field");
            });

            modelBuilder.Entity<TblXmltablesFieldsMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblXMLtablesFieldsMap");

                entity.Property(e => e.FieldDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FieldLength)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IsXmlfield).HasColumnName("IsXMLField");

                entity.Property(e => e.Xid).HasColumnName("XID");

                entity.Property(e => e.Xmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XMID");
            });

            modelBuilder.Entity<TblXmltablesNode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblXMLtablesNodes");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.KeyField)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ParentRefCol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Parent_Ref_Col");

                entity.Property(e => e.ParentTableName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Parent_Table_Name");

                entity.Property(e => e.RefCol)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Ref_Col");

                entity.Property(e => e.TargetTable)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Xid).HasColumnName("XID");

                entity.Property(e => e.XmlNode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XML_Node");

                entity.Property(e => e.XnodeId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XNodeID");
            });

            modelBuilder.Entity<TblXmltablesNodesField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblXMLtablesNodesFields");

                entity.HasIndex(e => new { e.Xid, e.XnodeId, e.SortOrder }, "UNIQUE_tblXMLtablesNodesFields_SortOrder")
                    .IsUnique();

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FieldDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsEditable)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsInsert)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsXml).HasColumnName("IsXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TableFieldName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Xid).HasColumnName("XID");

                entity.Property(e => e.XmlfieldDatatype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("XMLFieldDatatype");

                entity.Property(e => e.XmlfieldName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XMLFieldName");

                entity.Property(e => e.XnodeFid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("XNodeFID");

                entity.Property(e => e.XnodeId).HasColumnName("XNodeID");
            });

            modelBuilder.Entity<Tblapplicationconfiguration20230127>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblapplicationconfiguration_20230127");

                entity.Property(e => e.CDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("C_Description");

                entity.Property(e => e.CKey)
                    .HasMaxLength(100)
                    .HasColumnName("C_Key");

                entity.Property(e => e.CValue).HasColumnName("C_Value");

                entity.Property(e => e.ConfigType).HasMaxLength(200);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("CreatedBY");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Sno)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SNO");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.XmlSchema)
                    .IsUnicode(false)
                    .HasColumnName("XML_SCHEMA");
            });

            modelBuilder.Entity<TblcropsmasterBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblcropsmaster_bkp");

                entity.Property(e => e.CoCperAcre)
                    .HasColumnType("decimal(22, 4)")
                    .HasColumnName("CoCPerAcre");

                entity.Property(e => e.CpStId).HasColumnName("CP_ST_ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MarketPricePerQuintal).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PinDistrict)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("PIN_District");

                entity.Property(e => e.YieldPerAcre).HasColumnType("decimal(22, 4)");
            });

            modelBuilder.Entity<TbldeviationsModelsBkp2005>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbldeviationsModels_bkp2005");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Dmmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DMMID");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<TbldeviationsmodelsBkp1305>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbldeviationsmodels_bkp1305");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Dmmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DMMID");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tbldisplaysectionconfig20201005>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbldisplaysectionconfig20201005");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sections).HasColumnType("xml");
            });

            modelBuilder.Entity<Tbldoamatrix20180709>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbldoamatrix_20180709");

                entity.Property(e => e.A1doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAName");

                entity.Property(e => e.A1doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A1DoAType");

                entity.Property(e => e.A2doAname)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAName");

                entity.Property(e => e.A2doAtype)
                    .HasMaxLength(50)
                    .HasColumnName("A2DoAType");

                entity.Property(e => e.DoAid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DoAID");

                entity.Property(e => e.DoAname)
                    .HasMaxLength(50)
                    .HasColumnName("DoAName");

                entity.Property(e => e.DoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("DoAType");

                entity.Property(e => e.LRatingOrder).HasColumnName("L_RatingOrder");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.NewDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OldDoA).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Operator).HasMaxLength(10);

                entity.Property(e => e.RRatingOrder).HasColumnName("R_RatingOrder");

                entity.Property(e => e.RdoAname)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAName");

                entity.Property(e => e.RdoAtype)
                    .HasMaxLength(50)
                    .HasColumnName("RDoAType");
            });

            modelBuilder.Entity<Tblexternalcustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBLEXTERNALCUSTOMER");

                entity.Property(e => e.Address)
                    .HasMaxLength(250)
                    .HasColumnName("ADDRESS");

                entity.Property(e => e.Customername)
                    .HasMaxLength(250)
                    .HasColumnName("CUSTOMERNAME");

                entity.Property(e => e.Dateofbirth)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEOFBIRTH");

                entity.Property(e => e.Finacleid).HasColumnName("FINACLEID");

                entity.Property(e => e.Legaltypedetail)
                    .HasMaxLength(250)
                    .HasColumnName("LEGALTYPEDETAIL");

                entity.Property(e => e.Relationshipmanager)
                    .HasMaxLength(250)
                    .HasColumnName("RELATIONSHIPMANAGER");
            });

            modelBuilder.Entity<Tblexternalexposure>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBLEXTERNALEXPOSURE");

                entity.Property(e => e.Customerfinacleid).HasColumnName("CUSTOMERFINACLEID");

                entity.Property(e => e.Exposureamount)
                    .HasMaxLength(50)
                    .HasColumnName("EXPOSUREAMOUNT");

                entity.Property(e => e.Exposurecurrency)
                    .HasMaxLength(20)
                    .HasColumnName("EXPOSURECURRENCY");

                entity.Property(e => e.Exposureenddate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPOSUREENDDATE");

                entity.Property(e => e.Exposurestartdate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXPOSURESTARTDATE");

                entity.Property(e => e.Externalfacilityid)
                    .HasMaxLength(50)
                    .HasColumnName("EXTERNALFACILITYID");

                entity.Property(e => e.Transactionid)
                    .HasMaxLength(50)
                    .HasColumnName("TRANSACTIONID");
            });

            modelBuilder.Entity<Tblexternalfacility>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBLEXTERNALFACILITIES");

                entity.Property(e => e.Customerfinacleid).HasColumnName("CUSTOMERFINACLEID");

                entity.Property(e => e.Facilitysubtype)
                    .HasMaxLength(50)
                    .HasColumnName("FACILITYSUBTYPE");

                entity.Property(e => e.Facilitytype)
                    .HasMaxLength(50)
                    .HasColumnName("FACILITYTYPE");

                entity.Property(e => e.Finaclelimitid)
                    .HasMaxLength(50)
                    .HasColumnName("FINACLELIMITID");

                entity.Property(e => e.Limitamount).HasColumnName("LIMITAMOUNT");

                entity.Property(e => e.Limitcurrency)
                    .HasMaxLength(20)
                    .HasColumnName("LIMITCURRENCY");

                entity.Property(e => e.Limitexpirydate)
                    .HasColumnType("datetime")
                    .HasColumnName("LIMITEXPIRYDATE");

                entity.Property(e => e.Limittenor).HasColumnName("LIMITTENOR");
            });

            modelBuilder.Entity<TblindustryBkp26022020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblindustry_bkp26022020");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.IndId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IND_ID");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.IndustryCode).HasMaxLength(30);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.Sector).HasMaxLength(200);

                entity.Property(e => e.SectorCode).HasMaxLength(30);

                entity.Property(e => e.SubSector).HasMaxLength(200);

                entity.Property(e => e.SubSectorCode).HasMaxLength(30);
            });

            modelBuilder.Entity<TbllegaltypeBkp230121>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbllegaltype_bkp230121");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution_Type");

                entity.Property(e => e.LtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");
            });

            modelBuilder.Entity<TblltvmasterconfigurationBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblltvmasterconfiguration_bkp");

                entity.Property(e => e.ApplicableLtv)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLICABLE_LTV");

                entity.Property(e => e.BankingType).HasColumnName("BANKING_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CstypId).HasColumnName("CSTYP_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DevelopArea).HasColumnName("DEVELOP_AREA");

                entity.Property(e => e.FstypId).HasColumnName("FSTYP_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Lessee).HasColumnName("LESSEE");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OccStatus).HasColumnName("OCC_STATUS");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");
            });

            modelBuilder.Entity<TblltvmasterconfigurationBkp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblltvmasterconfiguration_bkp2");

                entity.Property(e => e.ApplicableLtv)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("APPLICABLE_LTV");

                entity.Property(e => e.BankingType).HasColumnName("BANKING_TYPE");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CstypId).HasColumnName("CSTYP_ID");

                entity.Property(e => e.DeptId).HasColumnName("DEPT_ID");

                entity.Property(e => e.DevelopArea).HasColumnName("DEVELOP_AREA");

                entity.Property(e => e.FstypId).HasColumnName("FSTYP_ID");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Lessee).HasColumnName("LESSEE");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OccStatus).HasColumnName("OCC_STATUS");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");
            });

            modelBuilder.Entity<TblpslmasterBkp2503>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblpslmaster_bkp2503");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IndustryId).HasColumnName("IndustryID");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Pslcategory)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLCategory");

                entity.Property(e => e.Pslcode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PSLCode");

                entity.Property(e => e.Psldescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("PSLDescription");
            });

            modelBuilder.Entity<Tblscoringmodels0305bkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblscoringmodels_0305Bkp");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModelName).HasMaxLength(200);

                entity.Property(e => e.ModelXml)
                    .HasColumnType("xml")
                    .HasColumnName("ModelXML");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Smmid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SMMID");
            });

            modelBuilder.Entity<TblstandardconditionsBkp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblstandardconditions_bkp");

                entity.Property(e => e.ConditionId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ConditionID");

                entity.Property(e => e.ConditionText).IsUnicode(false);

                entity.Property(e => e.Header)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblvaluerBkp02042021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tblvaluer_bkp02042021");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ValuerCode)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("VALUER_CODE");

                entity.Property(e => e.ValuerId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Valuer_ID");

                entity.Property(e => e.ValuerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VALUER_NAME");
            });

            modelBuilder.Entity<TbsLosExposureAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TBS_LOS_Exposure_Account");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Account_Status");

                entity.Property(e => e.ClosedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Closed_Date");

                entity.Property(e => e.CurrentBalance)
                    .HasColumnType("money")
                    .HasColumnName("Current_Balance");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Customer_ID");

                entity.Property(e => e.Dpd).HasColumnName("DPD");

                entity.Property(e => e.DrawingPower)
                    .HasColumnType("money")
                    .HasColumnName("Drawing_Power");

                entity.Property(e => e.OpenDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Open_Date");

                entity.Property(e => e.SanctionLimit)
                    .HasColumnType("money")
                    .HasColumnName("Sanction_Limit");

                entity.Property(e => e.SchemeCode)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Scheme_Code");

                entity.Property(e => e.SchemeType)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Scheme_Type");
            });

            modelBuilder.Entity<TempStdatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempSTData");

                entity.Property(e => e.AnnualYtd)
                    .HasMaxLength(50)
                    .HasColumnName("AnnualYTD");

                entity.Property(e => e.Audited).HasMaxLength(5);

                entity.Property(e => e.ClientStmtId).HasColumnName("Client_STMT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.DisplayUnit).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FinancialCurrency).HasMaxLength(50);

                entity.Property(e => e.IsQualified).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PastOrProjection).HasMaxLength(5);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.StmtId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("STMT_ID");

                entity.Property(e => e.TmpId).HasColumnName("TMP_ID");
            });

            modelBuilder.Entity<Tempfinancial>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempfinancial");

                entity.Property(e => e.Col1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col10)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col12)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col13)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col14)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col15)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col16)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col17)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col18)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col19)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col20)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col21)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col22)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col23)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col24)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col25)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col26)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col27)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col28)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col29)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col3)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Col30)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col31)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col32)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col33)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col7)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col8)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Col9)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestLoad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("testLoad");

                entity.Property(e => e.C1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c1");

                entity.Property(e => e.C10)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c10");

                entity.Property(e => e.C11)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c11");

                entity.Property(e => e.C12)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c12");

                entity.Property(e => e.C13)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c13");

                entity.Property(e => e.C14)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c14");

                entity.Property(e => e.C15)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c15");

                entity.Property(e => e.C16)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c16");

                entity.Property(e => e.C17)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c17");

                entity.Property(e => e.C18)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c18");

                entity.Property(e => e.C19)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c19");

                entity.Property(e => e.C2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c2");

                entity.Property(e => e.C20)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c20");

                entity.Property(e => e.C21)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c21");

                entity.Property(e => e.C3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c3");

                entity.Property(e => e.C4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c4");

                entity.Property(e => e.C5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c5");

                entity.Property(e => e.C6)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c6");

                entity.Property(e => e.C7)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c7");

                entity.Property(e => e.C8)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c8");

                entity.Property(e => e.C9)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("c9");
            });

            modelBuilder.Entity<TmpTreasuryLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tmpTreasuryLimits");

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.ApprovedLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.ApprovedLimitCcy).HasColumnName("ApprovedLimitCCY");

                entity.Property(e => e.BucketId).HasColumnName("BucketID");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.Facid)
                    .HasMaxLength(50)
                    .HasColumnName("FACID");

                entity.Property(e => e.ParentFacilityId)
                    .HasMaxLength(50)
                    .HasColumnName("ParentFacilityID");

                entity.Property(e => e.ProductOrder).HasColumnName("Product_Order");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RiskType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubtypeDesc).HasMaxLength(500);

                entity.Property(e => e.TenorDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenorId).HasColumnName("Tenor_ID");

                entity.Property(e => e.TenorOrder).HasColumnName("Tenor_Order");

                entity.Property(e => e.TreasuryTenor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.TypeDesc).HasMaxLength(500);
            });

            modelBuilder.Entity<Tracker>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Tracker");

                entity.Property(e => e.CounterPartyName).IsUnicode(false);

                entity.Property(e => e.Pan)
                    .IsUnicode(false)
                    .HasColumnName("PAN");
            });

            modelBuilder.Entity<UserAppAuthMig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("userAppAuth_mig");

                entity.Property(e => e.ApprovingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Approving_Amount");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<UvwAllBranchDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_AllBranchDetails");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.BrId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("BR_ID");

                entity.Property(e => e.BranchCity).HasMaxLength(25);

                entity.Property(e => e.BranchName).HasMaxLength(200);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            modelBuilder.Entity<UvwAllProbableGuarantor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_AllProbableGuarantors");

                entity.Property(e => e.CounterpartyType).HasMaxLength(100);

                entity.Property(e => e.GuarId)
                    .HasMaxLength(102)
                    .HasColumnName("GuarID");

                entity.Property(e => e.GuarName).HasMaxLength(500);
            });

            modelBuilder.Entity<UvwApplicationDueRenewal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_ApplicationDueRenewal");

                entity.Property(e => e.AppMngtEntity).HasMaxLength(200);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PrimaryAliasID");

                entity.Property(e => e.SanctionDueDate).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(100)
                    .HasColumnName("SanctionID");
            });

            modelBuilder.Entity<UvwAssetProductMap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_AssetProductMap");

                entity.Property(e => e.AssetClassification).HasMaxLength(100);

                entity.Property(e => e.AssetClassificationId).HasColumnName("AssetClassificationID");

                entity.Property(e => e.AssetId).HasColumnName("AssetID");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UvwCommitteeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_CommitteeDetails");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CommitteeActionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeDecisionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeName).HasMaxLength(100);

                entity.Property(e => e.Sname)
                    .HasMaxLength(302)
                    .HasColumnName("sname");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<UvwCommitteeForRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_CommitteeForRole");

                entity.Property(e => e.CmtId).HasColumnName("CMT_ID");

                entity.Property(e => e.CmtModuleId).HasColumnName("CMT_Module_ID");

                entity.Property(e => e.CmtWfId).HasColumnName("CMT_WF_ID");

                entity.Property(e => e.CommitteeActionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeDecisionStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeFlowStyle).HasMaxLength(50);

                entity.Property(e => e.CommitteeName).HasMaxLength(100);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Sname)
                    .HasMaxLength(302)
                    .HasColumnName("sname");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<UvwCurrencyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_CurrencyDetails");

                entity.Property(e => e.AlphaCode).HasMaxLength(5);

                entity.Property(e => e.Country).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CrId).HasColumnName("CR_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Currency).HasMaxLength(40);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.NumCode).HasMaxLength(5);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<UvwGetAllAsset>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllAssets");

                entity.Property(e => e.AssetTypeClassification).HasMaxLength(200);

                entity.Property(e => e.AstypId).HasColumnName("ASTYP_ID");

                entity.Property(e => e.CounterPartyName).HasMaxLength(100);

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution_Type");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.TypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<UvwGetAllDisplaySectionConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllDisplaySectionConfig");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MWfId)
                    .HasMaxLength(200)
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowName).HasMaxLength(50);
            });

            modelBuilder.Entity<UvwGetAllTblFacilitySubtypePpsmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAll_tblFacilitySubtypePPSMapper");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.FacilityName).HasMaxLength(203);

                entity.Property(e => e.Fstpmid).HasColumnName("FSTPMID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.PpId).HasColumnName("PP_ID");

                entity.Property(e => e.ProductPurposeName).HasMaxLength(200);
            });

            modelBuilder.Entity<UvwGetAllTblOfacilityClsftypmapper>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAll_tblOFacilityCLSFTYPMapper");

                entity.Property(e => e.Expr1)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FacProduct).HasMaxLength(200);

                entity.Property(e => e.FacSubType).HasMaxLength(200);

                entity.Property(e => e.FacilityType).HasMaxLength(100);

                entity.Property(e => e.Facmapid).HasColumnName("FACMAPID");

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.Fclsid).HasColumnName("FCLSID");

                entity.Property(e => e.Fstprodid).HasColumnName("FSTPRODID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");
            });

            modelBuilder.Entity<UvwGetAllUserApprovalLimitMatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllUserApprovalLimitMatrix");

                entity.Property(e => e.ApprovingAmount)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("Approving_amount");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .HasColumnName("createdby");

                entity.Property(e => e.Createdon)
                    .HasColumnType("datetime")
                    .HasColumnName("createdon");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Modifiedby).HasMaxLength(50);

                entity.Property(e => e.Modifiedon)
                    .HasColumnType("datetime")
                    .HasColumnName("modifiedon");

                entity.Property(e => e.ProgId).HasColumnName("PROG_ID");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .HasColumnName("USERID");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");
            });

            modelBuilder.Entity<UvwGetAllUserReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllUserReports");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.ModuleName).HasMaxLength(50);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.ReId).HasColumnName("RE_ID");

                entity.Property(e => e.ReportName).HasMaxLength(100);

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");

                entity.Property(e => e.UserName).HasMaxLength(201);

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");
            });

            modelBuilder.Entity<UvwGetAllWithFacilityTypeTblCcfmatrix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_getAllWithFacilityType_tblCCFMAtrix");

                entity.Property(e => e.Ccfmid).HasColumnName("CCFMID");

                entity.Property(e => e.CcfperYear)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCFPerYear");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.FacilityType).HasMaxLength(100);

                entity.Property(e => e.Factypid).HasColumnName("FACTYPID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(100);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.T24pid).HasColumnName("T24PID");
            });

            modelBuilder.Entity<UvwGetAllWorkflow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllWorkflows");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Module)
                    .HasMaxLength(50)
                    .HasColumnName("module");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<UvwGetAllWorkflowsAction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllWorkflowsAction");

                entity.Property(e => e.ActionName).HasMaxLength(50);

                entity.Property(e => e.ActionType).HasMaxLength(50);

                entity.Property(e => e.CommitteeId).HasColumnName("CommitteeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Module).HasMaxLength(50);

                entity.Property(e => e.ModuleWorkFlow).HasMaxLength(50);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.Property(e => e.WfaId).HasColumnName("WFA_ID");
            });

            modelBuilder.Entity<UvwGetAllrating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_GetAllratings");

                entity.Property(e => e.AgencyName).HasMaxLength(100);

                entity.Property(e => e.AgencyScale).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.InternalMapRating).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.RaId).HasColumnName("RA_ID");

                entity.Property(e => e.Rating).HasMaxLength(50);

                entity.Property(e => e.RtId).HasColumnName("RT_ID");

                entity.Property(e => e.SortOrder).HasMaxLength(50);
            });

            modelBuilder.Entity<UvwLegalTypeCtptmappingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_LegalTypeCTPTMappingDetails");

                entity.Property(e => e.CounterpartyType).HasMaxLength(100);

                entity.Property(e => e.CpId).HasColumnName("CP_ID");

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution_Type");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");
            });

            modelBuilder.Entity<UvwModule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_Modules");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("M_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<UvwNoOfWorkFlowsProcessedReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_NoOfWorkFlowsProcessedReport");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.CountOfApplication).HasMaxLength(50);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CtptId).HasColumnName("ctpt_id");

                entity.Property(e => e.MWfId).HasColumnName("m_wf_id");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");
            });

            modelBuilder.Entity<UvwReportCollateral>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_ReportCollaterals");

                entity.Property(e => e.AcId).HasColumnName("AC_ID");

                entity.Property(e => e.AccountNumber).HasMaxLength(500);

                entity.Property(e => e.AccountWithBank).HasMaxLength(100);

                entity.Property(e => e.Amid).HasColumnName("AMID");

                entity.Property(e => e.AssetDescription).HasMaxLength(500);

                entity.Property(e => e.AssetLocation).HasMaxLength(100);

                entity.Property(e => e.Colid)
                    .HasMaxLength(50)
                    .HasColumnName("COLID");

                entity.Property(e => e.CollateralSubType).HasMaxLength(500);

                entity.Property(e => e.CollateralType).HasMaxLength(500);

                entity.Property(e => e.CollateralValue).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.CollateralValueCurrency).HasMaxLength(500);

                entity.Property(e => e.CollateralValueCurrencyId).HasColumnName("CollateralValueCurrencyID");

                entity.Property(e => e.CollateralValuer).HasMaxLength(200);

                entity.Property(e => e.Colmapid).HasColumnName("COLMAPID");

                entity.Property(e => e.Counterparty).HasMaxLength(500);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.CurrentSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Current_SNID");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Facid).HasColumnName("FACID");

                entity.Property(e => e.GuaranteeAmount).HasColumnType("decimal(25, 8)");

                entity.Property(e => e.GuaranteeValidityDate).HasColumnType("datetime");

                entity.Property(e => e.Guarantor).HasMaxLength(500);

                entity.Property(e => e.GuarantorCounterpartyRelationship).HasMaxLength(100);

                entity.Property(e => e.GuarantorType).HasMaxLength(100);

                entity.Property(e => e.InApplicationCollateralStatus).HasMaxLength(25);

                entity.Property(e => e.InitialSnid)
                    .HasMaxLength(200)
                    .HasColumnName("Initial_SNID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.SanctionId)
                    .HasMaxLength(500)
                    .HasColumnName("SanctionID");

                entity.Property(e => e.SecurityType).HasMaxLength(500);
            });

            modelBuilder.Entity<UvwReportOfRelationalCtpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_ReportOfRelationalCTPT");

                entity.Property(e => e.RelationalCtpt).HasColumnName("RelationalCTPT");
            });

            modelBuilder.Entity<UvwRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_Roles");

                entity.Property(e => e.AllowManualDoa).HasColumnName("AllowManualDOA");

                entity.Property(e => e.BcId).HasColumnName("BC_ID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(250)
                    .HasColumnName("Customer_Name");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");
            });

            modelBuilder.Entity<UvwSummaryOfAllNonAedborrowing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_SummaryOfAllNonAEDBorrowings");

                entity.Property(e => e.ActionDate).HasColumnType("datetime");

                entity.Property(e => e.Cif)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CIF");

                entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

                entity.Property(e => e.CustomerName).HasMaxLength(500);

                entity.Property(e => e.Department)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .HasColumnName("FAC_ID");

                entity.Property(e => e.LimitExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.LimitType).HasMaxLength(200);

                entity.Property(e => e.LimitTypeId).HasColumnName("LimitTypeID");

                entity.Property(e => e.Rmcode)
                    .HasMaxLength(50)
                    .HasColumnName("RMCode");

                entity.Property(e => e.Rmname)
                    .HasMaxLength(50)
                    .HasColumnName("RMName");

                entity.Property(e => e.Uname).HasMaxLength(300);
            });

            modelBuilder.Entity<UvwUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_Users");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.BranchName).HasMaxLength(200);

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CalId).HasColumnName("calID");

                entity.Property(e => e.CommunicationAddress)
                    .HasMaxLength(250)
                    .HasColumnName("Communication_Address");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DepartmentName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Designation)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DgId).HasColumnName("DG_ID");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .HasColumnName("EMailID");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName");

                entity.Property(e => e.FullName).HasMaxLength(302);

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName");

                entity.Property(e => e.MloginEnabled).HasColumnName("MLoginEnabled");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .HasColumnName("MName");

                entity.Property(e => e.Mobile1).HasMaxLength(35);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.OpsLocationMultiple).IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PermanentAddress)
                    .HasMaxLength(250)
                    .HasColumnName("Permanent_Address");

                entity.Property(e => e.Phone1).HasMaxLength(40);

                entity.Property(e => e.RegionId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.T24daocode)
                    .HasMaxLength(50)
                    .HasColumnName("T24DAOCode");

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UvwUserPermission>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_UserPermission");

                entity.Property(e => e.ActivityId).HasColumnName("ActivityID");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .HasColumnName("EMailID");

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .HasColumnName("MName");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UpId).HasColumnName("UP_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<UvwUserRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_UserRoles");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Fname)
                    .HasMaxLength(100)
                    .HasColumnName("FName");

                entity.Property(e => e.Lname)
                    .HasMaxLength(100)
                    .HasColumnName("LName");

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.Mname)
                    .HasMaxLength(100)
                    .HasColumnName("MName");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RoleName).HasMaxLength(50);

                entity.Property(e => e.UId).HasColumnName("U_ID");

                entity.Property(e => e.UrId).HasColumnName("UR_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");
            });

            modelBuilder.Entity<UvwWorkFlow>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UVW_WorkFlows");

                entity.Property(e => e.CId).HasColumnName("C_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.MId).HasColumnName("M_ID");

                entity.Property(e => e.MWfId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("M_WF_ID");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");

                entity.Property(e => e.WfobjectId).HasColumnName("WFObject_ID");
            });

            modelBuilder.Entity<VwApplicationFacilityDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ApplicationFacilityDetails");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(50)
                    .HasColumnName("Application ID");

                entity.Property(e => e.Child).HasMaxLength(500);

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CurrentUtilization).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.Department).HasMaxLength(200);

                entity.Property(e => e.ExistingLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.Parent).HasMaxLength(500);

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PrimaryAliasID");

                entity.Property(e => e.ProposedLimit).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.SanctionDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Sanction Date");

                entity.Property(e => e.SubParent)
                    .HasMaxLength(500)
                    .HasColumnName("Sub Parent");

                entity.Property(e => e.Tenor).HasColumnType("decimal(22, 4)");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<VwAssetDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AssetDetails");

                entity.Property(e => e.Aclsid).HasColumnName("ACLSID");

                entity.Property(e => e.Asid).HasColumnName("ASID");

                entity.Property(e => e.AssetName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.Fclsid).HasColumnName("FCLSID");

                entity.Property(e => e.HierarchicalPath)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Hlevel).HasColumnName("HLevel");

                entity.Property(e => e.ParentAclsid).HasColumnName("Parent_ACLSID");

                entity.Property(e => e.ParentAsid).HasColumnName("Parent_ASID");

                entity.Property(e => e.ParentAssetName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentSortOrder).HasColumnName("Parent_SortOrder");

                entity.Property(e => e.Polarity).HasColumnName("POLARITY");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.TrxnProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwCcbgMisTrackerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CCBG_MIS_TrackerDetails");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovingCommittee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Approving Committee");

                entity.Property(e => e.BhName)
                    .HasMaxLength(302)
                    .HasColumnName("BH Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessUnit).HasColumnName("Business Unit");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalystName)
                    .HasMaxLength(400)
                    .HasColumnName("Credit Analyst Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DateOfFinalSanction)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Final Sanction");

                entity.Property(e => e.DateOfLoginToCredit)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Login to Credit");

                entity.Property(e => e.ExposureAmount)
                    .HasColumnType("numeric(28, 4)")
                    .HasColumnName("Exposure_Amount");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group Name");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday or Weekends");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.InternalApprovedRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal Approved Rating");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override");

                entity.Property(e => e.NoOfTimesReturnedToBusiness).HasColumnName("No of times returned to Business");

                entity.Property(e => e.OverrideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Override Comments");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PurposeOfCam)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Purpose of CAM");

                entity.Property(e => e.RmName)
                    .HasMaxLength(302)
                    .HasColumnName("RM Name");

                entity.Property(e => e.SanctionedAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Sanctioned Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.ZhName)
                    .HasMaxLength(302)
                    .HasColumnName("ZH Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwCcbgMisTrackerHistoryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CCBG_MIS_TrackerHistoryDetails");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .HasColumnName("App_ID");

                entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovingCommittee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Approving Committee");

                entity.Property(e => e.BhName)
                    .HasMaxLength(302)
                    .HasColumnName("BH Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessUnit).HasColumnName("Business Unit");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalystName)
                    .HasMaxLength(400)
                    .HasColumnName("Credit Analyst Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DateOfFinalSanction)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Final Sanction");

                entity.Property(e => e.DateOfLoginToCredit)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Login to Credit");

                entity.Property(e => e.ExposureAmount)
                    .HasColumnType("numeric(28, 4)")
                    .HasColumnName("Exposure_Amount");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group Name");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday or Weekends");

                entity.Property(e => e.Industry).HasMaxLength(200);

                entity.Property(e => e.InternalApprovedRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal Approved Rating");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override");

                entity.Property(e => e.NoOfTimesReturnedToBusiness).HasColumnName("No of times returned to Business");

                entity.Property(e => e.OverrideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Override Comments");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PurposeOfCam)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Purpose of CAM");

                entity.Property(e => e.RmName)
                    .HasMaxLength(302)
                    .HasColumnName("RM Name");

                entity.Property(e => e.SanctionedAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Sanctioned Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.ZhName)
                    .HasMaxLength(302)
                    .HasColumnName("ZH Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwCcbgTatTrackerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CCBG_TAT_TrackerDetails");

                entity.Property(e => e.ApprovingCommittee)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Approving Committee");

                entity.Property(e => e.BhName)
                    .HasMaxLength(302)
                    .HasColumnName("BH Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessUnit).HasColumnName("Business Unit");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalystName)
                    .HasMaxLength(400)
                    .HasColumnName("Credit Analyst Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DateOfFinalSanction)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Final Sanction");

                entity.Property(e => e.DateOfLoginToCredit)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Login to Credit");

                entity.Property(e => e.ExposureAmount)
                    .HasColumnType("numeric(28, 4)")
                    .HasColumnName("Exposure_Amount");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group Name");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday or Weekends");

                entity.Property(e => e.InternalApprovedRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal Approved Rating");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override");

                entity.Property(e => e.NoOfTimesReturnedToBusiness).HasColumnName("No of times returned to Business");

                entity.Property(e => e.OverrideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Override Comments");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PurposeOfCam)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Purpose of CAM");

                entity.Property(e => e.RmName)
                    .HasMaxLength(302)
                    .HasColumnName("RM Name");

                entity.Property(e => e.SanctionedAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Sanctioned Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.ZhName)
                    .HasMaxLength(302)
                    .HasColumnName("ZH Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwCcbgTatTrackerHistoryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CCBG_TAT_TrackerHistoryDetails");

                entity.Property(e => e.ApprovingCommittee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Approving Committee");

                entity.Property(e => e.BhName)
                    .HasMaxLength(302)
                    .HasColumnName("BH Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessUnit).HasColumnName("Business Unit");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.CreditAnalystName)
                    .HasMaxLength(400)
                    .HasColumnName("Credit Analyst Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Customer Name");

                entity.Property(e => e.DateOfFinalSanction)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Final Sanction");

                entity.Property(e => e.DateOfLoginToCredit)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date of Login to Credit");

                entity.Property(e => e.ExposureAmount)
                    .HasColumnType("numeric(28, 4)")
                    .HasColumnName("Exposure_Amount");

                entity.Property(e => e.FinalizationTat).HasColumnName("Finalization_TAT");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group Name");

                entity.Property(e => e.HolidayOrWeekends).HasColumnName("Holiday or Weekends");

                entity.Property(e => e.InternalApprovedRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal Approved Rating");

                entity.Property(e => e.ManualOverride)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override");

                entity.Property(e => e.NoOfTimesReturnedToBusiness).HasColumnName("No of times returned to Business");

                entity.Property(e => e.OverrideComments)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Override Comments");

                entity.Property(e => e.Pan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.PurposeOfCam)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Purpose of CAM");

                entity.Property(e => e.RmName)
                    .HasMaxLength(302)
                    .HasColumnName("RM Name");

                entity.Property(e => e.SanctionedAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Sanctioned Amount");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.ZhName)
                    .HasMaxLength(302)
                    .HasColumnName("ZH Name");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwCollateralTypeSubtype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CollateralType_Subtype");

                entity.Property(e => e.ColSubType).HasMaxLength(100);

                entity.Property(e => e.CollateralCode).HasMaxLength(10);

                entity.Property(e => e.CollateralSubCode).HasMaxLength(10);

                entity.Property(e => e.CollateralType).HasMaxLength(100);

                entity.Property(e => e.Colmapid).HasColumnName("COLMAPID");

                entity.Property(e => e.Coltypid).HasColumnName("COLTYPID");

                entity.Property(e => e.Cstypid).HasColumnName("CSTYPID");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.Nature)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RealizableValue).HasColumnType("decimal(18, 8)");
            });

            modelBuilder.Entity<VwCountryHeirarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CountryHeirarchy");

                entity.Property(e => e.CtId).HasColumnName("CT_ID");

                entity.Property(e => e.HId).HasColumnName("H_ID");

                entity.Property(e => e.Hlevel).HasColumnName("HLevel");

                entity.Property(e => e.Hpath)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HPath");

                entity.Property(e => e.Hpath1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HPATH1");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parent).HasColumnName("PARENT");
            });

            modelBuilder.Entity<VwCreditEnhancer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CreditEnhancer");

                entity.Property(e => e.BorrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("BORR_ID");

                entity.Property(e => e.BorrRatingYear)
                    .HasColumnType("numeric(4, 0)")
                    .HasColumnName("BORR_RATING_YEAR");

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CounterpartyCtptId).HasColumnName("Counterparty_CTPT_ID");

                entity.Property(e => e.CounterpartyUniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("Counterparty_UniqueID");

                entity.Property(e => e.Datafeeddate)
                    .HasColumnType("date")
                    .HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.GuarMdlid)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_MDLID");

                entity.Property(e => e.GuarMstBusSegmentId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_MST_BUS_SEGMENT_ID");

                entity.Property(e => e.GuarRatingYear)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("GUAR_RATING_YEAR");

                entity.Property(e => e.GuarantorCtptId).HasColumnName("Guarantor_CTPT_ID");

                entity.Property(e => e.GuarantorId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_ID");

                entity.Property(e => e.GuarantorName)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("GUARANTOR_NAME");

                entity.Property(e => e.GuarantorName1)
                    .HasMaxLength(500)
                    .HasColumnName("GuarantorName");

                entity.Property(e => e.GuarantorUniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("Guarantor_UniqueID");

                entity.Property(e => e.ModelId)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("MODEL_ID");

                entity.Property(e => e.MstGuarIntRating)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("MST_GUAR_INT_RATING");

                entity.Property(e => e.PublisherCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("PUBLISHER_CODE");

                entity.Property(e => e.Token)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TOKEN");

                entity.Property(e => e.UserId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");
            });

            modelBuilder.Entity<VwEligTblCounterparty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_Elig_tblCounterparty");

                entity.Property(e => e.Abb).HasColumnName("ABB");

                entity.Property(e => e.Age).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.AsId).HasColumnName("AS_ID");

                entity.Property(e => e.Astarclassification).HasColumnName("ASTARClassification");

                entity.Property(e => e.AuthCapital).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Banks).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.BirthDate).HasColumnType("datetime");

                entity.Property(e => e.BookingUnit).HasMaxLength(100);

                entity.Property(e => e.BrId).HasColumnName("BR_ID");

                entity.Property(e => e.BuId).HasColumnName("BU_ID");

                entity.Property(e => e.BusinessUnit).HasMaxLength(20);

                entity.Property(e => e.CbeconomicSectorCode).HasColumnName("CBEconomicSectorCode");

                entity.Property(e => e.CbrbclassificationId).HasColumnName("CBRBClassificationID");

                entity.Property(e => e.ConfidentialIndicator).HasColumnName("Confidential_Indicator");

                entity.Property(e => e.ControlState).HasMaxLength(25);

                entity.Property(e => e.CounterPartyName).HasMaxLength(500);

                entity.Property(e => e.CptId).HasColumnName("CPT_ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CtptGuid).HasColumnName("CTPT_GUID");

                entity.Property(e => e.CtptId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CTPT_ID");

                entity.Property(e => e.CtptXml)
                    .HasColumnType("xml")
                    .HasColumnName("CTPT_XML");

                entity.Property(e => e.CustomerCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerSince).HasColumnType("datetime");

                entity.Property(e => e.CustomerSize).HasMaxLength(100);

                entity.Property(e => e.CustomerStyle).HasColumnName("Customer_Style");

                entity.Property(e => e.DateOfChargesFetch).HasColumnType("datetime");

                entity.Property(e => e.DateOfCompanyFetch).HasColumnType("datetime");

                entity.Property(e => e.DateOfDirectorsFetch).HasColumnType("datetime");

                entity.Property(e => e.DcId).HasColumnName("DC_ID");

                entity.Property(e => e.Ebidta).HasColumnName("EBIDTA");

                entity.Property(e => e.EfilingStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EnterpriseSector).HasMaxLength(100);

                entity.Property(e => e.ExemptQcr).HasColumnName("ExemptQCR");

                entity.Property(e => e.ExistingRiskRate).HasMaxLength(100);

                entity.Property(e => e.FaxNumber).HasMaxLength(50);

                entity.Property(e => e.ForeignBodiesCorporate).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.IncCountryId).HasColumnName("INC_CountryID");

                entity.Property(e => e.IncorpInAstar)
                    .HasColumnType("datetime")
                    .HasColumnName("IncorpInASTAR");

                entity.Property(e => e.InvestmentEquipment).HasMaxLength(100);

                entity.Property(e => e.Iracstatus).HasColumnName("IRACStatus");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ListingStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCityLimits)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMetroCity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationNegativeList)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.MarketCap).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.McaClassification)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_Classification");

                entity.Property(e => e.McaCompanyCategory)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Company_Category");

                entity.Property(e => e.McaCompanySubCategory)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Company_Sub_Category");

                entity.Property(e => e.McaDateOfBalanceSheet).HasColumnName("MCA_Date_of_Balance_Sheet");

                entity.Property(e => e.McaEmailId)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Email_Id");

                entity.Property(e => e.McaIndustry)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Industry");

                entity.Property(e => e.McaLastAgmDate).HasColumnName("MCA_last_agm_date");

                entity.Property(e => e.McaNumberOfMembers)
                    .HasMaxLength(10)
                    .HasColumnName("MCA_Number_of_Members");

                entity.Property(e => e.McaOldName)
                    .HasMaxLength(100)
                    .HasColumnName("MCA_Old_Name");

                entity.Property(e => e.McaPan)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_PAN");

                entity.Property(e => e.McaRoCCode)
                    .HasMaxLength(20)
                    .HasColumnName("MCA_RoC_Code");

                entity.Property(e => e.McaSector)
                    .HasMaxLength(50)
                    .HasColumnName("MCA_Sector");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

                entity.Property(e => e.MraratingGrade)
                    .HasMaxLength(50)
                    .HasColumnName("MRARatingGrade");

                entity.Property(e => e.Mrascore)
                    .HasMaxLength(50)
                    .HasColumnName("MRAScore");

                entity.Property(e => e.PaidupCapital).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Pat).HasColumnName("PAT");

                entity.Property(e => e.Pbt).HasColumnName("PBT");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PrimaryAliasID");

                entity.Property(e => e.Profession)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Promoters).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.ReasonForStress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResiOffOwnedBorrower)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ResiOffOwnedBrotherOwningBrotherCoApplicant)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ResiOffOwnedParentsBorrower)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SalesTurnOver).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UniqueId)
                    .HasMaxLength(50)
                    .HasColumnName("UniqueID");

                entity.Property(e => e.UserDefinedFields).HasColumnType("xml");

                entity.Property(e => e.UwsdeviationsSecurityNetWorth).HasColumnName("UWSDeviationsSecurityNetWorth");

                entity.Property(e => e.WebsiteAddress).HasMaxLength(500);
            });

            modelBuilder.Entity<VwFacilityClassificationMi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_FacilityClassification_MIS");

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.ClassificationMis)
                    .HasMaxLength(100)
                    .HasColumnName("Classification_MIS");

                entity.Property(e => e.FacSubType).HasMaxLength(200);

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");
            });

            modelBuilder.Entity<VwFacilitySubTypeClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_FacilitySubTypeClassification");

                entity.Property(e => e.Ccf)
                    .HasColumnType("decimal(18, 4)")
                    .HasColumnName("CCF");

                entity.Property(e => e.Classification).HasMaxLength(100);

                entity.Property(e => e.FacSubType).HasMaxLength(200);

                entity.Property(e => e.FstypFclsid).HasColumnName("FSTYP_FCLSID");

                entity.Property(e => e.Fstypid).HasColumnName("FSTYPID");

                entity.Property(e => e.MstSourceId).HasColumnName("MST_SOURCE_ID");

                entity.Property(e => e.PanelVirtualPath).HasMaxLength(250);
            });

            modelBuilder.Entity<VwIndustryHeirarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_IndustryHeirarchy");

                entity.Property(e => e.HId).HasColumnName("H_ID");

                entity.Property(e => e.Hlevel).HasColumnName("HLevel");

                entity.Property(e => e.Hpath)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("HPath");

                entity.Property(e => e.Hpath1)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("HPATH1");

                entity.Property(e => e.IndCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IND_CODE");

                entity.Property(e => e.IndId).HasColumnName("IND_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parent).HasColumnName("PARENT");
            });

            modelBuilder.Entity<VwIndustryPortfolioLimit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_IndustryPortfolioLimits");

                entity.Property(e => e.LimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_CCY")
                    .IsFixedLength();

                entity.Property(e => e.LimitConsumedBaseccy)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("LIMIT_CONSUMED_BASECCY");

                entity.Property(e => e.LimitValue)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("LIMIT_VALUE");

                entity.Property(e => e.LimitValueBaseccy)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("LIMIT_VALUE_BASECCY");

                entity.Property(e => e.PParameter)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("P_PARAMETER");

                entity.Property(e => e.PParametername)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("P_PARAMETERNAME");

                entity.Property(e => e.PPid).HasColumnName("P_PID");

                entity.Property(e => e.PPl).HasColumnName("P_PL");

                entity.Property(e => e.PType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("P_TYPE");

                entity.Property(e => e.PercentageValue).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<VwLmFacCalBaseCcy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_LM_FAC_CAL_BaseCCY");

                entity.Property(e => e.AnchorCtptId).HasColumnName("AnchorCTPT_ID");

                entity.Property(e => e.AnchorLineFacid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("AnchorLineFACID");

                entity.Property(e => e.ApprovedLimitBaseCcy)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ApprovedLimit_BaseCCY");

                entity.Property(e => e.ApprovedLimitBaseCcyRec)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ApprovedLimit_BaseCCY_Rec");

                entity.Property(e => e.ChildWithFullRecourseToAnchor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Class)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClassDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CtptId).HasColumnName("CTPT_ID");

                entity.Property(e => e.FacClass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FacID");

                entity.Property(e => e.FacPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Fcsid).HasColumnName("FCSID");

                entity.Property(e => e.IpaApprovedLimit)
                    .HasColumnType("numeric(24, 5)")
                    .HasColumnName("IPA_ApprovedLimit");

                entity.Property(e => e.IpaApprovedLimitBaseCcy)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("IPA_ApprovedLimit_BaseCCY");

                entity.Property(e => e.IpaApprovedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IPA_ApprovedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.IpaProposedLimit)
                    .HasColumnType("numeric(24, 5)")
                    .HasColumnName("IPA_ProposedLimit");

                entity.Property(e => e.IpaProposedLimitBaseCcy)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("IPA_ProposedLimit_BaseCCY");

                entity.Property(e => e.IpaProposedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IPA_ProposedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.IsOneOff)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IsRevolving)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ParentFacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ParentFacID");

                entity.Property(e => e.PropertyPurchaseTl).HasColumnName("PropertyPurchaseTL");

                entity.Property(e => e.ProposedLimit).HasColumnType("numeric(22, 5)");

                entity.Property(e => e.ProposedLimitBaseCcy)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ProposedLimit_BaseCCY");

                entity.Property(e => e.ProposedLimitBaseCcyRec)
                    .HasColumnType("decimal(24, 8)")
                    .HasColumnName("ProposedLimit_BaseCCY_Rec");

                entity.Property(e => e.ProposedLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ProposedLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.ProposedLimitCcyPrev)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ProposedLimitCCY_Prev")
                    .IsFixedLength();

                entity.Property(e => e.ProposedLimitPrev)
                    .HasColumnType("numeric(22, 5)")
                    .HasColumnName("ProposedLimit_Prev");

                entity.Property(e => e.Prrapplicable).HasColumnName("PRRApplicable");

                entity.Property(e => e.RealLimit).HasColumnType("numeric(22, 5)");

                entity.Property(e => e.RealLimitCcy)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("RealLimitCCY")
                    .IsFixedLength();

                entity.Property(e => e.RootFacId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("RootFacID");
            });

            modelBuilder.Entity<VwMistrackerDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MISTrackerDetails");

                entity.Property(e => e.ActualCollateralCover)
                    .HasColumnType("numeric(30, 2)")
                    .HasColumnName("Actual_Collateral_Cover");

                entity.Property(e => e.ActualCoverPercent).HasColumnType("numeric(30, 2)");

                entity.Property(e => e.ApplicationClosedDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Application_Closed_Date");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(50)
                    .HasColumnName("Application_ID");

                entity.Property(e => e.ApplicationStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Application_Start_Date");

                entity.Property(e => e.ApprovalMonth)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Approval_Month");

                entity.Property(e => e.ApprovingAuthority)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Approving_Authority");

                entity.Property(e => e.AssessmentDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Assessment_Deviations");

                entity.Property(e => e.BankingHistoryDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Banking_History_Deviations");

                entity.Property(e => e.BorrowerProfileDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Borrower_profile_Deviations");

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtBankName).HasColumnName("BT Bank Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessType).HasColumnName("Business_Type");

                entity.Property(e => e.Cibildate).HasColumnName("CIBILDate");

                entity.Property(e => e.Cibilrank)
                    .IsUnicode(false)
                    .HasColumnName("CIBILRank");

                entity.Property(e => e.CifId).HasColumnName("CIF_ID");

                entity.Property(e => e.CollateralDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Collateral_Deviations");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.Constitution)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CountPostCfd).HasColumnName("COUNT_POST_CFD");

                entity.Property(e => e.CredProId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_ID");

                entity.Property(e => e.CreditAnalyst)
                    .HasMaxLength(302)
                    .HasColumnName("Credit_Analyst");

                entity.Property(e => e.CreditAnalystUid).HasColumnName("CreditAnalyst_UID");

                entity.Property(e => e.CreditApproverName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Approver_Name");

                entity.Property(e => e.CreditLoginBy).HasMaxLength(302);

                entity.Property(e => e.CreditSecName)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Credit_Sec_Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CrossCollateral)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRolePendingSince)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CurrentRole_PendingSince");

                entity.Property(e => e.CurrentUserName).HasMaxLength(302);

                entity.Property(e => e.CurrentUserRole).HasMaxLength(200);

                entity.Property(e => e.DateOfLogin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Login");

                entity.Property(e => e.DefaultHistoryDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Default_History_Deviations");

                entity.Property(e => e.DerivativesAsPerNotionAmount)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("Derivatives_as_per_Notion_Amount");

                entity.Property(e => e.DerivativesAsPerPfeAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Derivatives_as_per_PFE_amount");

                entity.Property(e => e.DisbusrementDate).HasColumnName("Disbusrement_Date");

                entity.Property(e => e.ExposureDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Exposure_Deviations");

                entity.Property(e => e.ExternalRating)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("External_Rating");

                entity.Property(e => e.FinacleMsmeclassification)
                    .IsUnicode(false)
                    .HasColumnName("FinacleMSMEClassification");

                entity.Property(e => e.FinancialParametersDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Financial_Parameters_Deviations");

                entity.Property(e => e.FundBased)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Fund_Based");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.IncrementalExposureInLakhs)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Incremental_Exposure_In_lakhs");

                entity.Property(e => e.InternalScoreRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal_Score_Rating");

                entity.Property(e => e.LatestAuditedFinancial).HasColumnName("Latest_Audited_Financial");

                entity.Property(e => e.LatestAuditedTurnover)
                    .HasColumnType("decimal(31, 9)")
                    .HasColumnName("Latest_Audited_Turnover");

                entity.Property(e => e.LegalEntityIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegalEntityIdentifierExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.Loans).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.LoginAcceptanceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Login_Acceptance_date");

                entity.Property(e => e.LoginMonth)
                    .HasMaxLength(30)
                    .HasColumnName("Login_month");

                entity.Property(e => e.LoginToAcceptanceTat).HasColumnName("Login_to_Acceptance_TAT");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ManualOverrideComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override Comments");

                entity.Property(e => e.ManualOverrideDop)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override DOP");

                entity.Property(e => e.ManualOverrideYN)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override (Y/N)");

                entity.Property(e => e.ModeOfFacility)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Mode_of_Facility");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Type");

                entity.Property(e => e.NameOfTheBorrower)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name_of_the_Borrower");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Nature_of_Business");

                entity.Property(e => e.NonFundBased)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Non_Fund_Based");

                entity.Property(e => e.OtherDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Other_Deviations");

                entity.Property(e => e.OwnerMarginDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Owner_Margin_Deviations");

                entity.Property(e => e.PanNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN_No");

                entity.Property(e => e.PersonalGuaranteeDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Personal_Guarantee_Deviations");

                entity.Property(e => e.Product)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PromoterAndGuarantorAgeDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Promoter_and_Guarantor_Age_Deviations");

                entity.Property(e => e.ProposedBankingArrangement).HasColumnName("Proposed_Banking_Arrangement");

                entity.Property(e => e.ReasonsOfDeclineWithdrawnAdditionalRemarks)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reasons_of_Decline_Withdrawn_Additional_remarks");

                entity.Property(e => e.ReasonsOfDeclineWithdrawnRejection)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Reasons_of_Decline_Withdrawn_Rejection");

                entity.Property(e => e.RegionalHead)
                    .HasMaxLength(302)
                    .HasColumnName("Regional_Head");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Report Date");

                entity.Property(e => e.RestartedApplication)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Restarted_Application");

                entity.Property(e => e.RiskParameterScoreDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Risk_Parameter_Score_Deviations");

                entity.Property(e => e.Rm)
                    .HasMaxLength(302)
                    .HasColumnName("RM");

                entity.Property(e => e.RmUid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RM_UID");

                entity.Property(e => e.SanctionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryIndustryName)
                    .HasMaxLength(200)
                    .HasColumnName("Secondary Industry Name");

                entity.Property(e => e.SecretoryVote)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Secretory_Vote");

                entity.Property(e => e.SegmentCrossCollateral).HasColumnName("Segment_Cross_Collateral");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.SourcingChannelType)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SourcingChannelTypeDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.TenorDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Tenor_Deviations");

                entity.Property(e => e.TertiaryIndustryName)
                    .HasMaxLength(200)
                    .HasColumnName("Tertiary Industry Name");

                entity.Property(e => e.TotalCount).HasColumnName("TOTAL_COUNT");

                entity.Property(e => e.TotalFacility)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_Facility");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.TypeOfApplication)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Type_of_application");

                entity.Property(e => e.UdyamRegistrationCertificationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitHead)
                    .HasMaxLength(302)
                    .HasColumnName("Unit_Head");

                entity.Property(e => e.Urcavailable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URCAvailable");

                entity.Property(e => e.Urcnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URCNumber");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");

                entity.Property(e => e.ZonalHead)
                    .HasMaxLength(302)
                    .HasColumnName("Zonal_Head");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwMistrackerHistoryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_MISTrackerHistoryDetails");

                entity.Property(e => e.ActualCollateralCover)
                    .HasColumnType("numeric(30, 2)")
                    .HasColumnName("Actual_Collateral_Cover");

                entity.Property(e => e.ActualCoverPercent).HasColumnType("numeric(30, 2)");

                entity.Property(e => e.ApplicationClosedDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Application_Closed_Date");

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(50)
                    .HasColumnName("Application_ID");

                entity.Property(e => e.ApplicationStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Application_Start_Date");

                entity.Property(e => e.ApprovalMonth)
                    .HasMaxLength(4000)
                    .HasColumnName("Approval_Month");

                entity.Property(e => e.ApprovingAuthority)
                    .HasMaxLength(4000)
                    .HasColumnName("Approving_Authority");

                entity.Property(e => e.AssessmentDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Assessment_Deviations");

                entity.Property(e => e.BankingHistoryDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Banking_History_Deviations");

                entity.Property(e => e.BorrowerProfileDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Borrower_profile_Deviations");

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BtBankName).HasColumnName("BT Bank Name");

                entity.Property(e => e.BusinessTat).HasColumnName("Business_TAT");

                entity.Property(e => e.BusinessType).HasColumnName("Business_Type");

                entity.Property(e => e.Cibildate)
                    .IsUnicode(false)
                    .HasColumnName("CIBILDate");

                entity.Property(e => e.Cibilrank)
                    .IsUnicode(false)
                    .HasColumnName("CIBILRank");

                entity.Property(e => e.CifId)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.CollateralDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Collateral_Deviations");

                entity.Property(e => e.CommitteeTat).HasColumnName("Committee_TAT");

                entity.Property(e => e.Constitution).IsUnicode(false);

                entity.Property(e => e.CountPostCfd).HasColumnName("COUNT_POST_CFD");

                entity.Property(e => e.CredProId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CredPro_ID");

                entity.Property(e => e.CreditAnalyst)
                    .HasMaxLength(500)
                    .HasColumnName("Credit_Analyst");

                entity.Property(e => e.CreditAnalystUid).HasColumnName("CreditAnalyst_UID");

                entity.Property(e => e.CreditApproverName)
                    .HasMaxLength(500)
                    .HasColumnName("Credit_Approver_Name");

                entity.Property(e => e.CreditLoginBy).HasMaxLength(500);

                entity.Property(e => e.CreditSecName)
                    .HasMaxLength(500)
                    .HasColumnName("Credit_Sec_Name");

                entity.Property(e => e.CreditTat).HasColumnName("Credit_TAT");

                entity.Property(e => e.CrossCollateral)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRolePendingSince)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CurrentRole_PendingSince");

                entity.Property(e => e.CurrentUserName).HasMaxLength(500);

                entity.Property(e => e.CurrentUserRole).HasMaxLength(500);

                entity.Property(e => e.DateOfLogin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Login");

                entity.Property(e => e.DefaultHistoryDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Default_History_Deviations");

                entity.Property(e => e.DerivativesAsPerNotionAmount)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("Derivatives_as_per_Notion_Amount");

                entity.Property(e => e.DerivativesAsPerPfeAmount)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Derivatives_as_per_PFE_amount");

                entity.Property(e => e.DisbusrementDate).HasColumnName("Disbusrement_Date");

                entity.Property(e => e.ExposureDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Exposure_Deviations");

                entity.Property(e => e.ExternalRating)
                    .HasMaxLength(151)
                    .IsUnicode(false)
                    .HasColumnName("External_Rating");

                entity.Property(e => e.FinacleMsmeclassification)
                    .IsUnicode(false)
                    .HasColumnName("FinacleMSMEClassification");

                entity.Property(e => e.FinancialParametersDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Financial_Parameters_Deviations");

                entity.Property(e => e.FundBased)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Fund_Based");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.IncrementalExposureInLakhs)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Incremental_Exposure_In_lakhs");

                entity.Property(e => e.InternalScoreRating)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Internal_Score_Rating");

                entity.Property(e => e.IsManualOverride)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("Is Manual Override");

                entity.Property(e => e.LatestAuditedFinancial).HasColumnName("Latest_Audited_Financial");

                entity.Property(e => e.LatestAuditedTurnover)
                    .HasColumnType("decimal(31, 9)")
                    .HasColumnName("Latest_Audited_Turnover");

                entity.Property(e => e.LegalEntityIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegalEntityIdentifierExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LmsId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LMS_ID");

                entity.Property(e => e.Loans).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.LoginAcceptanceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Login_Acceptance_date");

                entity.Property(e => e.LoginMonth)
                    .HasMaxLength(30)
                    .HasColumnName("Login_month");

                entity.Property(e => e.LoginToAcceptanceTat).HasColumnName("Login_to_Acceptance_TAT");

                entity.Property(e => e.MWfId).HasColumnName("M_WF_ID");

                entity.Property(e => e.ManualOverrideComments)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override Comments");

                entity.Property(e => e.ManualOverrideDop)
                    .HasMaxLength(5000)
                    .IsUnicode(false)
                    .HasColumnName("Manual Override DOP");

                entity.Property(e => e.ModeOfFacility)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Mode_of_Facility");

                entity.Property(e => e.MsmeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Type");

                entity.Property(e => e.NameOfTheBorrower)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Name_of_the_Borrower");

                entity.Property(e => e.NatureOfBusiness)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Nature_of_Business");

                entity.Property(e => e.NonFundBased)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Non_Fund_Based");

                entity.Property(e => e.OtherDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Other_Deviations");

                entity.Property(e => e.OwnerMarginDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Owner_Margin_Deviations");

                entity.Property(e => e.PanNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PAN_No");

                entity.Property(e => e.PersonalGuaranteeDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Personal_Guarantee_Deviations");

                entity.Property(e => e.Product)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.PromoterAndGuarantorAgeDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Promoter_and_Guarantor_Age_Deviations");

                entity.Property(e => e.ProposedBankingArrangement).HasColumnName("Proposed_Banking_Arrangement");

                entity.Property(e => e.ReasonsOfDeclineWithdrawnAdditionalRemarks)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Reasons_of_Decline_Withdrawn_Additional_remarks");

                entity.Property(e => e.ReasonsOfDeclineWithdrawnRejection).HasColumnName("Reasons_of_Decline_Withdrawn_Rejection");

                entity.Property(e => e.RegionalHead)
                    .HasMaxLength(302)
                    .HasColumnName("Regional_Head");

                entity.Property(e => e.ReportDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Report Date");

                entity.Property(e => e.RestartedApplication)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Restarted_Application");

                entity.Property(e => e.RiskParameterScoreDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Risk_Parameter_Score_Deviations");

                entity.Property(e => e.Rm)
                    .HasMaxLength(302)
                    .HasColumnName("RM");

                entity.Property(e => e.RmUid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RM_UID");

                entity.Property(e => e.SanctionDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryIndustryName)
                    .HasMaxLength(200)
                    .HasColumnName("Secondary Industry Name");

                entity.Property(e => e.SecretoryVote)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Secretory_Vote");

                entity.Property(e => e.SegmentCrossCollateral).HasColumnName("Segment_Cross_Collateral");

                entity.Property(e => e.SourcingChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Sourcing_Channel");

                entity.Property(e => e.SourcingChannelType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SourcingChannelTypeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusOfApplication)
                    .HasMaxLength(50)
                    .HasColumnName("Status_of_application");

                entity.Property(e => e.SubSegment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenorDeviations)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Tenor_Deviations");

                entity.Property(e => e.TertiaryIndustryName)
                    .HasMaxLength(200)
                    .HasColumnName("Tertiary Industry Name");

                entity.Property(e => e.TotalCount).HasColumnName("TOTAL_COUNT");

                entity.Property(e => e.TotalFacility)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("Total_Facility");

                entity.Property(e => e.TotalTat).HasColumnName("Total_TAT");

                entity.Property(e => e.TypeOfApplication)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Type_of_application");

                entity.Property(e => e.UdyamRegistrationCertificationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitHead)
                    .HasMaxLength(500)
                    .HasColumnName("Unit_Head");

                entity.Property(e => e.Urcavailable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URCAvailable");

                entity.Property(e => e.Urcnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("URCNumber");

                entity.Property(e => e.Wfname)
                    .HasMaxLength(50)
                    .HasColumnName("WFName");

                entity.Property(e => e.ZonalHead)
                    .HasMaxLength(500)
                    .HasColumnName("Zonal_Head");

                entity.Property(e => e.Zone).HasMaxLength(100);
            });

            modelBuilder.Entity<VwRatingsHeirarchy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_RatingsHeirarchy");

                entity.Property(e => e.HId).HasColumnName("H_ID");

                entity.Property(e => e.Hlevel).HasColumnName("HLevel");

                entity.Property(e => e.Hpath)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HPath");

                entity.Property(e => e.Hpath1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("HPATH1");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("NAME");

                entity.Property(e => e.Parent).HasColumnName("PARENT");

                entity.Property(e => e.RtId).HasColumnName("RT_ID");
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemBb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_BB");

                entity.Property(e => e.AcctCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_CCY");

                entity.Property(e => e.AcctName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_NAME");

                entity.Property(e => e.AvgUtil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_UTIL");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.ConvRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONV_RATE");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.DrwngPower)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DRWNG_POWER");

                entity.Property(e => e.ExpoEffectiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_EFFECTIVE_DATE");

                entity.Property(e => e.ExpoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_END_DATE");

                entity.Property(e => e.ExpoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_START_DATE");

                entity.Property(e => e.FixedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_INT_RATE");

                entity.Property(e => e.Foracid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORACID");

                entity.Property(e => e.FutureInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FUTURE_INT");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.LienAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIEN_AMT");

                entity.Property(e => e.LimitPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_PREFIX");

                entity.Property(e => e.LimitSuffix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_SUFFIX");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MarginAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_AMT");

                entity.Property(e => e.MarginCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_CCY");

                entity.Property(e => e.NpaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPA_STATUS");

                entity.Property(e => e.OutstandingAcctCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_ACCT_CCY");

                entity.Property(e => e.OutstandingHomeCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_HOME_CCY");

                entity.Property(e => e.PricingRefRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICING_REF_RATE");

                entity.Property(e => e.SanctLim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SANCT_LIM");

                entity.Property(e => e.SchmCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_CODE");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.SmaStat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_STAT");

                entity.Property(e => e.Spread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPREAD");

                entity.Property(e => e.UnutilAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNUTIL_AMT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemBond>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_Bond");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BuyCCY");

                entity.Property(e => e.BuyOrSell)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Clsparty)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLSparty");

                entity.Property(e => e.CoreCusId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CoreCusID");

                entity.Property(e => e.DataFeedDate).HasColumnType("datetime");

                entity.Property(e => e.IssuerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IssuerID");

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SwiftID");

                entity.Property(e => e.TradeCurency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TraderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TraderID");

                entity.Property(e => e.TreasuryCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TreasuryCustomerID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemEquity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_Equity");

                entity.Property(e => e.ActiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACTIVE_DATE");

                entity.Property(e => e.AvgPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_PRICE");

                entity.Property(e => e.Book)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK");

                entity.Property(e => e.BookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BOOK_VALUE");

                entity.Property(e => e.Corporate)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CORPORATE");

                entity.Property(e => e.Counterparty)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTERPARTY");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY");

                entity.Property(e => e.Currency)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURRENCY");

                entity.Property(e => e.Datefeeddate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATEFEEDDATE");

                entity.Property(e => e.ErrorCountPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.ErrorCountPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_COUNT_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.Exchange)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EXCHANGE");

                entity.Property(e => e.InactiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("INACTIVE_DATE");

                entity.Property(e => e.Issuer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ISSUER");

                entity.Property(e => e.LastExDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_EX_DATE");

                entity.Property(e => e.LastPayDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LAST_PAY_DATE");

                entity.Property(e => e.MarketPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_PRICE");

                entity.Property(e => e.MarketValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARKET_VALUE");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.Property(e => e.NextDividendDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_DIVIDEND_DATE");

                entity.Property(e => e.NextDividendDateRecordDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NEXT_DIVIDEND_DATE_RECORD_DATE");

                entity.Property(e => e.NominalDecimal)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMINAL_DECIMAL");

                entity.Property(e => e.NotionalPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NotionalPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTIONAL_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.NpvNet)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_NET");

                entity.Property(e => e.NpvPricinganalysisDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_DEFAULT");

                entity.Property(e => e.NpvPricinganalysisEquity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPV_PRICINGANALYSIS_EQUITY");

                entity.Property(e => e.PayDividend)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PAY_DIVIDEND");

                entity.Property(e => e.Price)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICE");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_DESCRIPTION");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_TYPE");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY");

                entity.Property(e => e.Quantity1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUANTITY1");

                entity.Property(e => e.QuoteType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("QUOTE_TYPE");

                entity.Property(e => e.Realized)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REALIZED");

                entity.Property(e => e.SettlementAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_AMOUNT");

                entity.Property(e => e.SettlementValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SETTLEMENT_VALUE");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");

                entity.Property(e => e.TotalIssued)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TOTAL_ISSUED");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_ID");

                entity.Property(e => e.TradePrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_PRICE");

                entity.Property(e => e.TradeSettleDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_SETTLE_DATE");

                entity.Property(e => e.Tradestatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADESTATUS");

                entity.Property(e => e.TradingSize)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRADING_SIZE");
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemFxd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_FXD");

                entity.Property(e => e.AssetClass)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyCcy)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BuyCCY");

                entity.Property(e => e.BuyOrSell)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Clsparty)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CLSparty");

                entity.Property(e => e.CoreCusId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CoreCusID");

                entity.Property(e => e.DataFeedDate).HasColumnType("datetime");

                entity.Property(e => e.FarLeg)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MaturityDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mtmamount)
                    .HasColumnType("numeric(18, 5)")
                    .HasColumnName("MTMAmount");

                entity.Property(e => e.Mtmcurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("MTMCurrency");

                entity.Property(e => e.NearLeg)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NotionalAmount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.PortfolioName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Product)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenceEntity)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SellCcy)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("SellCCY");

                entity.Property(e => e.SettlementDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SwiftId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SwiftID");

                entity.Property(e => e.TradeCurency)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TradeDate)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TradeNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TraderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TraderID");

                entity.Property(e => e.TreasuryCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TreasuryCustomerID");

                entity.Property(e => e.Underlying)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemMerged>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_MERGED");

                entity.Property(e => e.AcctCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_CCY");

                entity.Property(e => e.AcctName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ACCT_NAME");

                entity.Property(e => e.AvgUtil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AVG_UTIL");

                entity.Property(e => e.CifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CIF_ID");

                entity.Property(e => e.ConvRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CONV_RATE");

                entity.Property(e => e.CredproFacilityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CREDPRO_FACILITY_ID");

                entity.Property(e => e.CtSaId).HasColumnName("CT_SA_ID");

                entity.Property(e => e.DrwngPower)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DRWNG_POWER");

                entity.Property(e => e.ExpoEffectiveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_EFFECTIVE_DATE");

                entity.Property(e => e.ExpoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_END_DATE");

                entity.Property(e => e.ExpoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EXPO_START_DATE");

                entity.Property(e => e.FixedIntRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FIXED_INT_RATE");

                entity.Property(e => e.Foracid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("FORACID");

                entity.Property(e => e.FutureInt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FUTURE_INT");

                entity.Property(e => e.HomeCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("HOME_CCY");

                entity.Property(e => e.LienAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIEN_AMT");

                entity.Property(e => e.LimitPrefix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_PREFIX");

                entity.Property(e => e.LimitSuffix)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LIMIT_SUFFIX");

                entity.Property(e => e.LoadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("LOAD_DATE");

                entity.Property(e => e.MarginAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_AMT");

                entity.Property(e => e.MarginCcy)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MARGIN_CCY");

                entity.Property(e => e.NpaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NPA_STATUS");

                entity.Property(e => e.OutstandingAcctCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_ACCT_CCY");

                entity.Property(e => e.OutstandingHomeCcy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OUTSTANDING_HOME_CCY");

                entity.Property(e => e.PricingRefRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRICING_REF_RATE");

                entity.Property(e => e.SanctLim)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SANCT_LIM");

                entity.Property(e => e.SchmCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_CODE");

                entity.Property(e => e.SchmType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SCHM_TYPE");

                entity.Property(e => e.SmaStat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SMA_STAT");

                entity.Property(e => e.SourceSystem)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("SOURCE_SYSTEM");

                entity.Property(e => e.Spread)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SPREAD");

                entity.Property(e => e.UnutilAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNUTIL_AMT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemRepo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_Repo");

                entity.Property(e => e.BookAttrDesk)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Book_Attr_Desk");

                entity.Property(e => e.BookId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Book_Id");

                entity.Property(e => e.CounterPartyAttributeCifId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CounterParty_Attribute_CIF_Id");

                entity.Property(e => e.CounterPartyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CounterParty_ID");

                entity.Property(e => e.CurrentNotional)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Current_Notional");

                entity.Property(e => e.Datafeeddate)
                    .HasColumnType("datetime")
                    .HasColumnName("DATAFEEDDATE");

                entity.Property(e => e.DateRoll)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Date_Roll");

                entity.Property(e => e.GlNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GL_Number");

                entity.Property(e => e.Holidays)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PricerAccrual)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Pricer_ACCRUAL");

                entity.Property(e => e.PricerCleanBookValue)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Pricer_CLEAN_BOOK_VALUE");

                entity.Property(e => e.PrincipalAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Principal_Amount");

                entity.Property(e => e.ProcessingOrgId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Processing_Org_ID");

                entity.Property(e => e.ProcessingOrgShortName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Processing_Org_Short_Name");

                entity.Property(e => e.ProductCodeIsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCT_CODE_ISIN");

                entity.Property(e => e.ProductDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Product_Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product_Id");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Product_Type");

                entity.Property(e => e.Quantity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RepoEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_End_Date");

                entity.Property(e => e.RepoFixedRate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Fixed_Rate");

                entity.Property(e => e.RepoPriceAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPO_PRICE_AMT");

                entity.Property(e => e.RepoReverse)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Reverse");

                entity.Property(e => e.RepoStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Repo_Start_Date");

                entity.Property(e => e.TradeComment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Comment");

                entity.Property(e => e.TradeCurrency)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Currency");

                entity.Property(e => e.TradeDayCount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Day_Count");

                entity.Property(e => e.TradeId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Trade_Id");

                entity.Property(e => e.TradeKeyword2FitradeType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TRADE_KEYWORD2_FITradeType");

                entity.Property(e => e.TradeStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Trader)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UnderlyingProductCodeIsin)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Underlying_Product_Code_ISIN");

                entity.Property(e => e.UnderlyingSecurityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Underlying_Security_Id");

                entity.Property(e => e.XBookValueAmt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_BOOK_VALUE_AMT");

                entity.Property(e => e.XDealPrice)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_DEAL_PRICE");
            });

            modelBuilder.Entity<VwTblExposuresuploadSourceSystemUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExposuresuploadSourceSystem_Upload");

                entity.Property(e => e.Ageing)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing");

                entity.Property(e => e.AgeingCrncy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ageing_crncy");

                entity.Property(e => e.BgFinancialOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_financial_os");

                entity.Property(e => e.BgPerformanceOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("bg_performance_os");

                entity.Property(e => e.BorrowerCodes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_codes");

                entity.Property(e => e.BorrowerDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_description");

                entity.Property(e => e.BorrowerStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("borrower_status");

                entity.Property(e => e.BusinessSegment)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment");

                entity.Property(e => e.BusinessSegmentDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("business_segment_desc");

                entity.Property(e => e.CashCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd");

                entity.Property(e => e.CashCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dpd_bucket");

                entity.Property(e => e.CashCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_dues");

                entity.Property(e => e.CashCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cash_credit_os");

                entity.Property(e => e.CifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cif_id");

                entity.Property(e => e.CurrencyExtDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("currency_ext_date");

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status");

                entity.Property(e => e.CurrentStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("current_status_start_date");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customer_code");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("customer_name");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("entity_id");

                entity.Property(e => e.ExportBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd");

                entity.Property(e => e.ExportBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dpd_bucket");

                entity.Property(e => e.ExportBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_dues");

                entity.Property(e => e.ExportBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("export_bills_os");

                entity.Property(e => e.ExposureCifId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_cif_id");

                entity.Property(e => e.ExposureFbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_fb_os");

                entity.Property(e => e.ExposureNfbOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("exposure_nfb_os");

                entity.Property(e => e.FbLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_linked_to_facility");

                entity.Property(e => e.FbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd");

                entity.Property(e => e.FbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dpd_bucket");

                entity.Property(e => e.FbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_dues");

                entity.Property(e => e.FbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_node_os");

                entity.Property(e => e.FbNotLinkedToFacility)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("fb_not_linked_to_facility");

                entity.Property(e => e.GrossFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_fb_exposure");

                entity.Property(e => e.GrossNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_nfb_exposure");

                entity.Property(e => e.GrossTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gross_total_exposure");

                entity.Property(e => e.IndustryCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_code");

                entity.Property(e => e.IndustryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("industry_desc");

                entity.Property(e => e.InlandBillsDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd");

                entity.Property(e => e.InlandBillsDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dpd_bucket");

                entity.Property(e => e.InlandBillsDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_dues");

                entity.Property(e => e.InlandBillsOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("inland_bills_os");

                entity.Property(e => e.InvoiceDiscountingDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd");

                entity.Property(e => e.InvoiceDiscountingDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dpd_bucket");

                entity.Property(e => e.InvoiceDiscountingDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_dues");

                entity.Property(e => e.InvoiceDiscountingOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoice_discounting_os");

                entity.Property(e => e.LcAcceptedOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_accepted_os");

                entity.Property(e => e.LcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lc_os");

                entity.Property(e => e.LcbdDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd");

                entity.Property(e => e.LcbdDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dpd_bucket");

                entity.Property(e => e.LcbdDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_dues");

                entity.Property(e => e.LcbdOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lcbd_os");

                entity.Property(e => e.LimExpDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lim_exp_date");

                entity.Property(e => e.MasterRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("master_rating");

                entity.Property(e => e.ModelRating)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("model_rating");

                entity.Property(e => e.NetFbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_fb_exposure");

                entity.Property(e => e.NetNfbExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_nfb_exposure");

                entity.Property(e => e.NetTotalExposure)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("net_total_exposure");

                entity.Property(e => e.Nfb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb");

                entity.Property(e => e.NfbNodeDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd");

                entity.Property(e => e.NfbNodeDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dpd_bucket");

                entity.Property(e => e.NfbNodeDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_dues");

                entity.Property(e => e.NfbNodeOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nfb_node_os");

                entity.Property(e => e.OthDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd");

                entity.Property(e => e.OthDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dpd_bucket");

                entity.Property(e => e.OthDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_dues");

                entity.Property(e => e.OthOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oth_os");

                entity.Property(e => e.PackingCreditDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd");

                entity.Property(e => e.PackingCreditDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dpd_bucket");

                entity.Property(e => e.PackingCreditDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_dues");

                entity.Property(e => e.PackingCreditOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("packing_credit_os");

                entity.Property(e => e.PreviousStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status");

                entity.Property(e => e.PreviousStatusStartDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("previous_status_start_date");

                entity.Property(e => e.ReportDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("report_date");

                entity.Property(e => e.RmName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("rm_name");

                entity.Property(e => e.SblcOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sblc_os");

                entity.Property(e => e.Sma)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sma");

                entity.Property(e => e.TlwctlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd");

                entity.Property(e => e.TlwctlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dpd_bucket");

                entity.Property(e => e.TlwctlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_dues");

                entity.Property(e => e.TlwctlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("tlwctl_os");

                entity.Property(e => e.TotalFb)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_fb");

                entity.Property(e => e.TotalOsInCrores)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("total_os_in_crores");

                entity.Property(e => e.UserLiab)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("user_liab");

                entity.Property(e => e.WcdlDpd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd");

                entity.Property(e => e.WcdlDpdBucket)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dpd_bucket");

                entity.Property(e => e.WcdlDues)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_dues");

                entity.Property(e => e.WcdlOs)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("wcdl_os");
            });

            modelBuilder.Entity<VwTblExternalCustomerUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblExternalCustomerUpload");

                entity.Property(e => e.AverageAnnualIncome)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AVERAGE_ANNUAL_INCOME");

                entity.Property(e => e.CorpKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CORP_KEY");

                entity.Property(e => e.CountryOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY_OF_INCORPORATION");

                entity.Property(e => e.CustName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CUST_NAME");

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_SINCE");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CUSTOMER_TYPE");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_BIRTH");

                entity.Property(e => e.DateOfIncorporation)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DATE_OF_INCORPORATION");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_CODE");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("GROUP_NAME");

                entity.Property(e => e.Industry)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("INDUSTRY");

                entity.Property(e => e.InternalRating)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_RATING");

                entity.Property(e => e.InternalRatingDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("INTERNAL_RATING_DESCRIPTION");

                entity.Property(e => e.LegalConstitutionType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_CONSTITUTION_TYPE");

                entity.Property(e => e.LegalConstitutionTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("LEGAL_CONSTITUTION_TYPE_DESCRIPTION");

                entity.Property(e => e.MailingAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS");

                entity.Property(e => e.MailingAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_CITY");

                entity.Property(e => e.MailingAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_COUNTRY");

                entity.Property(e => e.MailingAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MAILING_ADDRESS_STATE");

                entity.Property(e => e.Manager)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MANAGER");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MOBILE");

                entity.Property(e => e.OrganizationCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_CODE");

                entity.Property(e => e.OrganizationDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ORGANIZATION_DESCRIPTION");

                entity.Property(e => e.Pan)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PAN");

                entity.Property(e => e.RegOffcAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS");

                entity.Property(e => e.RegOffcAddressCity)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_CITY");

                entity.Property(e => e.RegOffcAddressCountry)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_COUNTRY");

                entity.Property(e => e.RegOffcAddressState)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("REG_OFFC_ADDRESS_STATE");

                entity.Property(e => e.SectorCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECTOR_CODE");

                entity.Property(e => e.SectorDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SECTOR_DESCRIPTION");

                entity.Property(e => e.Segment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENT");

                entity.Property(e => e.Subsector)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSECTOR");

                entity.Property(e => e.SubsectorDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SUBSECTOR_DESCRIPTION");

                entity.Property(e => e.Subsegment)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("SUBSEGMENT");

                entity.Property(e => e.WholesaleFlg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("WHOLESALE_FLG");
            });

            modelBuilder.Entity<VwTblMigCounterpartyUpload>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblMIG_Counterparty_Upload");

                entity.Property(e => e.Activity).IsUnicode(false);

                entity.Property(e => e.AnnualTurnover)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Annual_Turnover");

                entity.Property(e => e.AssetClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Asset_Classification");

                entity.Property(e => e.BsDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BS_DATE");

                entity.Property(e => e.BsrActivityCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Code");

                entity.Property(e => e.BsrActivityConcat)
                    .IsUnicode(false)
                    .HasColumnName("BSR_Activity_Concat");

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Business_Unit");

                entity.Property(e => e.Cluster)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ConcatIndustry)
                    .IsUnicode(false)
                    .HasColumnName("Concat_Industry");

                entity.Property(e => e.ControlStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Control_Status");

                entity.Property(e => e.CounterpartyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerSince)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Since");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Type");

                entity.Property(e => e.DateOfEstablishment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Date_of_Establishment");

                entity.Property(e => e.EnterpriseSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Enterprise_Sector");

                entity.Property(e => e.HighlightedIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Highlighted_Industry");

                entity.Property(e => e.Industry)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InvestmentinPandM)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Investmentin_PandM");

                entity.Property(e => e.IsBankDir)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Is_BankDir");

                entity.Property(e => e.IsLeadRm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Lead_RM");

                entity.Property(e => e.IsMsmeApplicable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_MSME_Applicable");

                entity.Property(e => e.IsUrcAvailable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_URC_Available");

                entity.Property(e => e.IsWeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Is_Weaker_Section");

                entity.Property(e => e.LegalConstitution)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Constitution");

                entity.Property(e => e.LegalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Legal_Name");

                entity.Property(e => e.MainIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Main_Industry");

                entity.Property(e => e.MinorityCommunity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Minority_Community");

                entity.Property(e => e.MsmeActivity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Activity");

                entity.Property(e => e.MsmeClassification)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MSME_Classification");

                entity.Property(e => e.NegativeIndustry)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Negative_Industry");

                entity.Property(e => e.OpsLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ops_Location");

                entity.Property(e => e.OriginationBranch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Origination_Branch");

                entity.Property(e => e.OwnershipType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Ownership_Type");

                entity.Property(e => e.Pep)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP");

                entity.Property(e => e.PepRemarks)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PEP_Remarks");

                entity.Property(e => e.PrimaryAliasId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Primary_Alias_ID");

                entity.Property(e => e.PslCustomerCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Customer_Category");

                entity.Property(e => e.PslSector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PSL_Sector");

                entity.Property(e => e.Region)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RelationshipManager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Relationship_Manager");

                entity.Property(e => e.ResidenceCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Residence_Country");

                entity.Property(e => e.SubIndustry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Sub_Industry");

                entity.Property(e => e.UcicId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UCIC_ID");

                entity.Property(e => e.UdyamRegistrationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Udyam_Registration_number");

                entity.Property(e => e.UrcDate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("URC_Date");

                entity.Property(e => e.WeakerSection)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Weaker_Section");
            });

            modelBuilder.Entity<VwTblOrgHierarchyUploadExcel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tblOrgHierarchyUploadExcel");

                entity.Property(e => e.CurrentDesignation)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("CURRENT_DESIGNATION");

                entity.Property(e => e.EmpName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("emp_name");

                entity.Property(e => e.EmployeeNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("employee_number");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER");

                entity.Property(e => e.ReportingManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REPORTING_MANAGER_NAME");

                entity.Property(e => e.ReviewManager)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER");

                entity.Property(e => e.ReviewManagerName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("REVIEW_MANAGER_NAME");
            });

            modelBuilder.Entity<VwTreasuryTenorsRiskWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_TreasuryTenorsRiskWise");

                entity.Property(e => e.Bid).HasColumnName("BID");

                entity.Property(e => e.Bpmid).HasColumnName("BPMID");

                entity.Property(e => e.BucketName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FacilityType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LmDisplayOrder).HasColumnName("LM_DisplayOrder");

                entity.Property(e => e.ProductType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RiskType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TenorDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenorUnit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tid).HasColumnName("TID");
            });

            modelBuilder.Entity<VwUserRoleRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_UserRoleRegion");

                entity.Property(e => e.RId).HasColumnName("R_ID");

                entity.Property(e => e.RegionName).HasMaxLength(100);

                entity.Property(e => e.RegnId).HasColumnName("Regn_ID");

                entity.Property(e => e.UId).HasColumnName("U_ID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
